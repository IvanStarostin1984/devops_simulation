Hello! This line will go both to the notebook output AND to colab_console_output.txt
[?25l   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/253.0 kB[0m [31m?[0m eta [36m-:--:--[0m[2K   [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m[90m━[0m [32m245.8/253.0 kB[0m [31m8.7 MB/s[0m eta [36m0:00:01[0m[2K   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m253.0/253.0 kB[0m [31m3.7 MB/s[0m eta [36m0:00:00[0m
[?25h[?25l   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/1.0 MB[0m [31m?[0m eta [36m-:--:--[0m[2K   [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m1.0/1.0 MB[0m [31m37.3 MB/s[0m eta [36m0:00:01[0m[2K   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.0/1.0 MB[0m [31m21.8 MB/s[0m eta [36m0:00:00[0m
[?25h[?25l   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/1.5 MB[0m [31m?[0m eta [36m-:--:--[0m[2K   [91m━━━━━━━━━━━━━━[0m[91m╸[0m[90m━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.6/1.5 MB[0m [31m16.9 MB/s[0m eta [36m0:00:01[0m[2K   [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.5/1.5 MB[0m [31m25.9 MB/s[0m eta [36m0:00:00[0m
[?25hNLTK version: 3.9.2
Saving artifact_data.json to artifact_data.json
Saving client_specifications.docx to client_specifications.docx
Saving simulation_config.json to simulation_config.json
DEBUG: built phase_index_map: {'Initiating': 0, 'FeasibilityStudy': 1}
INFO: Running new phase + mini-iteration approach.
Phase 'Initiating' ⇒ mini 1/2 (Macro=1)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=Initiating, mini=1).

# Objective: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 1
  • Artifact index:  1.1.0
  • Artifact name:   Input
  • Artifact type:   table
  • Columns (exact order): Input Item, Details, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Input Item  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: Client specifications, Initial user scenarios, Domain details, Success metrics
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Input Item": "Basic Goal",
    "Details": "Summarize the primary objective",
    "Related Reqs": "N/A"
  },
  {
    "Input Item": "Constraints",
    "Details": "Highlight known limitations",
    "Related Reqs": "N/A"
  }
]

## **Special instructions**: List initial high-level inputs for a software project in each row

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
None

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
No resolved issues from other artifacts.

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": []
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.0",
          "artifactName": "Input",
          "columns": ["Input Item", "Details", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": ["Input Item", "Details", "Related Reqs"],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without providing identity; store feedback text and metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; accept and store only if user provides it; mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each feedback submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers to see all feedback; least-privilege access to admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog and logs deletion event with timestamp and actor",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Store emails and admin credentials encrypted at rest; protect access in transit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use and retention when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Simple, accessible UI that works on Chrome, Firefox, Edge and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >=99.0 % over PT30D",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s measured over PT30D (first contentful paint)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv4 identifiers — simple unique keys"
  }
}
[INFO] No unresolved issues found for artifact=1.1.0 in the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.


 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.0

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.1 — Main Scenario Table with N modules (Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without providing identity; store feedback text and metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; accept and store only if user provides it; mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each feedback submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers to see all feedback; least-privilege access to admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog and logs deletion event with timestamp and actor",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Store emails and admin credentials encrypted at rest; protect access in transit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use and retention when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Simple, accessible UI that works on Chrome, Firefox, Edge and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >=99.0 % over PT30D",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s measured over PT30D (first contentful paint)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv4 identifiers \u2014 simple unique keys"
  }
}

 6. Artifact-specific custom instructions
  List initial high-level inputs for a software project in each row

 7. Unresolved Issues from previous iteration:
  []

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify artifact internal consistency and stage-appropriateness; 2) Confirm rows trace to ClientSpec; 3) Check deferrals per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Low",
      "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit"
    }
  ]
}
BEFORE-MERGE 1.1.0 1
CALL-VERIFY 1.1.0 1/Initiating/1
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    []

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
  "impact": "Low",
  "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: ,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "New security baseline gap"
}
DEBUG: Using cached response for identical prompt.
[DEBUG] New GapID assigned immediately: d6e0ba
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=Initiating, mini=1).

# Objective: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 2
  • Artifact index:  1.1.1
  • Artifact name:   Main Scenario Table with N modules
  • Artifact type:   table
  • Columns (exact order): Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Module ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Module ID": "M-1",
    "Module": "User",
    "Action 1": "Register",
    "Action 2": "Login",
    "Action 3": "Verify email",
    "Action 4": "Verify academic credentials",
    "Action 5": "Update profile",
    "Related Reqs": "Req-01"
  },
  {
    "Module ID": "M-2",
    "Module": "Event",
    "Action 1": "Create event",
    "Action 2": "Edit event",
    "Action 3": "Delete event",
    "Action 4": "submit event",
    "Action 5": "View event details",
    "Related Reqs": "Req-01"
  }
]

## **Special instructions**: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
None

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
No resolved issues from other artifacts.

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without providing identity; store feedback text and metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; accept and store only if user provides it; mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each feedback submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers to see all feedback; least-privilege access to admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog and logs deletion event with timestamp and actor",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Store emails and admin credentials encrypted at rest; protect access in transit",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use and retention when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Simple, accessible UI that works on Chrome, Firefox, Edge and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >=99.0 % over PT30D",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s measured over PT30D (first contentful paint)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1",
          "artifactName": "Main Scenario Table with N modules",
          "columns": ["Module ID", "Module", "Action 1", "Action 2", "...", "Action n", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": ["Module ID", "Module", "Action 1", "Action 2", "Action 3", "Action 4", "Action 5", "Action 6", "...", "Action n", "Related Reqs"],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice",
      "Action 5": "Submit feedback",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload",
      "Action 2": "Record ISO-8601 UTC timestamp",
      "Action 3": "Sanitize content for display",
      "Action 4": "Mark contact_intent if email present",
      "Action 5": "Persist to storage backend",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback (confirm dialog)",
      "Action 5": "Log deletion actor and timestamp",
      "Action 6": "Export or search feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP",
      "Action 2": "Enforce session timeout",
      "Action 3": "Role-based access control",
      "Action 4": "Optional MFA for admin accounts",
      "Action 5": "Audit admin login events",
      "Action 6": "Least-privilege for admin operations",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when requested",
      "Action 2": "Capture consent/contact-intent flag",
      "Action 3": "Provide data access request process",
      "Action 4": "Support data deletion upon request",
      "Action 5": "Show retention period to admins",
      "Action 6": "Provide contact info for privacy queries",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUID identifiers — ensure stable keys | # DEC-02: GDPR notice module — capture consent flag"
  }
}
[INFO] No unresolved issues found for artifact=1.1.1 in the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without providing identity; store feedback text and metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field; accept and store only if user provides it; mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each feedback submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers to see all feedback; least-privilege access to admin UI | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog and logs deletion event with timestamp and actor | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Store emails and admin credentials encrypted at rest; protect access in transit | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use and retention when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Simple, accessible UI that works on Chrome, Firefox, Edge and mobile widths | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >=99.0 % over PT30D | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s measured over PT30D (first contentful paint) | [PLACEHOLDER-AUTO] awaiting upstream requirement

 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice",
      "Action 5": "Submit feedback",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload",
      "Action 2": "Record ISO-8601 UTC timestamp",
      "Action 3": "Sanitize content for display",
      "Action 4": "Mark contact_intent if email present",
      "Action 5": "Persist to storage backend",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback (confirm dialog)",
      "Action 5": "Log deletion actor and timestamp",
      "Action 6": "Export or search feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP",
      "Action 2": "Enforce session timeout",
      "Action 3": "Role-based access control",
      "Action 4": "Optional MFA for admin accounts",
      "Action 5": "Audit admin login events",
      "Action 6": "Least-privilege for admin operations",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when requested",
      "Action 2": "Capture consent/contact-intent flag",
      "Action 3": "Provide data access request process",
      "Action 4": "Support data deletion upon request",
      "Action 5": "Show retention period to admins",
      "Action 6": "Provide contact info for privacy queries",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUID identifiers \u2014 ensure stable keys | # DEC-02: GDPR notice module \u2014 capture consent flag"
  }
}

 6. Artifact-specific custom instructions
  Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "impact": "Low",
    "desc": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "Verify internal consistency, traceability to ClientSpec, and correct deferral of missing content",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 Whole artifact cross-artifact security baseline gaps",
      "gapID": "d6e0ba",
      "knownIssue": "InProgress",
      "impact": "Low",
      "recommendation": "Add baselines to Auth-Session and API-Service"
    }
  ]
}
BEFORE-MERGE 1.1.1 1
CALL-VERIFY 1.1.1 1/Initiating/1
DEBUG: embed-override matched → d6e0ba (sim=0.897)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=Initiating, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice",
      "Action 5": "Submit feedback",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload",
      "Action 2": "Record ISO-8601 UTC timestamp",
      "Action 3": "Sanitize content for display",
      "Action 4": "Mark contact_intent if email present",
      "Action 5": "Persist to storage backend",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback (confirm dialog)",
      "Action 5": "Log deletion actor and timestamp",
      "Action 6": "Export or search feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP",
      "Action 2": "Enforce session timeout",
      "Action 3": "Role-based access control",
      "Action 4": "Optional MFA for admin accounts",
      "Action 5": "Audit admin login events",
      "Action 6": "Least-privilege for admin operations",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when requested",
      "Action 2": "Capture consent/contact-intent flag",
      "Action 3": "Provide data access request process",
      "Action 4": "Support data deletion upon request",
      "Action 5": "Show retention period to admins",
      "Action 6": "Provide contact info for privacy queries",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUID identifiers \u2014 ensure stable keys | # DEC-02: GDPR notice module \u2014 capture consent flag"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 Whole artifact cross-artifact security baseline gaps",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "InProgress",
      "notes": "Show rows M-5,M-6,M-3 include timeout,MFA,consent,audit; cookie flags absent"
    }
  ]
}
DEBUG: Actually resolved 0 issues in mini iteration (macro=1, phase=Initiating, mini=1).
DEBUG: Actually resolved 0 issues in mini iteration (macro=1, phase=Initiating, mini=1).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=1, phase=Initiating, mini=1).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.0: # DEC-01: UUIDv4 identifiers — simple unique keys
1.1.1: # DEC-01: UUID identifiers — ensure stable keys | # DEC-02: GDPR notice module — capture consent flag

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | d6e0ba |
| --- | --- |
| 1.1.0 Input | N/L |
| 1.1.1 Main Scenario Table with N modules | I/L |

Canonical issue descriptions:
- d6e0ba: 1.1.1 Whole artifact cross-artifact security baseline gaps

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=1, new=0, resolved=0, stillOpen=1, criticalOpen=0, highOpen=0, deltaOpen=1

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: MissedRequirement open=1

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 1
   • instructions: List initial high-level inputs for a software project in each row
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs  |  open gaps: 1
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: UUID identifiers chosen because ensure stable keys",
    "global-2: Lack of unified security baseline causes inconsistent module security expectations"
  ],
  "lessons_learned": [
    "global-1: Standardise UUID identifiers across artifacts because ensure stable keys",
    "global-2: Require a minimal security baseline and map it into each module's DevSecOps / Security column (Whole artifact)"
  ],
  "processChanges": [
    {
      "type": "modify_instructions",
      "artifactIndex": "1.1.1",
      "new_instructions": "Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability"
    }
  ]
}
INFO: Appended new instructions to 1.1.1. Length now = 351 chars
INFO: Updated instructions for artifact 1.1.1
Phase 'Initiating' ⇒ mini 2/2 (Macro=1)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=Initiating, mini=2).

# Objective: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 1
  • Artifact index:  1.1.0
  • Artifact name:   Input
  • Artifact type:   table
  • Columns (exact order): Input Item, Details, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Input Item  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: Client specifications, Initial user scenarios, Domain details, Success metrics
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Input Item": "Basic Goal",
    "Details": "Summarize the primary objective",
    "Related Reqs": "N/A"
  },
  {
    "Input Item": "Constraints",
    "Details": "Highlight known limitations",
    "Related Reqs": "N/A"
  }
]

## **Special instructions**: List initial high-level inputs for a software project in each row

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Standardise UUID identifiers across artifacts because ensure stable keys
- global-2: Require a minimal security baseline and map it into each module's DevSecOps / Security column (Whole artifact)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 Whole artifact cross-artifact security baseline gaps",
    "impact": "Low",
    "knownIssue": "InProgress",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
No resolved issues from other artifacts.

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without providing identity; store feedback text and metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; accept and store only if user provides it; mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each feedback submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers to see all feedback; least-privilege access to admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog and logs deletion event with timestamp and actor",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Store emails and admin credentials encrypted at rest; protect access in transit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use and retention when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Simple, accessible UI that works on Chrome, Firefox, Edge and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >=99.0 % over PT30D",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s measured over PT30D (first contentful paint)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv4 identifiers \u2014 simple unique keys"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": []
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.0",
          "artifactName": "Input",
          "columns": ["Input Item", "Details", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers — sortable time-based | # DEC-02: security baseline — crypto/compliance rule"
  }
}
[INFO] Found 1 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.


 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.0

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.1 — Main Scenario Table with N modules (Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable time-based | # DEC-02: security baseline \u2014 crypto/compliance rule"
  }
}

 6. Artifact-specific custom instructions
  List initial high-level inputs for a software project in each row

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "impact": "Low",
    "desc": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Internal consistency, completeness, trace links; 2) Trace to ClientSpec; 3) Deferral correctness",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.0 Whole artifact security/privacy baseline partial",
      "gapID": "d6e0ba",
      "knownIssue": "InProgress",
      "impact": "Low",
      "recommendation": "Add absolute timeout, session rotation, consent fields"
    }
  ]
}
BEFORE-MERGE 1.1.0 1
CALL-VERIFY 1.1.0 1/Initiating/2
DEBUG: embed-override matched → d6e0ba (sim=0.906)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable time-based | # DEC-02: security baseline \u2014 crypto/compliance rule"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact security/privacy baseline partial",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Show 'Security baseline' row includes session cookie flags, PT30M timeout, MFA, consent, retention, audit"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=Initiating, mini=2).

# Objective: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 2
  • Artifact index:  1.1.1
  • Artifact name:   Main Scenario Table with N modules
  • Artifact type:   table
  • Columns (exact order): Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Module ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Module ID": "M-1",
    "Module": "User",
    "Action 1": "Register",
    "Action 2": "Login",
    "Action 3": "Verify email",
    "Action 4": "Verify academic credentials",
    "Action 5": "Update profile",
    "Related Reqs": "Req-01"
  },
  {
    "Module ID": "M-2",
    "Module": "Event",
    "Action 1": "Create event",
    "Action 2": "Edit event",
    "Action 3": "Delete event",
    "Action 4": "submit event",
    "Action 5": "View event details",
    "Related Reqs": "Req-01"
  }
]

## **Special instructions**: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Standardise UUID identifiers across artifacts because ensure stable keys
- global-2: Require a minimal security baseline and map it into each module's DevSecOps / Security column (Whole artifact)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact security/privacy baseline partial",
    "impact": "Low",
    "knownIssue": "InProgress",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice",
      "Action 5": "Submit feedback",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload",
      "Action 2": "Record ISO-8601 UTC timestamp",
      "Action 3": "Sanitize content for display",
      "Action 4": "Mark contact_intent if email present",
      "Action 5": "Persist to storage backend",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback (confirm dialog)",
      "Action 5": "Log deletion actor and timestamp",
      "Action 6": "Export or search feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP",
      "Action 2": "Enforce session timeout",
      "Action 3": "Role-based access control",
      "Action 4": "Optional MFA for admin accounts",
      "Action 5": "Audit admin login events",
      "Action 6": "Least-privilege for admin operations",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when requested",
      "Action 2": "Capture consent/contact-intent flag",
      "Action 3": "Provide data access request process",
      "Action 4": "Support data deletion upon request",
      "Action 5": "Show retention period to admins",
      "Action 6": "Provide contact info for privacy queries",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUID identifiers \u2014 ensure stable keys | # DEC-02: GDPR notice module \u2014 capture consent flag"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1",
          "artifactName": "Main Scenario Table with N modules",
          "columns": ["Module ID", "Module", "Action 1", "Action 2", "...", "Action n", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "UUID-0001",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0002",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present",
      "Action 4": "Hash or encrypt email before persist",
      "Action 5": "Persist record with time-sortable UUID",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0003",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy P365D enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0004",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
      "Action 6": "Search and export feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0005",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Idle session timeout PT30M",
      "Action 4": "Enforce MFA for admin accounts",
      "Action 5": "Role-based access control for UI actions",
      "Action 6": "Audit admin login and privilege changes",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0006",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support data deletion upon verified request",
      "Action 5": "Expose retention period to admins",
      "Action 6": "Record consent and processing purpose in audit logs",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Module security baseline — enforce session, MFA"
  }
}
[INFO] Found 1 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without identity; store feedback text and minimal metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers; least-privilege roles for admin UI access and session controls | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use, retention and opt-out when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement

 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "UUID-0001",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0002",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present",
      "Action 4": "Hash or encrypt email before persist",
      "Action 5": "Persist record with time-sortable UUID",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0003",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy P365D enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0004",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
      "Action 6": "Search and export feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0005",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Idle session timeout PT30M",
      "Action 4": "Enforce MFA for admin accounts",
      "Action 5": "Role-based access control for UI actions",
      "Action 6": "Audit admin login and privilege changes",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0006",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support data deletion upon verified request",
      "Action 5": "Expose retention period to admins",
      "Action 6": "Record consent and processing purpose in audit logs",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Module security baseline \u2014 enforce session, MFA"
  }
}

 6. Artifact-specific custom instructions
  Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

 7. Unresolved Issues from previous iteration:
  []

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency, completeness for this stage; 2) Check row trace to client spec/dependencies; 3) Confirm missing content correctly deferred per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "High",
      "recommendation": "Add rate-limit/backoff at API-Service"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 UUID-0005 No auth lockout/brute-force control",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Add lockout/backoff policy in Auth-Session"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Implement session rotation and rotatedAt field"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Add deletionNonce TTL verification in API-Service"
    }
  ]
}
BEFORE-MERGE 1.1.1 4
CALL-VERIFY 1.1.1 1/Initiating/2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
  "impact": "High",
  "recommendation": "Add rate-limit/backoff at API-Service",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Rate-limit is different gap"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    []

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
  "impact": "High",
  "recommendation": "Add rate-limit/backoff at API-Service",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: ,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "New security gap"
}
[DEBUG] New GapID assigned immediately: 0a5003
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0005 No auth lockout/brute-force control",
  "impact": "Medium",
  "recommendation": "Add lockout/backoff policy in Auth-Session",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "0a5003",
  "explanation": "Same brute-force control gap"
}
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions || 1.1.1 UUID-0005 No auth lockout/brute-force control",
    "impact": "Medium",
    "recommendation": "Add lockout/backoff policy in Auth-Session",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
  "impact": "Medium",
  "recommendation": "Implement session rotation and rotatedAt field",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Different session requirement"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    []

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
  "impact": "Medium",
  "recommendation": "Implement session rotation and rotatedAt field",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: ,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Session rotation new gap"
}
[DEBUG] New GapID assigned immediately: 9d77eb
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
canonical="1.1.1 UUID-0005 Session rotation not specified"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions || 1.1.1 UUID-0005 No auth lockout/brute-force control",
    "impact": "Medium",
    "recommendation": "Add lockout/backoff policy in Auth-Session",
    "knownIssue": "NewIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
  "impact": "Medium",
  "recommendation": "Add deletionNonce TTL verification in API-Service",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003, 9d77eb,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Deletion nonce missing"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    []

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
  "impact": "Medium",
  "recommendation": "Add deletionNonce TTL verification in API-Service",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: ,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Completely new security gap"
}
[DEBUG] New GapID assigned immediately: 2ac8a1
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "UUID-0001",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0002",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present",
      "Action 4": "Hash or encrypt email before persist",
      "Action 5": "Persist record with time-sortable UUID",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0003",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy P365D enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0004",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
      "Action 6": "Search and export feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0005",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Idle session timeout PT30M",
      "Action 4": "Enforce MFA for admin accounts",
      "Action 5": "Role-based access control for UI actions",
      "Action 6": "Audit admin login and privilege changes",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0006",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support data deletion upon verified request",
      "Action 5": "Expose retention period to admins",
      "Action 6": "Record consent and processing purpose in audit logs",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Module security baseline \u2014 enforce session, MFA"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Cite rows UUID-0005 and UUID-0006: session flags, PT30M, MFA, consent, retention, audit"
    }
  ]
}
CALL-VERIFY 1 Initiating 2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable time-based | # DEC-02: security baseline \u2014 crypto/compliance rule"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 Whole artifact cross-artifact security baseline gaps",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Show 'Security baseline' row lists cookies, timeout, MFA, consent, retention, audit"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "UUID-0001",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0002",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present",
      "Action 4": "Hash or encrypt email before persist",
      "Action 5": "Persist record with time-sortable UUID",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0003",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy P365D enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0004",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
      "Action 6": "Search and export feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0005",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Idle session timeout PT30M",
      "Action 4": "Enforce MFA for admin accounts",
      "Action 5": "Role-based access control for UI actions",
      "Action 6": "Audit admin login and privilege changes",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0006",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support data deletion upon verified request",
      "Action 5": "Expose retention period to admins",
      "Action 6": "Record consent and processing purpose in audit logs",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Module security baseline \u2014 enforce session, MFA"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact security/privacy baseline partial",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Show Admin Authentication row includes session/MFA/audit; Privacy & GDPR includes consent/retention"
    }
  ]
}
DEBUG: Actually resolved 1 issues in mini iteration (macro=1, phase=Initiating, mini=2).
CALL-VERIFY 1 Initiating 2
DEBUG: Using cached response for identical prompt.
DEBUG: Using cached response for identical prompt.
DEBUG: Actually resolved 1 issues in mini iteration (macro=1, phase=Initiating, mini=2).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=1, phase=Initiating, mini=2).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.0: # DEC-01: UUIDv7 identifiers — sortable time-based | # DEC-02: security baseline — crypto/compliance rule
1.1.1: # DEC-01: Module security baseline — enforce session, MFA

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 9d77eb | d6e0ba |
| --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  |  | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | N/M | N/M | I/L |

Canonical issue descriptions:
- 0a5003: 1.1.1 UUID-0005 No auth lockout/brute-force control
- 2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing
- 9d77eb: 1.1.1 UUID-0005 Session rotation not specified
- d6e0ba: 1.1.0 Whole artifact security/privacy baseline partial

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=4, new=3, resolved=1, stillOpen=3, criticalOpen=0, highOpen=0, deltaOpen=3

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: SecurityGap open=3

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 1
   • instructions: List initial high-level inputs for a software project in each row
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs  |  open gaps: 4
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: UUIDv7 identifiers chosen because sortable time-based",
    "global-2: Security baseline mandated because crypto/compliance rule",
    "1.1.0: Security baseline partial because consolidated baseline and traceability missing",
    "1.1.1: Module security controls unspecified because table lacks DevSecOps/Security column"
  ],
  "lessons_learned": [
    "global-1: Adopt UUIDv7 across services because sortable time-based",
    "global-2: Enforce project security baseline across modules because crypto/compliance rule",
    "1.1.0: Centralise full security/privacy baseline here and link controls to Related Reqs (Whole artifact)",
    "1.1.1: Add DevSecOps/Security column and require explicit controls per module e.g. lockout, session-rotation, deletionNonce (DevSecOps / Security)"
  ],
  "processChanges": [
    {
      "type": "modify_instructions",
      "artifactIndex": "1.1.0",
      "new_instructions": "List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control"
    },
    {
      "type": "add_columns",
      "artifactIndex": "1.1.1",
      "columns": [
        "DevSecOps / Security"
      ]
    }
  ]
}
INFO: Appended new instructions to 1.1.0. Length now = 185 chars
INFO: Updated instructions for artifact 1.1.0
DEBUG: Updating columns for 1.1.1 from 'Module ID, Module, Action 1, Action 2,..., Action n, Related Reqs' to 'Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security'
INFO: Added columns ['DevSecOps / Security'] to artifact 1.1.1
Phase 'FeasibilityStudy' ⇒ mini 1/2 (Macro=1)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=1).

# Objective: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 3
  • Artifact index:  1.1.1.1
  • Artifact name:   Modules Components Description Table
  • Artifact type:   table
  • Columns (exact order): Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Requirement ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Requirement ID": "FR-01",
    "Module": "User",
    "Component": "Register",
    "Description": "User signs up with details like name, email, and password.",
    "Interface": "I-1: Registration form (email/password)",
    "Potential Metrics": "Actionable: Registration success rate (% completion); Time to register. Vanity: Total registrations",
    "V&V focus": "TBD"
  },
  {
    "Requirement ID": "FR-02",
    "Module": "User",
    "Component": "Login",
    "Description": "User logs in with credentials.",
    "Interface": "I-3: Login form",
    "Potential Metrics": "Actionable: Login success rate (% successful); Avg. login time Vanity: Total login attempts",
    "V&V focus": "TBD"
  }
]

## **Special instructions**: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Adopt UUIDv7 across services because sortable time-based
- global-2: Enforce project security baseline across modules because crypto/compliance rule

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1",
      "artifactName": "Main Scenario Table with N modules",
      "columns": [
        "Module ID",
        "Module",
        "Action 1",
        "Action 2",
        "Action 3",
        "Action 4",
        "Action 5",
        "Action 6",
        "...",
        "Action n",
        "Related Reqs"
      ],
      "rows": [
        {
          "Module ID": "UUID-0001",
          "Module": "Public Feedback Form",
          "Action 1": "Open feedback page (responsive)",
          "Action 2": "Enter feedback text",
          "Action 3": "Optional email input",
          "Action 4": "Show GDPR/privacy notice and consent checkbox",
          "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
          "Action 6": "Show submission confirmation",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0002",
          "Module": "Submission Processing",
          "Action 1": "Validate feedback payload server-side",
          "Action 2": "Sanitize content for display",
          "Action 3": "Mark contact_intent if email present",
          "Action 4": "Hash or encrypt email before persist",
          "Action 5": "Persist record with time-sortable UUID",
          "Action 6": "Return success/failure to client",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0003",
          "Module": "Storage",
          "Action 1": "Store feedback records in SQL RDBMS",
          "Action 2": "Encrypt sensitive fields at rest",
          "Action 3": "Apply least-privilege DB access",
          "Action 4": "Retention policy P365D enforcement",
          "Action 5": "Audit-write deletion events",
          "Action 6": "Periodic backups of dataset",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0004",
          "Module": "Admin UI",
          "Action 1": "Admin login screen (responsive)",
          "Action 2": "List feedback sorted by timestamp",
          "Action 3": "View full feedback details",
          "Action 4": "Delete feedback with confirm dialog",
          "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
          "Action 6": "Search and export feedback list",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0005",
          "Module": "Admin Authentication",
          "Action 1": "Authenticate admins via OIDC IdP capability",
          "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Action 3": "Idle session timeout PT30M",
          "Action 4": "Enforce MFA for admin accounts",
          "Action 5": "Role-based access control for UI actions",
          "Action 6": "Audit admin login and privilege changes",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0006",
          "Module": "Privacy & GDPR",
          "Action 1": "Display email-use notice when email requested",
          "Action 2": "Capture consent and contact-intent flags",
          "Action 3": "Provide data access and deletion request process",
          "Action 4": "Support data deletion upon verified request",
          "Action 5": "Expose retention period to admins",
          "Action 6": "Record consent and processing purpose in audit logs",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1.1",
          "artifactName": "Modules Components Description Table",
          "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus"],
  "rows": [
    { "Requirement ID":"FR-001", "Module":"Public Feedback Form", "Component":"Open feedback page (responsive)", "Description":"Serve responsive feedback page across desktop/mobile", "Interface":"I-1: GET /feedback page", "Potential Metrics":"Median FCP <=2.0 s over PT30D (production)", "V&V focus":"Cross-browser rendering, accessibility" },
    { "Requirement ID":"FR-002", "Module":"Public Feedback Form", "Component":"Enter feedback text", "Description":"Input accepts freeform feedback text, client-side length limit 5000 chars", "Interface":"I-2: feedback textarea", "Potential Metrics":"Validation error rate <=0.5% PT30D", "V&V focus":"Input validation, XSS sanitization" },
    { "Requirement ID":"FR-003", "Module":"Public Feedback Form", "Component":"Optional email input", "Description":"Optional email field; flag contact_intent when present; store encrypted/hashed", "Interface":"I-3: email input (optional)", "Potential Metrics":"% submissions with email (vanity); encryption-at-rest verified", "V&V focus":"Email optionality, encryption correctness" },
    { "Requirement ID":"FR-004", "Module":"Public Feedback Form", "Component":"Show GDPR/privacy notice and consent checkbox", "Description":"Display brief email-use notice and consent capture when email requested", "Interface":"I-4: consent checkbox UI", "Potential Metrics":"Consent capture rate when email present (%) PT30D", "V&V focus":"Consent recorded and auditable" },
    { "Requirement ID":"FR-005", "Module":"Public Feedback Form", "Component":"Submit feedback with ISO-8601 UTC timestamp", "Description":"POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp", "Interface":"I-5: POST /feedback", "Potential Metrics":"Submission success rate >=99.0% over PT30D", "V&V focus":"Id assignment, timestamp accuracy" },
    { "Requirement ID":"FR-006", "Module":"Public Feedback Form", "Component":"Show submission confirmation", "Description":"Client shows success/failure message after submit", "Interface":"I-6: submission UI response", "Potential Metrics":"Median time-to-confirm <=1.5 s PT30D", "V&V focus":"User feedback and error handling" },
    { "Requirement ID":"FR-007", "Module":"Submission Processing", "Component":"Validate feedback payload server-side", "Description":"Server-side schema validation and duplicate detection", "Interface":"I-7: POST /feedback validation", "Potential Metrics":"Rejected payload rate <=1.0% PT30D", "V&V focus":"Schema validation, duplicate suppression" },
    { "Requirement ID":"FR-008", "Module":"Submission Processing", "Component":"Sanitize content for display", "Description":"Sanitize stored content to prevent XSS on admin views", "Interface":"I-8: sanitize pipeline", "Potential Metrics":"XSS vulnerability count =0 (scan)", "V&V focus":"Sanitizer test coverage" },
    { "Requirement ID":"FR-009", "Module":"Submission Processing", "Component":"Mark contact_intent if email present", "Description":"Set contact_intent boolean when optional email provided", "Interface":"I-9: contact_intent flag in payload", "Potential Metrics":"Flag consistency 100% PT30D (audit)", "V&V focus":"Flag persistence, audit logs" },
    { "Requirement ID":"FR-010", "Module":"Submission Processing", "Component":"Hash or encrypt email before persist", "Description":"Apply field-level encryption or hashing to emails prior to storage", "Interface":"I-10: crypto module", "Potential Metrics":"Encrypted-at-rest verified 100% (audit)", "V&V focus":"Encryption key usage, KMS integration tests" },
    { "Requirement ID":"FR-011", "Module":"Submission Processing", "Component":"Persist record with time-sortable UUID", "Description":"Persist feedback record with UUIDv7 primary id", "Interface":"I-11: DB insert API", "Potential Metrics":"Insert success rate >=99.0% PT30D", "V&V focus":"ID format, DB ACID write tests" },
    { "Requirement ID":"FR-012", "Module":"Submission Processing", "Component":"Return success/failure to client", "Description":"Return clear HTTP status and error codes; retry-safe", "Interface":"I-12: POST /feedback response codes", "Potential Metrics":"Proper HTTP success code on valid submit 100%", "V&V focus":"Status code correctness, idempotency" },
    { "Requirement ID":"FR-013", "Module":"Storage", "Component":"Store feedback records in SQL RDBMS", "Description":"Persist feedback rows in SQL RDBMS with least-privilege access", "Interface":"I-13: DB schema feedback table", "Potential Metrics":"DB write latency p95 <=200 ms PT30D", "V&V focus":"Schema correctness, access controls" },
    { "Requirement ID":"FR-014", "Module":"Storage", "Component":"Encrypt sensitive fields at rest", "Description":"Encrypt emails and credentials at rest using field-level encryption", "Interface":"I-14: encryption-at-rest policy", "Potential Metrics":"Encrypted fields coverage 100% (audit)", "V&V focus":"Encryption verification, key rotation tests" },
    { "Requirement ID":"FR-015", "Module":"Storage", "Component":"Apply least-privilege DB access", "Description":"DB accounts scoped by role; app uses minimal privileges", "Interface":"I-15: DB access roles", "Potential Metrics":"Role violation incidents =0 PT90D", "V&V focus":"Access control audits" },
    { "Requirement ID":"FR-016", "Module":"Storage", "Component":"Retention policy P365D enforcement", "Description":"Automated deletion of records older than P365D unless exempt", "Interface":"I-16: retention job", "Potential Metrics":"Retention enforcement rate 100% monthly", "V&V focus":"Retention job correctness, delete logs" },
    { "Requirement ID":"FR-017", "Module":"Storage", "Component":"Audit-write deletion events", "Description":"Log deletion actor id and ISO-8601 timestamp immutably", "Interface":"I-17: deletion audit log", "Potential Metrics":"Deletion audit entries 100% per delete", "V&V focus":"Audit integrity and append-only writes" },
    { "Requirement ID":"FR-018", "Module":"Storage", "Component":"Periodic backups of dataset", "Description":"Perform regular backups with retention and restore tests", "Interface":"I-18: backup schedule", "Potential Metrics":"Daily backup success rate >=99.0% PT30D", "V&V focus":"Backup restore verification" },
    { "Requirement ID":"FR-019", "Module":"Admin UI", "Component":"Admin login screen (responsive)", "Description":"Responsive admin login with session handling", "Interface":"I-19: GET/POST /admin/login", "Potential Metrics":"Median admin login time <=2.0 s PT30D", "V&V focus":"Auth flow and UI accessibility" },
    { "Requirement ID":"FR-020", "Module":"Admin UI", "Component":"List feedback sorted by timestamp", "Description":"Admin list view sorted newest-first using UUIDv7 ordering", "Interface":"I-20: GET /admin/feedback?sort=time", "Potential Metrics":"List latency p95 <=300 ms PT30D", "V&V focus":"Sorting correctness, pagination" },
    { "Requirement ID":"FR-021", "Module":"Admin UI", "Component":"View full feedback details", "Description":"Detail view shows text, timestamp, contact_intent, encrypted email marker", "Interface":"I-21: GET /admin/feedback/{id}", "Potential Metrics":"Detail retrieval success 100% PT30D", "V&V focus":"Decryption/display rules, masking" },
    { "Requirement ID":"FR-022", "Module":"Admin UI", "Component":"Delete feedback with confirm dialog", "Description":"Admin delete requires explicit confirm and second-step verification", "Interface":"I-22: DELETE /admin/feedback/{id}", "Potential Metrics":"Confirmed-deletes ratio >=99% PT30D", "V&V focus":"Confirm dialog enforcement, race conditions" },
    { "Requirement ID":"FR-023", "Module":"Admin UI", "Component":"Log deletion actor ID and ISO-8601 timestamp", "Description":"Record actor id and timestamp in audit log on delete", "Interface":"I-23: deletion audit entry", "Potential Metrics":"Audit entry present 100% per deletion", "V&V focus":"Audit consistency and tamper-evidence" },
    { "Requirement ID":"FR-024", "Module":"Admin UI", "Component":"Search and export feedback list", "Description":"Admin can search and export CSV with permission checks", "Interface":"I-24: GET /admin/feedback?query & export", "Potential Metrics":"Export success rate >=99.0% PT30D", "V&V focus":"Permission enforcement, export data masking" },
    { "Requirement ID":"FR-025", "Module":"Admin Authentication", "Component":"Authenticate admins via OIDC IdP capability", "Description":"Admin auth via OIDC-capable IdP; support MFA", "Interface":"I-25: OIDC flow endpoints", "Potential Metrics":"Admin auth failure rate <=1.0% PT30D", "V&V focus":"OIDC flow conformance, token validation" },
    { "Requirement ID":"FR-026", "Module":"Admin Authentication", "Component":"Enforce session cookie flags Secure/HttpOnly/SameSite", "Description":"Set Secure, HttpOnly, SameSite on admin session cookies", "Interface":"I-26: session cookie policy", "Potential Metrics":"Cookies with flags 100% (audit)", "V&V focus":"Cookie attribute verification" },
    { "Requirement ID":"FR-027", "Module":"Admin Authentication", "Component":"Idle session timeout PT30M", "Description":"Idle admin sessions expire after PT30M inactivity", "Interface":"I-27: session timeout policy", "Potential Metrics":"Idle session expiry enforcement 100% daily audit", "V&V focus":"Timeout enforcement" },
    { "Requirement ID":"FR-028", "Module":"Admin Authentication", "Component":"Enforce MFA for admin accounts", "Description":"Require MFA for all admin logins", "Interface":"I-28: MFA enrollment and challenge", "Potential Metrics":"MFA enabled rate 100% for admin accounts", "V&V focus":"MFA enforcement tests" },
    { "Requirement ID":"FR-029", "Module":"Admin Authentication", "Component":"Role-based access control for UI actions", "Description":"RBAC for admin UI actions and exports", "Interface":"I-29: RBAC policy checks", "Potential Metrics":"Unauthorized access attempts =0 PT90D", "V&V focus":"RBAC policy correctness" },
    { "Requirement ID":"FR-030", "Module":"Admin Authentication", "Component":"Audit admin login and privilege changes", "Description":"Log admin login events and role changes with actor id and timestamp", "Interface":"I-30: admin audit log", "Potential Metrics":"Admin audit entries 100% per event", "V&V focus":"Audit completeness and integrity" },
    { "Requirement ID":"FR-031", "Module":"Privacy & GDPR", "Component":"Display email-use notice when email requested", "Description":"Show notice explaining email use, retention and opt-out", "Interface":"I-31: privacy notice UI", "Potential Metrics":"Notice shown on email field 100% (UI test)", "V&V focus":"Notice visibility and content accuracy" },
    { "Requirement ID":"FR-032", "Module":"Privacy & GDPR", "Component":"Capture consent and contact-intent flags", "Description":"Store consent and contact_intent flags with timestamp and actor id", "Interface":"I-32: consent storage API", "Potential Metrics":"Consent recorded 100% when checkbox checked", "V&V focus":"Consent auditability" },
    { "Requirement ID":"FR-033", "Module":"Privacy & GDPR", "Component":"Provide data access and deletion request process", "Description":"Admin process and API to fulfill access/deletion requests", "Interface":"I-33: data subject request endpoints", "Potential Metrics":"DSR fulfillment time <=30 days per request", "V&V focus":"Request verification and completion" },
    { "Requirement ID":"FR-034", "Module":"Privacy & GDPR", "Component":"Support data deletion upon verified request", "Description":"Delete or anonymize records on verified deletion requests, log action", "Interface":"I-34: verified delete workflow", "Potential Metrics":"Verified deletions completed within 30 days", "V&V focus":"Deletion verification and audit" },
    { "Requirement ID":"FR-035", "Module":"Privacy & GDPR", "Component":"Expose retention period to admins", "Description":"Display retention policy and next-delete dates in admin UI", "Interface":"I-35: retention info UI", "Potential Metrics":"Retention info accuracy 100% (audit)", "V&V focus":"Retention metadata correctness" },
    { "Requirement ID":"FR-036", "Module":"Privacy & GDPR", "Component":"Record consent and processing purpose in audit logs", "Description":"Append consent and processing purpose to audit trail immutably", "Interface":"I-36: consent audit entries", "Potential Metrics":"Consent audit entries 100% per consent", "V&V focus":"Audit linkage and immutability" }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers — sortable, time-based | # DEC-02: Security baseline — cookie flags,MFA enforced"
  }
}
[INFO] Found 4 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without identity; store feedback text and minimal metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers; least-privilege roles for admin UI access and session controls | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use, retention and opt-out when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
--- DEPENDENCY: Artifact 1.1.1 (Main Scenario Table with N modules) ---
UUID-0001 | Public Feedback Form | Open feedback page (responsive) | Enter feedback text | Optional email input | Show GDPR/privacy notice and consent checkbox | Submit feedback with ISO-8601 UTC timestamp | Show submission confirmation | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0002 | Submission Processing | Validate feedback payload server-side | Sanitize content for display | Mark contact_intent if email present | Hash or encrypt email before persist | Persist record with time-sortable UUID | Return success/failure to client | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0003 | Storage | Store feedback records in SQL RDBMS | Encrypt sensitive fields at rest | Apply least-privilege DB access | Retention policy P365D enforcement | Audit-write deletion events | Periodic backups of dataset | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0004 | Admin UI | Admin login screen (responsive) | List feedback sorted by timestamp | View full feedback details | Delete feedback with confirm dialog | Log deletion actor ID and ISO-8601 timestamp | Search and export feedback list | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0005 | Admin Authentication | Authenticate admins via OIDC IdP capability | Enforce session cookie flags Secure/HttpOnly/SameSite | Idle session timeout PT30M | Enforce MFA for admin accounts | Role-based access control for UI actions | Audit admin login and privilege changes | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0006 | Privacy & GDPR | Display email-use notice when email requested | Capture consent and contact-intent flags | Provide data access and deletion request process | Support data deletion upon verified request | Expose retention period to admins | Record consent and processing purpose in audit logs | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.2 — Domain Context Table (Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop/mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity); encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% over PT30D",
      "V&V focus": "Id assignment, timestamp accuracy"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable, time-based | # DEC-02: Security baseline \u2014 cookie flags,MFA enforced"
  }
}

 6. Artifact-specific custom instructions
  Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0002 Missing rate-limit for submissions"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0005 Session rotation not specified"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
      "gapID": "0a5003",
      "knownIssue": "KnownIssue",
      "impact": "High",
      "recommendation": "Add throttling for POST /feedback; define thresholds"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
      "gapID": "9d77eb",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Define session rotation policy and rotatedAt field"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
      "gapID": "2ac8a1",
      "knownIssue": "InProgress",
      "impact": "Medium",
      "recommendation": "Add deletionNonce+TTL for confirmed deletes"
    }
  ]
}
BEFORE-MERGE 1.1.1.1 3
CALL-VERIFY 1.1.1.1 1/FeasibilityStudy/1
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
canonical="1.1.1 UUID-0005 Session rotation not specified"
canonical="1.1.1 UUID-0004 Server-side deletionNonce missing"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions || 1.1.1 UUID-0005 No auth lockout/brute-force control",
    "impact": "Medium",
    "recommendation": "Add lockout/backoff policy in Auth-Session",
    "knownIssue": "NewIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "NewIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
  "impact": "High",
  "recommendation": "Add throttling for POST /feedback; define thresholds",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "0a5003",
  "explanation": "Matches rate-limit gap"
}
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
canonical="1.1.1 UUID-0005 Session rotation not specified"
canonical="1.1.1 UUID-0004 Server-side deletionNonce missing"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions || 1.1.1 UUID-0005 No auth lockout/brute-force control || 1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "NewIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
  "impact": "Medium",
  "recommendation": "Define session rotation policy and rotatedAt field",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "9d77eb",
  "explanation": "Matches session rotation gap"
}
canonical="1.1.1 UUID-0002 Missing rate-limit for submissions"
canonical="1.1.1 UUID-0005 Session rotation not specified"
canonical="1.1.1 UUID-0004 Server-side deletionNonce missing"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions || 1.1.1 UUID-0005 No auth lockout/brute-force control || 1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified || 1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "recommendation": "Define session rotation policy and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
  "impact": "Medium",
  "recommendation": "Add deletionNonce+TTL for confirmed deletes",
  "knownIssue": "InProgress"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2ac8a1",
  "explanation": "Matches deletionNonce gap"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop/mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity); encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% over PT30D",
      "V&V focus": "Id assignment, timestamp accuracy"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable, time-based | # DEC-02: Security baseline \u2014 cookie flags,MFA enforced"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "recommendation": "Define session rotation policy and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Show rows FR-026/FR-028/FR-016/FR-017 provide cookie flags, MFA, retention, audit"
    },
    {
      "gapID": "0a5003",
      "newStatus": "KnownIssue",
      "notes": "Find no rate-limit entry in row FR-005"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "KnownIssue",
      "notes": "Find no session rotation policy or rotatedAt field in row FR-025"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "Keep InProgress; row FR-022 shows confirm-step but lacks deletionNonce TTL verification"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=1).

# Objective: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 4
  • Artifact index:  1.1.2
  • Artifact name:   Domain Context Table
  • Artifact type:   table
  • Columns (exact order): Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Category  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Category": "Financial Data",
    "Details": "Includes transactions",
    "Quality Attributes": "Reliability",
    "Potential Metrics": "Error rate",
    "DevSecOps / Security": "Data encryption",
    "Related Reqs": "Req-05"
  },
  {
    "Category": "User Profiles",
    "Details": "Handles personal info",
    "Quality Attributes": "Privacy",
    "Potential Metrics": "Time to anonymize",
    "DevSecOps / Security": "GDPR compliance",
    "Related Reqs": "Req-09"
  }
]

## **Special instructions**: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Adopt UUIDv7 across services because sortable time-based
- global-2: Enforce project security baseline across modules because crypto/compliance rule

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1.1",
      "artifactName": "Modules Components Description Table",
      "columns": [
        "Requirement ID",
        "Module",
        "Component",
        "Description",
        "Interface",
        "Potential Metrics",
        "V&V focus"
      ],
      "rows": [
        {
          "Requirement ID": "FR-001",
          "Module": "Public Feedback Form",
          "Component": "Open feedback page (responsive)",
          "Description": "Serve responsive feedback page across desktop/mobile",
          "Interface": "I-1: GET /feedback page",
          "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
          "V&V focus": "Cross-browser rendering, accessibility"
        },
        {
          "Requirement ID": "FR-002",
          "Module": "Public Feedback Form",
          "Component": "Enter feedback text",
          "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
          "Interface": "I-2: feedback textarea",
          "Potential Metrics": "Validation error rate <=0.5% PT30D",
          "V&V focus": "Input validation, XSS sanitization"
        },
        {
          "Requirement ID": "FR-003",
          "Module": "Public Feedback Form",
          "Component": "Optional email input",
          "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
          "Interface": "I-3: email input (optional)",
          "Potential Metrics": "% submissions with email (vanity); encryption-at-rest verified",
          "V&V focus": "Email optionality, encryption correctness"
        },
        {
          "Requirement ID": "FR-004",
          "Module": "Public Feedback Form",
          "Component": "Show GDPR/privacy notice and consent checkbox",
          "Description": "Display brief email-use notice and consent capture when email requested",
          "Interface": "I-4: consent checkbox UI",
          "Potential Metrics": "Consent capture rate when email present (%) PT30D",
          "V&V focus": "Consent recorded and auditable"
        },
        {
          "Requirement ID": "FR-005",
          "Module": "Public Feedback Form",
          "Component": "Submit feedback with ISO-8601 UTC timestamp",
          "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
          "Interface": "I-5: POST /feedback",
          "Potential Metrics": "Submission success rate >=99.0% over PT30D",
          "V&V focus": "Id assignment, timestamp accuracy"
        },
        {
          "Requirement ID": "FR-006",
          "Module": "Public Feedback Form",
          "Component": "Show submission confirmation",
          "Description": "Client shows success/failure message after submit",
          "Interface": "I-6: submission UI response",
          "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
          "V&V focus": "User feedback and error handling"
        },
        {
          "Requirement ID": "FR-007",
          "Module": "Submission Processing",
          "Component": "Validate feedback payload server-side",
          "Description": "Server-side schema validation and duplicate detection",
          "Interface": "I-7: POST /feedback validation",
          "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
          "V&V focus": "Schema validation, duplicate suppression"
        },
        {
          "Requirement ID": "FR-008",
          "Module": "Submission Processing",
          "Component": "Sanitize content for display",
          "Description": "Sanitize stored content to prevent XSS on admin views",
          "Interface": "I-8: sanitize pipeline",
          "Potential Metrics": "XSS vulnerability count =0 (scan)",
          "V&V focus": "Sanitizer test coverage"
        },
        {
          "Requirement ID": "FR-009",
          "Module": "Submission Processing",
          "Component": "Mark contact_intent if email present",
          "Description": "Set contact_intent boolean when optional email provided",
          "Interface": "I-9: contact_intent flag in payload",
          "Potential Metrics": "Flag consistency 100% PT30D (audit)",
          "V&V focus": "Flag persistence, audit logs"
        },
        {
          "Requirement ID": "FR-010",
          "Module": "Submission Processing",
          "Component": "Hash or encrypt email before persist",
          "Description": "Apply field-level encryption or hashing to emails prior to storage",
          "Interface": "I-10: crypto module",
          "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
          "V&V focus": "Encryption key usage, KMS integration tests"
        },
        {
          "Requirement ID": "FR-011",
          "Module": "Submission Processing",
          "Component": "Persist record with time-sortable UUID",
          "Description": "Persist feedback record with UUIDv7 primary id",
          "Interface": "I-11: DB insert API",
          "Potential Metrics": "Insert success rate >=99.0% PT30D",
          "V&V focus": "ID format, DB ACID write tests"
        },
        {
          "Requirement ID": "FR-012",
          "Module": "Submission Processing",
          "Component": "Return success/failure to client",
          "Description": "Return clear HTTP status and error codes; retry-safe",
          "Interface": "I-12: POST /feedback response codes",
          "Potential Metrics": "Proper HTTP success code on valid submit 100%",
          "V&V focus": "Status code correctness, idempotency"
        },
        {
          "Requirement ID": "FR-013",
          "Module": "Storage",
          "Component": "Store feedback records in SQL RDBMS",
          "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
          "Interface": "I-13: DB schema feedback table",
          "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
          "V&V focus": "Schema correctness, access controls"
        },
        {
          "Requirement ID": "FR-014",
          "Module": "Storage",
          "Component": "Encrypt sensitive fields at rest",
          "Description": "Encrypt emails and credentials at rest using field-level encryption",
          "Interface": "I-14: encryption-at-rest policy",
          "Potential Metrics": "Encrypted fields coverage 100% (audit)",
          "V&V focus": "Encryption verification, key rotation tests"
        },
        {
          "Requirement ID": "FR-015",
          "Module": "Storage",
          "Component": "Apply least-privilege DB access",
          "Description": "DB accounts scoped by role; app uses minimal privileges",
          "Interface": "I-15: DB access roles",
          "Potential Metrics": "Role violation incidents =0 PT90D",
          "V&V focus": "Access control audits"
        },
        {
          "Requirement ID": "FR-016",
          "Module": "Storage",
          "Component": "Retention policy P365D enforcement",
          "Description": "Automated deletion of records older than P365D unless exempt",
          "Interface": "I-16: retention job",
          "Potential Metrics": "Retention enforcement rate 100% monthly",
          "V&V focus": "Retention job correctness, delete logs"
        },
        {
          "Requirement ID": "FR-017",
          "Module": "Storage",
          "Component": "Audit-write deletion events",
          "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
          "Interface": "I-17: deletion audit log",
          "Potential Metrics": "Deletion audit entries 100% per delete",
          "V&V focus": "Audit integrity and append-only writes"
        },
        {
          "Requirement ID": "FR-018",
          "Module": "Storage",
          "Component": "Periodic backups of dataset",
          "Description": "Perform regular backups with retention and restore tests",
          "Interface": "I-18: backup schedule",
          "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
          "V&V focus": "Backup restore verification"
        },
        {
          "Requirement ID": "FR-019",
          "Module": "Admin UI",
          "Component": "Admin login screen (responsive)",
          "Description": "Responsive admin login with session handling",
          "Interface": "I-19: GET/POST /admin/login",
          "Potential Metrics": "Median admin login time <=2.0 s PT30D",
          "V&V focus": "Auth flow and UI accessibility"
        },
        {
          "Requirement ID": "FR-020",
          "Module": "Admin UI",
          "Component": "List feedback sorted by timestamp",
          "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
          "Interface": "I-20: GET /admin/feedback?sort=time",
          "Potential Metrics": "List latency p95 <=300 ms PT30D",
          "V&V focus": "Sorting correctness, pagination"
        },
        {
          "Requirement ID": "FR-021",
          "Module": "Admin UI",
          "Component": "View full feedback details",
          "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
          "Interface": "I-21: GET /admin/feedback/{id}",
          "Potential Metrics": "Detail retrieval success 100% PT30D",
          "V&V focus": "Decryption/display rules, masking"
        },
        {
          "Requirement ID": "FR-022",
          "Module": "Admin UI",
          "Component": "Delete feedback with confirm dialog",
          "Description": "Admin delete requires explicit confirm and second-step verification",
          "Interface": "I-22: DELETE /admin/feedback/{id}",
          "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
          "V&V focus": "Confirm dialog enforcement, race conditions"
        },
        {
          "Requirement ID": "FR-023",
          "Module": "Admin UI",
          "Component": "Log deletion actor ID and ISO-8601 timestamp",
          "Description": "Record actor id and timestamp in audit log on delete",
          "Interface": "I-23: deletion audit entry",
          "Potential Metrics": "Audit entry present 100% per deletion",
          "V&V focus": "Audit consistency and tamper-evidence"
        },
        {
          "Requirement ID": "FR-024",
          "Module": "Admin UI",
          "Component": "Search and export feedback list",
          "Description": "Admin can search and export CSV with permission checks",
          "Interface": "I-24: GET /admin/feedback?query & export",
          "Potential Metrics": "Export success rate >=99.0% PT30D",
          "V&V focus": "Permission enforcement, export data masking"
        },
        {
          "Requirement ID": "FR-025",
          "Module": "Admin Authentication",
          "Component": "Authenticate admins via OIDC IdP capability",
          "Description": "Admin auth via OIDC-capable IdP; support MFA",
          "Interface": "I-25: OIDC flow endpoints",
          "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
          "V&V focus": "OIDC flow conformance, token validation"
        },
        {
          "Requirement ID": "FR-026",
          "Module": "Admin Authentication",
          "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
          "Interface": "I-26: session cookie policy",
          "Potential Metrics": "Cookies with flags 100% (audit)",
          "V&V focus": "Cookie attribute verification"
        },
        {
          "Requirement ID": "FR-027",
          "Module": "Admin Authentication",
          "Component": "Idle session timeout PT30M",
          "Description": "Idle admin sessions expire after PT30M inactivity",
          "Interface": "I-27: session timeout policy",
          "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
          "V&V focus": "Timeout enforcement"
        },
        {
          "Requirement ID": "FR-028",
          "Module": "Admin Authentication",
          "Component": "Enforce MFA for admin accounts",
          "Description": "Require MFA for all admin logins",
          "Interface": "I-28: MFA enrollment and challenge",
          "Potential Metrics": "MFA enabled rate 100% for admin accounts",
          "V&V focus": "MFA enforcement tests"
        },
        {
          "Requirement ID": "FR-029",
          "Module": "Admin Authentication",
          "Component": "Role-based access control for UI actions",
          "Description": "RBAC for admin UI actions and exports",
          "Interface": "I-29: RBAC policy checks",
          "Potential Metrics": "Unauthorized access attempts =0 PT90D",
          "V&V focus": "RBAC policy correctness"
        },
        {
          "Requirement ID": "FR-030",
          "Module": "Admin Authentication",
          "Component": "Audit admin login and privilege changes",
          "Description": "Log admin login events and role changes with actor id and timestamp",
          "Interface": "I-30: admin audit log",
          "Potential Metrics": "Admin audit entries 100% per event",
          "V&V focus": "Audit completeness and integrity"
        },
        {
          "Requirement ID": "FR-031",
          "Module": "Privacy & GDPR",
          "Component": "Display email-use notice when email requested",
          "Description": "Show notice explaining email use, retention and opt-out",
          "Interface": "I-31: privacy notice UI",
          "Potential Metrics": "Notice shown on email field 100% (UI test)",
          "V&V focus": "Notice visibility and content accuracy"
        },
        {
          "Requirement ID": "FR-032",
          "Module": "Privacy & GDPR",
          "Component": "Capture consent and contact-intent flags",
          "Description": "Store consent and contact_intent flags with timestamp and actor id",
          "Interface": "I-32: consent storage API",
          "Potential Metrics": "Consent recorded 100% when checkbox checked",
          "V&V focus": "Consent auditability"
        },
        {
          "Requirement ID": "FR-033",
          "Module": "Privacy & GDPR",
          "Component": "Provide data access and deletion request process",
          "Description": "Admin process and API to fulfill access/deletion requests",
          "Interface": "I-33: data subject request endpoints",
          "Potential Metrics": "DSR fulfillment time <=30 days per request",
          "V&V focus": "Request verification and completion"
        },
        {
          "Requirement ID": "FR-034",
          "Module": "Privacy & GDPR",
          "Component": "Support data deletion upon verified request",
          "Description": "Delete or anonymize records on verified deletion requests, log action",
          "Interface": "I-34: verified delete workflow",
          "Potential Metrics": "Verified deletions completed within 30 days",
          "V&V focus": "Deletion verification and audit"
        },
        {
          "Requirement ID": "FR-035",
          "Module": "Privacy & GDPR",
          "Component": "Expose retention period to admins",
          "Description": "Display retention policy and next-delete dates in admin UI",
          "Interface": "I-35: retention info UI",
          "Potential Metrics": "Retention info accuracy 100% (audit)",
          "V&V focus": "Retention metadata correctness"
        },
        {
          "Requirement ID": "FR-036",
          "Module": "Privacy & GDPR",
          "Component": "Record consent and processing purpose in audit logs",
          "Description": "Append consent and processing purpose to audit trail immutably",
          "Interface": "I-36: consent audit entries",
          "Potential Metrics": "Consent audit entries 100% per consent",
          "V&V focus": "Audit linkage and immutability"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.2",
          "artifactName": "Domain Context Table",
          "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs"],
  "rows": [
    {
      "Category": "Feedback Submission",
      "Details": "Public form accepts freeform feedback text; server assigns id and timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits)",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email (vanity) PT30D",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Submission Timestamping",
      "Details": "Assign ISO-8601 UTC timestamp at server on persist; visible in admin UI",
      "Quality Attributes": "Consistency, Auditability, Ordering",
      "Potential Metrics": "Timestamp accuracy drift <=1 s PT30D (server clocks)",
      "DevSecOps / Security": "Store immutable timestamp field; include in audit logs",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDs for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; support MFA and RBAC",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts PT30D",
      "DevSecOps / Security": "Enforce Secure/HttpOnly/SameSite cookies; idle timeout PT30M; RBAC checks",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm",
      "Quality Attributes": "Usability, Performance, Safety",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99% PT30D",
      "DevSecOps / Security": "Confirm dialog; log deletion actor id and ISO-8601 timestamp immutably",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and logs",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate 100% monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded 100% when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills and verification logs",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics and alerts",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert on submission success rate <99.0% over PT30D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D",
      "Related Reqs": "FR-012, FR-030"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 chosen — sortable time-based | # DEC-02: Security baseline enforced — crypto/compliance rule"
  }
}
[INFO] Found 4 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without identity; store feedback text and minimal metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers; least-privilege roles for admin UI access and session controls | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use, retention and opt-out when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
--- DEPENDENCY: Artifact 1.1.1.1 (Modules Components Description Table) ---
FR-001 | Public Feedback Form | Open feedback page (responsive) | Serve responsive feedback page across desktop/mobile | I-1: GET /feedback page | Median FCP <=2.0 s over PT30D (production) | Cross-browser rendering, accessibility
FR-002 | Public Feedback Form | Enter feedback text | Input accepts freeform feedback text, client-side length limit 5000 chars | I-2: feedback textarea | Validation error rate <=0.5% PT30D | Input validation, XSS sanitization
FR-003 | Public Feedback Form | Optional email input | Optional email field; flag contact_intent when present; store encrypted/hashed | I-3: email input (optional) | % submissions with email (vanity); encryption-at-rest verified | Email optionality, encryption correctness
FR-004 | Public Feedback Form | Show GDPR/privacy notice and consent checkbox | Display brief email-use notice and consent capture when email requested | I-4: consent checkbox UI | Consent capture rate when email present (%) PT30D | Consent recorded and auditable
FR-005 | Public Feedback Form | Submit feedback with ISO-8601 UTC timestamp | POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp | I-5: POST /feedback | Submission success rate >=99.0% over PT30D | Id assignment, timestamp accuracy
FR-006 | Public Feedback Form | Show submission confirmation | Client shows success/failure message after submit | I-6: submission UI response | Median time-to-confirm <=1.5 s PT30D | User feedback and error handling
FR-007 | Submission Processing | Validate feedback payload server-side | Server-side schema validation and duplicate detection | I-7: POST /feedback validation | Rejected payload rate <=1.0% PT30D | Schema validation, duplicate suppression
FR-008 | Submission Processing | Sanitize content for display | Sanitize stored content to prevent XSS on admin views | I-8: sanitize pipeline | XSS vulnerability count =0 (scan) | Sanitizer test coverage
FR-009 | Submission Processing | Mark contact_intent if email present | Set contact_intent boolean when optional email provided | I-9: contact_intent flag in payload | Flag consistency 100% PT30D (audit) | Flag persistence, audit logs
FR-010 | Submission Processing | Hash or encrypt email before persist | Apply field-level encryption or hashing to emails prior to storage | I-10: crypto module | Encrypted-at-rest verified 100% (audit) | Encryption key usage, KMS integration tests
FR-011 | Submission Processing | Persist record with time-sortable UUID | Persist feedback record with UUIDv7 primary id | I-11: DB insert API | Insert success rate >=99.0% PT30D | ID format, DB ACID write tests
FR-012 | Submission Processing | Return success/failure to client | Return clear HTTP status and error codes; retry-safe | I-12: POST /feedback response codes | Proper HTTP success code on valid submit 100% | Status code correctness, idempotency
FR-013 | Storage | Store feedback records in SQL RDBMS | Persist feedback rows in SQL RDBMS with least-privilege access | I-13: DB schema feedback table | DB write latency p95 <=200 ms PT30D | Schema correctness, access controls
FR-014 | Storage | Encrypt sensitive fields at rest | Encrypt emails and credentials at rest using field-level encryption | I-14: encryption-at-rest policy | Encrypted fields coverage 100% (audit) | Encryption verification, key rotation tests
FR-015 | Storage | Apply least-privilege DB access | DB accounts scoped by role; app uses minimal privileges | I-15: DB access roles | Role violation incidents =0 PT90D | Access control audits
FR-016 | Storage | Retention policy P365D enforcement | Automated deletion of records older than P365D unless exempt | I-16: retention job | Retention enforcement rate 100% monthly | Retention job correctness, delete logs
FR-017 | Storage | Audit-write deletion events | Log deletion actor id and ISO-8601 timestamp immutably | I-17: deletion audit log | Deletion audit entries 100% per delete | Audit integrity and append-only writes
FR-018 | Storage | Periodic backups of dataset | Perform regular backups with retention and restore tests | I-18: backup schedule | Daily backup success rate >=99.0% PT30D | Backup restore verification
FR-019 | Admin UI | Admin login screen (responsive) | Responsive admin login with session handling | I-19: GET/POST /admin/login | Median admin login time <=2.0 s PT30D | Auth flow and UI accessibility
FR-020 | Admin UI | List feedback sorted by timestamp | Admin list view sorted newest-first using UUIDv7 ordering | I-20: GET /admin/feedback?sort=time | List latency p95 <=300 ms PT30D | Sorting correctness, pagination
FR-021 | Admin UI | View full feedback details | Detail view shows text, timestamp, contact_intent, encrypted email marker | I-21: GET /admin/feedback/{id} | Detail retrieval success 100% PT30D | Decryption/display rules, masking
FR-022 | Admin UI | Delete feedback with confirm dialog | Admin delete requires explicit confirm and second-step verification | I-22: DELETE /admin/feedback/{id} | Confirmed-deletes ratio >=99% PT30D | Confirm dialog enforcement, race conditions
FR-023 | Admin UI | Log deletion actor ID and ISO-8601 timestamp | Record actor id and timestamp in audit log on delete | I-23: deletion audit entry | Audit entry present 100% per deletion | Audit consistency and tamper-evidence
FR-024 | Admin UI | Search and export feedback list | Admin can search and export CSV with permission checks | I-24: GET /admin/feedback?query & export | Export success rate >=99.0% PT30D | Permission enforcement, export data masking
FR-025 | Admin Authentication | Authenticate admins via OIDC IdP capability | Admin auth via OIDC-capable IdP; support MFA | I-25: OIDC flow endpoints | Admin auth failure rate <=1.0% PT30D | OIDC flow conformance, token validation
FR-026 | Admin Authentication | Enforce session cookie flags Secure/HttpOnly/SameSite | Set Secure, HttpOnly, SameSite on admin session cookies | I-26: session cookie policy | Cookies with flags 100% (audit) | Cookie attribute verification
FR-027 | Admin Authentication | Idle session timeout PT30M | Idle admin sessions expire after PT30M inactivity | I-27: session timeout policy | Idle session expiry enforcement 100% daily audit | Timeout enforcement
FR-028 | Admin Authentication | Enforce MFA for admin accounts | Require MFA for all admin logins | I-28: MFA enrollment and challenge | MFA enabled rate 100% for admin accounts | MFA enforcement tests
FR-029 | Admin Authentication | Role-based access control for UI actions | RBAC for admin UI actions and exports | I-29: RBAC policy checks | Unauthorized access attempts =0 PT90D | RBAC policy correctness
FR-030 | Admin Authentication | Audit admin login and privilege changes | Log admin login events and role changes with actor id and timestamp | I-30: admin audit log | Admin audit entries 100% per event | Audit completeness and integrity
FR-031 | Privacy & GDPR | Display email-use notice when email requested | Show notice explaining email use, retention and opt-out | I-31: privacy notice UI | Notice shown on email field 100% (UI test) | Notice visibility and content accuracy
FR-032 | Privacy & GDPR | Capture consent and contact-intent flags | Store consent and contact_intent flags with timestamp and actor id | I-32: consent storage API | Consent recorded 100% when checkbox checked | Consent auditability
FR-033 | Privacy & GDPR | Provide data access and deletion request process | Admin process and API to fulfill access/deletion requests | I-33: data subject request endpoints | DSR fulfillment time <=30 days per request | Request verification and completion
FR-034 | Privacy & GDPR | Support data deletion upon verified request | Delete or anonymize records on verified deletion requests, log action | I-34: verified delete workflow | Verified deletions completed within 30 days | Deletion verification and audit
FR-035 | Privacy & GDPR | Expose retention period to admins | Display retention policy and next-delete dates in admin UI | I-35: retention info UI | Retention info accuracy 100% (audit) | Retention metadata correctness
FR-036 | Privacy & GDPR | Record consent and processing purpose in audit logs | Append consent and processing purpose to audit trail immutably | I-36: consent audit entries | Consent audit entries 100% per consent | Audit linkage and immutability

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.2

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Feedback Submission",
      "Details": "Public form accepts freeform feedback text; server assigns id and timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits)",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email (vanity) PT30D",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Submission Timestamping",
      "Details": "Assign ISO-8601 UTC timestamp at server on persist; visible in admin UI",
      "Quality Attributes": "Consistency, Auditability, Ordering",
      "Potential Metrics": "Timestamp accuracy drift <=1 s PT30D (server clocks)",
      "DevSecOps / Security": "Store immutable timestamp field; include in audit logs",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDs for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; support MFA and RBAC",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts PT30D",
      "DevSecOps / Security": "Enforce Secure/HttpOnly/SameSite cookies; idle timeout PT30M; RBAC checks",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm",
      "Quality Attributes": "Usability, Performance, Safety",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99% PT30D",
      "DevSecOps / Security": "Confirm dialog; log deletion actor id and ISO-8601 timestamp immutably",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and logs",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate 100% monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded 100% when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills and verification logs",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics and alerts",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert on submission success rate <99.0% over PT30D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D",
      "Related Reqs": "FR-012, FR-030"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 chosen \u2014 sortable time-based | # DEC-02: Security baseline enforced \u2014 crypto/compliance rule"
  }
}

 6. Artifact-specific custom instructions
  List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "impact": "High",
    "desc": "1.1.1 UUID-0002 Missing rate-limit for submissions"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0005 Session rotation not specified"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency, completeness for this stage; 2) Confirm trace to ClientSpec and dependencies; 3) Confirm missing content deferred per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
      "gapID": "0a5003",
      "knownIssue": "KnownIssue",
      "impact": "High",
      "recommendation": "Define rate-limit policy and thresholds for POST /feedback"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
      "gapID": "9d77eb",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Specify session rotation mechanism and rotation TTL"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
      "gapID": "2ac8a1",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add server-side deletionNonce with TTL and verification"
    }
  ]
}
BEFORE-MERGE 1.1.2 3
CALL-VERIFY 1.1.2 1/FeasibilityStudy/1
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "Medium",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
  "impact": "High",
  "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 2ac8a1, 9d77eb,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "0a5003",
  "explanation": "Same rate-limit gap"
}
canonical="1.1.2 Feedback Submission rate-limit missing"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing || 1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
  "impact": "Medium",
  "recommendation": "Specify session rotation mechanism and rotation TTL",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 2ac8a1, 9d77eb,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "9d77eb",
  "explanation": "Matches session rotation gap"
}
canonical="1.1.2 Feedback Submission rate-limit missing"
canonical="1.1.2 Admin Access & Auth session rotation unspecified"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing || 1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified || 1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
  "impact": "Medium",
  "recommendation": "Add server-side deletionNonce with TTL and verification",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 2ac8a1, 9d77eb,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2ac8a1",
  "explanation": "Deletion nonce missing"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Feedback Submission",
      "Details": "Public form accepts freeform feedback text; server assigns id and timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits)",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email (vanity) PT30D",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Submission Timestamping",
      "Details": "Assign ISO-8601 UTC timestamp at server on persist; visible in admin UI",
      "Quality Attributes": "Consistency, Auditability, Ordering",
      "Potential Metrics": "Timestamp accuracy drift <=1 s PT30D (server clocks)",
      "DevSecOps / Security": "Store immutable timestamp field; include in audit logs",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDs for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; support MFA and RBAC",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts PT30D",
      "DevSecOps / Security": "Enforce Secure/HttpOnly/SameSite cookies; idle timeout PT30M; RBAC checks",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm",
      "Quality Attributes": "Usability, Performance, Safety",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99% PT30D",
      "DevSecOps / Security": "Confirm dialog; log deletion actor id and ISO-8601 timestamp immutably",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and logs",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate 100% monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded 100% when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills and verification logs",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics and alerts",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert on submission success rate <99.0% over PT30D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D",
      "Related Reqs": "FR-012, FR-030"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 chosen \u2014 sortable time-based | # DEC-02: Security baseline enforced \u2014 crypto/compliance rule"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "KnownIssue",
      "notes": "Find no rate-limit in 'Feedback Submission' row"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "KnownIssue",
      "notes": "Find no deletionNonce in 'Admin UI: Feedback Management' row"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "KnownIssue",
      "notes": "Show idle timeout in 'Admin Access & Auth'; rotation unspecified"
    }
  ]
}
DEBUG: Actually resolved 1 issues in mini iteration (macro=1, phase=FeasibilityStudy, mini=1).
DEBUG: Actually resolved 1 issues in mini iteration (macro=1, phase=FeasibilityStudy, mini=1).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=1, phase=FeasibilityStudy, mini=1).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.1.1: # DEC-01: UUIDv7 identifiers — sortable, time-based | # DEC-02: Security baseline — cookie flags,MFA enforced
1.1.2: # DEC-01: UUIDv7 chosen — sortable time-based | # DEC-02: Security baseline enforced — crypto/compliance rule

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 9d77eb | d6e0ba |
| --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  |  | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | N/M | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | K/M |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M |  |

Canonical issue descriptions:
- 0a5003: 1.1.2 Feedback Submission rate-limit missing
- 2ac8a1: 1.1.2 Admin UI: Feedback Management deletionNonce missing
- 9d77eb: 1.1.2 Admin Access & Auth session rotation unspecified
- d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=4, new=0, resolved=1, stillOpen=3, criticalOpen=0, highOpen=1, deltaOpen=3

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: SecurityGap open=3

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 1
   • instructions: List initial high-level inputs for a software project in each row   List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 4
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus  |  open gaps: 3
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs  |  open gaps: 3
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: UUIDv7 chosen because sortable, time-based",
    "global-2: Security baseline mandated because cookie flags,MFA enforced",
    "1.1.0: Security/privacy baseline not consolidated so controls not traceable (Related Reqs)",
    "1.1.2: Artifact tables allow ad-hoc security entries so feature controls missing (DevSecOps / Security)"
  ],
  "lessons_learned": [
    "global-1: Adopt UUIDv7 across artifacts because sortable, time-based",
    "global-2: Require and enforce project security baseline because cookie flags,MFA enforced",
    "1.1.0: Populate security/privacy baseline rows and link each control to Related Reqs (Related Reqs)",
    "1.1.2: Require explicit per-feature control checklist entries in DevSecOps / Security (DevSecOps / Security)"
  ],
  "processChanges": []
}
Phase 'FeasibilityStudy' ⇒ mini 2/2 (Macro=1)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

# Objective: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 3
  • Artifact index:  1.1.1.1
  • Artifact name:   Modules Components Description Table
  • Artifact type:   table
  • Columns (exact order): Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Requirement ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Requirement ID": "FR-01",
    "Module": "User",
    "Component": "Register",
    "Description": "User signs up with details like name, email, and password.",
    "Interface": "I-1: Registration form (email/password)",
    "Potential Metrics": "Actionable: Registration success rate (% completion); Time to register. Vanity: Total registrations",
    "V&V focus": "TBD"
  },
  {
    "Requirement ID": "FR-02",
    "Module": "User",
    "Component": "Login",
    "Description": "User logs in with credentials.",
    "Interface": "I-3: Login form",
    "Potential Metrics": "Actionable: Login success rate (% successful); Avg. login time Vanity: Total login attempts",
    "V&V focus": "TBD"
  }
]

## **Special instructions**: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Adopt UUIDv7 across artifacts because sortable, time-based
- global-2: Require and enforce project security baseline because cookie flags,MFA enforced

## Critical/High-severity issues (implement each recommendation if correct and applicable)
IMPORTANT: These CRITICAL/HIGH-SEVERITY issues remain unresolved and MUST be addressed:
- HIGH Issue: GapID=0a5003: 1.1.1.1 FR-005 I-5 Missing rate-limit → Add throttling for POST /feedback; define thresholds
☐ Mark each bullet **[RESOLVED]** internally before submitting.


## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Define session rotation policy and rotatedAt field"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "knownIssue": "InProgress",
    "recommendation": "Add deletionNonce TTL verification in API-Service"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## RESOLVED ISSUES in another artifacts (avoid re-opening)
No resolved issues from other artifacts.

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop/mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity); encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% over PT30D",
      "V&V focus": "Id assignment, timestamp accuracy"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable, time-based | # DEC-02: Security baseline \u2014 cookie flags,MFA enforced"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1",
      "artifactName": "Main Scenario Table with N modules",
      "columns": [
        "Module ID",
        "Module",
        "Action 1",
        "Action 2",
        "Action 3",
        "Action 4",
        "Action 5",
        "Action 6",
        "...",
        "Action n",
        "Related Reqs"
      ],
      "rows": [
        {
          "Module ID": "UUID-0001",
          "Module": "Public Feedback Form",
          "Action 1": "Open feedback page (responsive)",
          "Action 2": "Enter feedback text",
          "Action 3": "Optional email input",
          "Action 4": "Show GDPR/privacy notice and consent checkbox",
          "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
          "Action 6": "Show submission confirmation",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0002",
          "Module": "Submission Processing",
          "Action 1": "Validate feedback payload server-side",
          "Action 2": "Sanitize content for display",
          "Action 3": "Mark contact_intent if email present",
          "Action 4": "Hash or encrypt email before persist",
          "Action 5": "Persist record with time-sortable UUID",
          "Action 6": "Return success/failure to client",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0003",
          "Module": "Storage",
          "Action 1": "Store feedback records in SQL RDBMS",
          "Action 2": "Encrypt sensitive fields at rest",
          "Action 3": "Apply least-privilege DB access",
          "Action 4": "Retention policy P365D enforcement",
          "Action 5": "Audit-write deletion events",
          "Action 6": "Periodic backups of dataset",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0004",
          "Module": "Admin UI",
          "Action 1": "Admin login screen (responsive)",
          "Action 2": "List feedback sorted by timestamp",
          "Action 3": "View full feedback details",
          "Action 4": "Delete feedback with confirm dialog",
          "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
          "Action 6": "Search and export feedback list",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0005",
          "Module": "Admin Authentication",
          "Action 1": "Authenticate admins via OIDC IdP capability",
          "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Action 3": "Idle session timeout PT30M",
          "Action 4": "Enforce MFA for admin accounts",
          "Action 5": "Role-based access control for UI actions",
          "Action 6": "Audit admin login and privilege changes",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Module ID": "UUID-0006",
          "Module": "Privacy & GDPR",
          "Action 1": "Display email-use notice when email requested",
          "Action 2": "Capture consent and contact-intent flags",
          "Action 3": "Provide data access and deletion request process",
          "Action 4": "Support data deletion upon verified request",
          "Action 5": "Expose retention period to admins",
          "Action 6": "Record consent and processing purpose in audit logs",
          "...": "N/A",
          "Action n": "N/A",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1.1",
          "artifactName": "Modules Components Description Table",
          "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus"],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
      "V&V focus": "Nonce TTL correctness, rejection behavior"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: POST /feedback rate-limit — protect from abuse | # DEC-02: Session rotation policy — enforce token renewal"
  }
}
[INFO] Found 3 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without identity; store feedback text and minimal metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers; least-privilege roles for admin UI access and session controls | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use, retention and opt-out when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
--- DEPENDENCY: Artifact 1.1.1 (Main Scenario Table with N modules) ---
UUID-0001 | Public Feedback Form | Open feedback page (responsive) | Enter feedback text | Optional email input | Show GDPR/privacy notice and consent checkbox | Submit feedback with ISO-8601 UTC timestamp | Show submission confirmation | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0002 | Submission Processing | Validate feedback payload server-side | Sanitize content for display | Mark contact_intent if email present | Hash or encrypt email before persist | Persist record with time-sortable UUID | Return success/failure to client | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0003 | Storage | Store feedback records in SQL RDBMS | Encrypt sensitive fields at rest | Apply least-privilege DB access | Retention policy P365D enforcement | Audit-write deletion events | Periodic backups of dataset | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0004 | Admin UI | Admin login screen (responsive) | List feedback sorted by timestamp | View full feedback details | Delete feedback with confirm dialog | Log deletion actor ID and ISO-8601 timestamp | Search and export feedback list | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0005 | Admin Authentication | Authenticate admins via OIDC IdP capability | Enforce session cookie flags Secure/HttpOnly/SameSite | Idle session timeout PT30M | Enforce MFA for admin accounts | Role-based access control for UI actions | Audit admin login and privilege changes | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement
UUID-0006 | Privacy & GDPR | Display email-use notice when email requested | Capture consent and contact-intent flags | Provide data access and deletion request process | Support data deletion upon verified request | Expose retention period to admins | Record consent and processing purpose in audit logs | N/A | N/A | [PLACEHOLDER-AUTO] awaiting upstream requirement

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.2 — Domain Context Table (Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
      "V&V focus": "Nonce TTL correctness, rejection behavior"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: POST /feedback rate-limit \u2014 protect from abuse | # DEC-02: Session rotation policy \u2014 enforce token renewal"
  }
}

 6. Artifact-specific custom instructions
  Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "impact": "High",
    "desc": "1.1.1 UUID-0002 Missing rate-limit for submissions"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0005 Session rotation not specified"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Assign instrumentation owner and source for rate-limit metric"
    }
  ]
}
BEFORE-MERGE 1.1.1.1 2
CALL-VERIFY 1.1.1.1 1/FeasibilityStudy/2
canonical="1.1.2 Feedback Submission rate-limit missing"
canonical="1.1.2 Admin Access & Auth session rotation unspecified"
canonical="1.1.2 Admin UI: Feedback Management deletionNonce missing"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing || 1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified || 1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing || 1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
  "impact": "Medium",
  "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "CSRF token not specified"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "",
    "knownIssue": "Resolved"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
  "impact": "Medium",
  "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Different security topic"
}
[DEBUG] New GapID assigned immediately: 7f6e8d
canonical="1.1.2 Feedback Submission rate-limit missing"
canonical="1.1.2 Admin Access & Auth session rotation unspecified"
canonical="1.1.2 Admin UI: Feedback Management deletionNonce missing"
canonical="1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing || 1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified || 1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing || 1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
  "impact": "Medium",
  "recommendation": "Assign instrumentation owner and source for rate-limit metric",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 9d77eb, 2ac8a1, 7f6e8d,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "No matching core problem"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "",
    "knownIssue": "Resolved"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
  "impact": "Medium",
  "recommendation": "Assign instrumentation owner and source for rate-limit metric",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Different instrumentation topic"
}
[DEBUG] New GapID assigned immediately: 2f71be
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
      "V&V focus": "Nonce TTL correctness, rejection behavior"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: POST /feedback rate-limit \u2014 protect from abuse | # DEC-02: Session rotation policy \u2014 enforce token renewal"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Cites FR-005 Potential Metrics: rate-limit 10 req/s per IP, burst 20"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "InProgress",
      "notes": "Add FR-037 Description/I-27b for rotation; TTL not specified"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Cites FR-038 Potential Metrics: deletionNonce TTL configured PT15M"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

# Objective: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 4
  • Artifact index:  1.1.2
  • Artifact name:   Domain Context Table
  • Artifact type:   table
  • Columns (exact order): Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Category  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Category": "Financial Data",
    "Details": "Includes transactions",
    "Quality Attributes": "Reliability",
    "Potential Metrics": "Error rate",
    "DevSecOps / Security": "Data encryption",
    "Related Reqs": "Req-05"
  },
  {
    "Category": "User Profiles",
    "Details": "Handles personal info",
    "Quality Attributes": "Privacy",
    "Potential Metrics": "Time to anonymize",
    "DevSecOps / Security": "GDPR compliance",
    "Related Reqs": "Req-09"
  }
]

## **Special instructions**: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Adopt UUIDv7 across artifacts because sortable, time-based
- global-2: Require and enforce project security baseline because cookie flags,MFA enforced
- 1.1.2: Require explicit per-feature control checklist entries in DevSecOps / Security (DevSecOps / Security)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
IMPORTANT: These CRITICAL/HIGH-SEVERITY issues remain unresolved and MUST be addressed:
- HIGH Issue: GapID=0a5003: 1.1.2 Feedback Submission rate-limit missing → Define rate-limit policy and thresholds for POST /feedback
☐ Mark each bullet **[RESOLVED]** internally before submitting.


## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Add server-side deletionNonce with TTL and verification"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Specify session rotation mechanism and rotation TTL"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
No resolved issues specific to this artifact.

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Feedback Submission",
      "Details": "Public form accepts freeform feedback text; server assigns id and timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits)",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email (vanity) PT30D",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Submission Timestamping",
      "Details": "Assign ISO-8601 UTC timestamp at server on persist; visible in admin UI",
      "Quality Attributes": "Consistency, Auditability, Ordering",
      "Potential Metrics": "Timestamp accuracy drift <=1 s PT30D (server clocks)",
      "DevSecOps / Security": "Store immutable timestamp field; include in audit logs",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDs for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; support MFA and RBAC",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts PT30D",
      "DevSecOps / Security": "Enforce Secure/HttpOnly/SameSite cookies; idle timeout PT30M; RBAC checks",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm",
      "Quality Attributes": "Usability, Performance, Safety",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99% PT30D",
      "DevSecOps / Security": "Confirm dialog; log deletion actor id and ISO-8601 timestamp immutably",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and logs",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate 100% monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded 100% when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills and verification logs",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics and alerts",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert on submission success rate <99.0% over PT30D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D",
      "Related Reqs": "FR-012, FR-030"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 chosen \u2014 sortable time-based | # DEC-02: Security baseline enforced \u2014 crypto/compliance rule"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1.1",
      "artifactName": "Modules Components Description Table",
      "columns": [
        "Requirement ID",
        "Module",
        "Component",
        "Description",
        "Interface",
        "Potential Metrics",
        "V&V focus"
      ],
      "rows": [
        {
          "Requirement ID": "FR-001",
          "Module": "Public Feedback Form",
          "Component": "Open feedback page (responsive)",
          "Description": "Serve responsive feedback page across desktop and mobile",
          "Interface": "I-1: GET /feedback page",
          "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
          "V&V focus": "Cross-browser rendering, accessibility"
        },
        {
          "Requirement ID": "FR-002",
          "Module": "Public Feedback Form",
          "Component": "Enter feedback text",
          "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
          "Interface": "I-2: feedback textarea",
          "Potential Metrics": "Validation error rate <=0.5% PT30D",
          "V&V focus": "Input validation, XSS sanitization"
        },
        {
          "Requirement ID": "FR-003",
          "Module": "Public Feedback Form",
          "Component": "Optional email input",
          "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
          "Interface": "I-3: email input (optional)",
          "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
          "V&V focus": "Email optionality, encryption correctness"
        },
        {
          "Requirement ID": "FR-004",
          "Module": "Public Feedback Form",
          "Component": "Show GDPR/privacy notice and consent checkbox",
          "Description": "Display brief email-use notice and consent capture when email requested",
          "Interface": "I-4: consent checkbox UI",
          "Potential Metrics": "Consent capture rate when email present (%) PT30D",
          "V&V focus": "Consent recorded and auditable"
        },
        {
          "Requirement ID": "FR-005",
          "Module": "Public Feedback Form",
          "Component": "Submit feedback with ISO-8601 UTC timestamp",
          "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
          "Interface": "I-5: POST /feedback",
          "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
          "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
        },
        {
          "Requirement ID": "FR-006",
          "Module": "Public Feedback Form",
          "Component": "Show submission confirmation",
          "Description": "Client shows success/failure message after submit",
          "Interface": "I-6: submission UI response",
          "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
          "V&V focus": "User feedback and error handling"
        },
        {
          "Requirement ID": "FR-007",
          "Module": "Submission Processing",
          "Component": "Validate feedback payload server-side",
          "Description": "Server-side schema validation and duplicate detection",
          "Interface": "I-7: POST /feedback validation",
          "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
          "V&V focus": "Schema validation, duplicate suppression"
        },
        {
          "Requirement ID": "FR-008",
          "Module": "Submission Processing",
          "Component": "Sanitize content for display",
          "Description": "Sanitize stored content to prevent XSS on admin views",
          "Interface": "I-8: sanitize pipeline",
          "Potential Metrics": "XSS vulnerability count =0 (scan)",
          "V&V focus": "Sanitizer test coverage"
        },
        {
          "Requirement ID": "FR-009",
          "Module": "Submission Processing",
          "Component": "Mark contact_intent if email present",
          "Description": "Set contact_intent boolean when optional email provided",
          "Interface": "I-9: contact_intent flag in payload",
          "Potential Metrics": "Flag consistency 100% PT30D (audit)",
          "V&V focus": "Flag persistence, audit logs"
        },
        {
          "Requirement ID": "FR-010",
          "Module": "Submission Processing",
          "Component": "Hash or encrypt email before persist",
          "Description": "Apply field-level encryption or hashing to emails prior to storage",
          "Interface": "I-10: crypto module",
          "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
          "V&V focus": "Encryption key usage, KMS integration tests"
        },
        {
          "Requirement ID": "FR-011",
          "Module": "Submission Processing",
          "Component": "Persist record with time-sortable UUID",
          "Description": "Persist feedback record with UUIDv7 primary id",
          "Interface": "I-11: DB insert API",
          "Potential Metrics": "Insert success rate >=99.0% PT30D",
          "V&V focus": "ID format, DB ACID write tests"
        },
        {
          "Requirement ID": "FR-012",
          "Module": "Submission Processing",
          "Component": "Return success/failure to client",
          "Description": "Return clear HTTP status and error codes; retry-safe",
          "Interface": "I-12: POST /feedback response codes",
          "Potential Metrics": "Proper HTTP success code on valid submit 100%",
          "V&V focus": "Status code correctness, idempotency"
        },
        {
          "Requirement ID": "FR-013",
          "Module": "Storage",
          "Component": "Store feedback records in SQL RDBMS",
          "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
          "Interface": "I-13: DB schema feedback table",
          "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
          "V&V focus": "Schema correctness, access controls"
        },
        {
          "Requirement ID": "FR-014",
          "Module": "Storage",
          "Component": "Encrypt sensitive fields at rest",
          "Description": "Encrypt emails and credentials at rest using field-level encryption",
          "Interface": "I-14: encryption-at-rest policy",
          "Potential Metrics": "Encrypted fields coverage 100% (audit)",
          "V&V focus": "Encryption verification, key rotation tests"
        },
        {
          "Requirement ID": "FR-015",
          "Module": "Storage",
          "Component": "Apply least-privilege DB access",
          "Description": "DB accounts scoped by role; app uses minimal privileges",
          "Interface": "I-15: DB access roles",
          "Potential Metrics": "Role violation incidents =0 PT90D",
          "V&V focus": "Access control audits"
        },
        {
          "Requirement ID": "FR-016",
          "Module": "Storage",
          "Component": "Retention policy P365D enforcement",
          "Description": "Automated deletion of records older than P365D unless exempt",
          "Interface": "I-16: retention job",
          "Potential Metrics": "Retention enforcement rate 100% monthly",
          "V&V focus": "Retention job correctness, delete logs"
        },
        {
          "Requirement ID": "FR-017",
          "Module": "Storage",
          "Component": "Audit-write deletion events",
          "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
          "Interface": "I-17: deletion audit log",
          "Potential Metrics": "Deletion audit entries 100% per delete",
          "V&V focus": "Audit integrity and append-only writes"
        },
        {
          "Requirement ID": "FR-018",
          "Module": "Storage",
          "Component": "Periodic backups of dataset",
          "Description": "Perform regular backups with retention and restore tests",
          "Interface": "I-18: backup schedule",
          "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
          "V&V focus": "Backup restore verification"
        },
        {
          "Requirement ID": "FR-019",
          "Module": "Admin UI",
          "Component": "Admin login screen (responsive)",
          "Description": "Responsive admin login with session handling",
          "Interface": "I-19: GET/POST /admin/login",
          "Potential Metrics": "Median admin login time <=2.0 s PT30D",
          "V&V focus": "Auth flow and UI accessibility"
        },
        {
          "Requirement ID": "FR-020",
          "Module": "Admin UI",
          "Component": "List feedback sorted by timestamp",
          "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
          "Interface": "I-20: GET /admin/feedback?sort=time",
          "Potential Metrics": "List latency p95 <=300 ms PT30D",
          "V&V focus": "Sorting correctness, pagination"
        },
        {
          "Requirement ID": "FR-021",
          "Module": "Admin UI",
          "Component": "View full feedback details",
          "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
          "Interface": "I-21: GET /admin/feedback/{id}",
          "Potential Metrics": "Detail retrieval success 100% PT30D",
          "V&V focus": "Decryption/display rules, masking"
        },
        {
          "Requirement ID": "FR-022",
          "Module": "Admin UI",
          "Component": "Delete feedback with confirm dialog",
          "Description": "Admin delete requires explicit confirm and second-step verification",
          "Interface": "I-22: DELETE /admin/feedback/{id}",
          "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
          "V&V focus": "Confirm dialog enforcement, race conditions"
        },
        {
          "Requirement ID": "FR-023",
          "Module": "Admin UI",
          "Component": "Log deletion actor ID and ISO-8601 timestamp",
          "Description": "Record actor id and timestamp in audit log on delete",
          "Interface": "I-23: deletion audit entry",
          "Potential Metrics": "Audit entry present 100% per deletion",
          "V&V focus": "Audit consistency and tamper-evidence"
        },
        {
          "Requirement ID": "FR-024",
          "Module": "Admin UI",
          "Component": "Search and export feedback list",
          "Description": "Admin can search and export CSV with permission checks",
          "Interface": "I-24: GET /admin/feedback?query & export",
          "Potential Metrics": "Export success rate >=99.0% PT30D",
          "V&V focus": "Permission enforcement, export data masking"
        },
        {
          "Requirement ID": "FR-025",
          "Module": "Admin Authentication",
          "Component": "Authenticate admins via OIDC IdP capability",
          "Description": "Admin auth via OIDC-capable IdP; support MFA",
          "Interface": "I-25: OIDC flow endpoints",
          "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
          "V&V focus": "OIDC flow conformance, token validation"
        },
        {
          "Requirement ID": "FR-026",
          "Module": "Admin Authentication",
          "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
          "Interface": "I-26: session cookie policy",
          "Potential Metrics": "Cookies with flags 100% (audit)",
          "V&V focus": "Cookie attribute verification"
        },
        {
          "Requirement ID": "FR-027",
          "Module": "Admin Authentication",
          "Component": "Idle session timeout PT30M",
          "Description": "Idle admin sessions expire after PT30M inactivity",
          "Interface": "I-27: session timeout policy",
          "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
          "V&V focus": "Timeout enforcement"
        },
        {
          "Requirement ID": "FR-028",
          "Module": "Admin Authentication",
          "Component": "Enforce MFA for admin accounts",
          "Description": "Require MFA for all admin logins",
          "Interface": "I-28: MFA enrollment and challenge",
          "Potential Metrics": "MFA enabled rate 100% for admin accounts",
          "V&V focus": "MFA enforcement tests"
        },
        {
          "Requirement ID": "FR-029",
          "Module": "Admin Authentication",
          "Component": "Role-based access control for UI actions",
          "Description": "RBAC for admin UI actions and exports",
          "Interface": "I-29: RBAC policy checks",
          "Potential Metrics": "Unauthorized access attempts =0 PT90D",
          "V&V focus": "RBAC policy correctness"
        },
        {
          "Requirement ID": "FR-030",
          "Module": "Admin Authentication",
          "Component": "Audit admin login and privilege changes",
          "Description": "Log admin login events and role changes with actor id and timestamp",
          "Interface": "I-30: admin audit log",
          "Potential Metrics": "Admin audit entries 100% per event",
          "V&V focus": "Audit completeness and integrity"
        },
        {
          "Requirement ID": "FR-031",
          "Module": "Privacy & GDPR",
          "Component": "Display email-use notice when email requested",
          "Description": "Show notice explaining email use, retention and opt-out",
          "Interface": "I-31: privacy notice UI",
          "Potential Metrics": "Notice shown on email field 100% (UI test)",
          "V&V focus": "Notice visibility and content accuracy"
        },
        {
          "Requirement ID": "FR-032",
          "Module": "Privacy & GDPR",
          "Component": "Capture consent and contact-intent flags",
          "Description": "Store consent and contact_intent flags with timestamp and actor id",
          "Interface": "I-32: consent storage API",
          "Potential Metrics": "Consent recorded 100% when checkbox checked",
          "V&V focus": "Consent auditability"
        },
        {
          "Requirement ID": "FR-033",
          "Module": "Privacy & GDPR",
          "Component": "Provide data access and deletion request process",
          "Description": "Admin process and API to fulfill access/deletion requests",
          "Interface": "I-33: data subject request endpoints",
          "Potential Metrics": "DSR fulfillment time <=30 days per request",
          "V&V focus": "Request verification and completion"
        },
        {
          "Requirement ID": "FR-034",
          "Module": "Privacy & GDPR",
          "Component": "Support data deletion upon verified request",
          "Description": "Delete or anonymize records on verified deletion requests, log action",
          "Interface": "I-34: verified delete workflow",
          "Potential Metrics": "Verified deletions completed within 30 days",
          "V&V focus": "Deletion verification and audit"
        },
        {
          "Requirement ID": "FR-035",
          "Module": "Privacy & GDPR",
          "Component": "Expose retention period to admins",
          "Description": "Display retention policy and next-delete dates in admin UI",
          "Interface": "I-35: retention info UI",
          "Potential Metrics": "Retention info accuracy 100% (audit)",
          "V&V focus": "Retention metadata correctness"
        },
        {
          "Requirement ID": "FR-036",
          "Module": "Privacy & GDPR",
          "Component": "Record consent and processing purpose in audit logs",
          "Description": "Append consent and processing purpose to audit trail immutably",
          "Interface": "I-36: consent audit entries",
          "Potential Metrics": "Consent audit entries 100% per consent",
          "V&V focus": "Audit linkage and immutability"
        },
        {
          "Requirement ID": "FR-037",
          "Module": "Admin Authentication",
          "Component": "Session rotation policy and rotatedAt field",
          "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
          "Interface": "I-27b: session rotation endpoint /session/rotate",
          "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
          "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
        },
        {
          "Requirement ID": "FR-038",
          "Module": "Submission Processing",
          "Component": "DeletionNonce TTL verification",
          "Description": "Verify deletionNonce TTL before accepting admin delete requests",
          "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
          "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
          "V&V focus": "Nonce TTL correctness, rejection behavior"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.2",
          "artifactName": "Domain Context Table",
          "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs"],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D (all admin accounts)",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite; idle timeout PT30M; RBAC checks; per-feature checklist present",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills; access-limited key material; checklist entry for restore drills",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits); Rate-limit: 10 req/s per IP, burst 20 (429 on exceed) measured per endpoint PT1D",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; alert when rate-limit breach >0.1% PT7D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity)",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; Rejected deletes due to expired nonce <=0 % PT30D",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 (scan) PT30D",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit chosen — protect POST endpoint | # DEC-02: DeletionNonce TTL — prevent stale deletes | # DEC-03: Session rotation — record rotatedAt"
  }
}
[INFO] Found 3 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow users to submit feedback without identity; store feedback text and minimal metadata | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission (visible in admin UI) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Secure login for reviewers; least-privilege roles for admin UI access and session controls | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice explaining email use, retention and opt-out when email is requested | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
--- DEPENDENCY: Artifact 1.1.1.1 (Modules Components Description Table) ---
FR-001 | Public Feedback Form | Open feedback page (responsive) | Serve responsive feedback page across desktop and mobile | I-1: GET /feedback page | Median FCP <=2.0 s over PT30D (production) | Cross-browser rendering, accessibility
FR-002 | Public Feedback Form | Enter feedback text | Input accepts freeform feedback text, client-side length limit 5000 chars | I-2: feedback textarea | Validation error rate <=0.5% PT30D | Input validation, XSS sanitization
FR-003 | Public Feedback Form | Optional email input | Optional email field; flag contact_intent when present; store encrypted/hashed | I-3: email input (optional) | % submissions with email (vanity) PT30D; encryption-at-rest verified | Email optionality, encryption correctness
FR-004 | Public Feedback Form | Show GDPR/privacy notice and consent checkbox | Display brief email-use notice and consent capture when email requested | I-4: consent checkbox UI | Consent capture rate when email present (%) PT30D | Consent recorded and auditable
FR-005 | Public Feedback Form | Submit feedback with ISO-8601 UTC timestamp | POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp | I-5: POST /feedback | Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed) | Id assignment, timestamp accuracy, rate-limit enforcement
FR-006 | Public Feedback Form | Show submission confirmation | Client shows success/failure message after submit | I-6: submission UI response | Median time-to-confirm <=1.5 s PT30D | User feedback and error handling
FR-007 | Submission Processing | Validate feedback payload server-side | Server-side schema validation and duplicate detection | I-7: POST /feedback validation | Rejected payload rate <=1.0% PT30D | Schema validation, duplicate suppression
FR-008 | Submission Processing | Sanitize content for display | Sanitize stored content to prevent XSS on admin views | I-8: sanitize pipeline | XSS vulnerability count =0 (scan) | Sanitizer test coverage
FR-009 | Submission Processing | Mark contact_intent if email present | Set contact_intent boolean when optional email provided | I-9: contact_intent flag in payload | Flag consistency 100% PT30D (audit) | Flag persistence, audit logs
FR-010 | Submission Processing | Hash or encrypt email before persist | Apply field-level encryption or hashing to emails prior to storage | I-10: crypto module | Encrypted-at-rest verified 100% (audit) | Encryption key usage, KMS integration tests
FR-011 | Submission Processing | Persist record with time-sortable UUID | Persist feedback record with UUIDv7 primary id | I-11: DB insert API | Insert success rate >=99.0% PT30D | ID format, DB ACID write tests
FR-012 | Submission Processing | Return success/failure to client | Return clear HTTP status and error codes; retry-safe | I-12: POST /feedback response codes | Proper HTTP success code on valid submit 100% | Status code correctness, idempotency
FR-013 | Storage | Store feedback records in SQL RDBMS | Persist feedback rows in SQL RDBMS with least-privilege access | I-13: DB schema feedback table | DB write latency p95 <=200 ms PT30D | Schema correctness, access controls
FR-014 | Storage | Encrypt sensitive fields at rest | Encrypt emails and credentials at rest using field-level encryption | I-14: encryption-at-rest policy | Encrypted fields coverage 100% (audit) | Encryption verification, key rotation tests
FR-015 | Storage | Apply least-privilege DB access | DB accounts scoped by role; app uses minimal privileges | I-15: DB access roles | Role violation incidents =0 PT90D | Access control audits
FR-016 | Storage | Retention policy P365D enforcement | Automated deletion of records older than P365D unless exempt | I-16: retention job | Retention enforcement rate 100% monthly | Retention job correctness, delete logs
FR-017 | Storage | Audit-write deletion events | Log deletion actor id and ISO-8601 timestamp immutably | I-17: deletion audit log | Deletion audit entries 100% per delete | Audit integrity and append-only writes
FR-018 | Storage | Periodic backups of dataset | Perform regular backups with retention and restore tests | I-18: backup schedule | Daily backup success rate >=99.0% PT30D | Backup restore verification
FR-019 | Admin UI | Admin login screen (responsive) | Responsive admin login with session handling | I-19: GET/POST /admin/login | Median admin login time <=2.0 s PT30D | Auth flow and UI accessibility
FR-020 | Admin UI | List feedback sorted by timestamp | Admin list view sorted newest-first using UUIDv7 ordering | I-20: GET /admin/feedback?sort=time | List latency p95 <=300 ms PT30D | Sorting correctness, pagination
FR-021 | Admin UI | View full feedback details | Detail view shows text, timestamp, contact_intent, encrypted email marker | I-21: GET /admin/feedback/{id} | Detail retrieval success 100% PT30D | Decryption/display rules, masking
FR-022 | Admin UI | Delete feedback with confirm dialog | Admin delete requires explicit confirm and second-step verification | I-22: DELETE /admin/feedback/{id} | Confirmed-deletes ratio >=99% PT30D | Confirm dialog enforcement, race conditions
FR-023 | Admin UI | Log deletion actor ID and ISO-8601 timestamp | Record actor id and timestamp in audit log on delete | I-23: deletion audit entry | Audit entry present 100% per deletion | Audit consistency and tamper-evidence
FR-024 | Admin UI | Search and export feedback list | Admin can search and export CSV with permission checks | I-24: GET /admin/feedback?query & export | Export success rate >=99.0% PT30D | Permission enforcement, export data masking
FR-025 | Admin Authentication | Authenticate admins via OIDC IdP capability | Admin auth via OIDC-capable IdP; support MFA | I-25: OIDC flow endpoints | Admin auth failure rate <=1.0% PT30D | OIDC flow conformance, token validation
FR-026 | Admin Authentication | Enforce session cookie flags Secure/HttpOnly/SameSite | Set Secure, HttpOnly, SameSite on admin session cookies | I-26: session cookie policy | Cookies with flags 100% (audit) | Cookie attribute verification
FR-027 | Admin Authentication | Idle session timeout PT30M | Idle admin sessions expire after PT30M inactivity | I-27: session timeout policy | Idle session expiry enforcement 100% daily audit | Timeout enforcement
FR-028 | Admin Authentication | Enforce MFA for admin accounts | Require MFA for all admin logins | I-28: MFA enrollment and challenge | MFA enabled rate 100% for admin accounts | MFA enforcement tests
FR-029 | Admin Authentication | Role-based access control for UI actions | RBAC for admin UI actions and exports | I-29: RBAC policy checks | Unauthorized access attempts =0 PT90D | RBAC policy correctness
FR-030 | Admin Authentication | Audit admin login and privilege changes | Log admin login events and role changes with actor id and timestamp | I-30: admin audit log | Admin audit entries 100% per event | Audit completeness and integrity
FR-031 | Privacy & GDPR | Display email-use notice when email requested | Show notice explaining email use, retention and opt-out | I-31: privacy notice UI | Notice shown on email field 100% (UI test) | Notice visibility and content accuracy
FR-032 | Privacy & GDPR | Capture consent and contact-intent flags | Store consent and contact_intent flags with timestamp and actor id | I-32: consent storage API | Consent recorded 100% when checkbox checked | Consent auditability
FR-033 | Privacy & GDPR | Provide data access and deletion request process | Admin process and API to fulfill access/deletion requests | I-33: data subject request endpoints | DSR fulfillment time <=30 days per request | Request verification and completion
FR-034 | Privacy & GDPR | Support data deletion upon verified request | Delete or anonymize records on verified deletion requests, log action | I-34: verified delete workflow | Verified deletions completed within 30 days | Deletion verification and audit
FR-035 | Privacy & GDPR | Expose retention period to admins | Display retention policy and next-delete dates in admin UI | I-35: retention info UI | Retention info accuracy 100% (audit) | Retention metadata correctness
FR-036 | Privacy & GDPR | Record consent and processing purpose in audit logs | Append consent and processing purpose to audit trail immutably | I-36: consent audit entries | Consent audit entries 100% per consent | Audit linkage and immutability
FR-037 | Admin Authentication | Session rotation policy and rotatedAt field | Rotate session tokens on privilege change and record rotatedAt ISO-8601 | I-27b: session rotation endpoint /session/rotate | Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions | Rotation enforcement, rotatedAt timestamp correctness
FR-038 | Submission Processing | DeletionNonce TTL verification | Verify deletionNonce TTL before accepting admin delete requests | I-22b: deletionNonce verification in DELETE /admin/feedback/{id} | Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M) | Nonce TTL correctness, rejection behavior

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.2

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D (all admin accounts)",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite; idle timeout PT30M; RBAC checks; per-feature checklist present",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills; access-limited key material; checklist entry for restore drills",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits); Rate-limit: 10 req/s per IP, burst 20 (429 on exceed) measured per endpoint PT1D",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; alert when rate-limit breach >0.1% PT7D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity)",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; Rejected deletes due to expired nonce <=0 % PT30D",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 (scan) PT30D",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit chosen \u2014 protect POST endpoint | # DEC-02: DeletionNonce TTL \u2014 prevent stale deletes | # DEC-03: Session rotation \u2014 record rotatedAt"
  }
}

 6. Artifact-specific custom instructions
  List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0005 Session rotation not specified"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency and completeness for FeasibilityStudy stage; 2) confirm trace to spec/deps; 3) check correct deferral per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.2 Whole artifact cross-artifact CSRF missing",
      "gapID": "7f6e8d",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add CSRF protection for cookie-backed admin forms"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.2 Feedback Submission metric instrumentation owner missing",
      "gapID": "2f71be",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Assign instrumentation owner for submission success metric"
    }
  ]
}
BEFORE-MERGE 1.1.2 2
CALL-VERIFY 1.1.2 1/FeasibilityStudy/2
DEBUG: embed-override matched → 7f6e8d (sim=0.911)
canonical="1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
canonical="1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact || 1.1.2 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.2 Feedback Submission metric instrumentation owner missing",
  "impact": "Medium",
  "recommendation": "Assign instrumentation owner for submission success metric",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 2ac8a1, 9d77eb, 7f6e8d, 2f71be,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2f71be",
  "explanation": "Matches instrumentation owner gap"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D (all admin accounts)",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite; idle timeout PT30M; RBAC checks; per-feature checklist present",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills; access-limited key material; checklist entry for restore drills",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits); Rate-limit: 10 req/s per IP, burst 20 (429 on exceed) measured per endpoint PT1D",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; alert when rate-limit breach >0.1% PT7D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity)",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; Rejected deletes due to expired nonce <=0 % PT30D",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 (scan) PT30D",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit chosen \u2014 protect POST endpoint | # DEC-02: DeletionNonce TTL \u2014 prevent stale deletes | # DEC-03: Session rotation \u2014 record rotatedAt"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Provide rate-limit in Potential Metrics (10 req/s, burst 20)"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Show deletionNonce TTL verification in Admin UI DevSecOps / Security"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show session rotation and rotatedAt in Session Rotation row"
    }
  ]
}
CALL-VERIFY 1 FeasibilityStudy 2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
      "V&V focus": "Nonce TTL correctness, rejection behavior"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: POST /feedback rate-limit \u2014 protect from abuse | # DEC-02: Session rotation policy \u2014 enforce token renewal"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "recommendation": "Define session rotation policy and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Show Potential Metrics includes rate-limit 10 req/s burst 20"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Add Row FR-037 defines session rotation and rotatedAt"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Add Row FR-038: deletionNonce TTL PT15M and verification metric"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=1, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D (all admin accounts)",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite; idle timeout PT30M; RBAC checks; per-feature checklist present",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills; access-limited key material; checklist entry for restore drills",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits); Rate-limit: 10 req/s per IP, burst 20 (429 on exceed) measured per endpoint PT1D",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; alert when rate-limit breach >0.1% PT7D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity)",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; Rejected deletes due to expired nonce <=0 % PT30D",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 (scan) PT30D",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit chosen \u2014 protect POST endpoint | # DEC-02: DeletionNonce TTL \u2014 prevent stale deletes | # DEC-03: Session rotation \u2014 record rotatedAt"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Cite 'Feedback Submission' Potential Metrics: 10 req/s, burst 20, 429 on exceed"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Cite 'Admin UI: Feedback Management' row: deletionNonce verification and TTL PT15M"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "InProgress",
      "notes": "Add 'Session Rotation' row and checklist; rotation TTL value not specified"
    }
  ]
}
DEBUG: Actually resolved 3 issues in mini iteration (macro=1, phase=FeasibilityStudy, mini=2).
CALL-VERIFY 1 FeasibilityStudy 2
DEBUG: Using cached response for identical prompt.
DEBUG: Using cached response for identical prompt.
DEBUG: Actually resolved 3 issues in mini iteration (macro=1, phase=FeasibilityStudy, mini=2).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=1, phase=FeasibilityStudy, mini=2).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.1.1: # DEC-01: POST /feedback rate-limit — protect from abuse | # DEC-02: Session rotation policy — enforce token renewal
1.1.2: # DEC-01: Rate-limit chosen — protect POST endpoint | # DEC-02: DeletionNonce TTL — prevent stale deletes | # DEC-03: Session rotation — record rotatedAt

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 2f71be | 7f6e8d | 9d77eb | d6e0ba |
| --- | --- | --- | --- | --- | --- | --- |
| 1.1.1 Main Scenario Table with N modules | N/M | N/M |  |  | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | N/M | N/M | K/M |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M | K/M | K/M |  |

Canonical issue descriptions:
- 0a5003: 1.1.2 Feedback Submission rate-limit missing
- 2ac8a1: 1.1.2 Admin UI: Feedback Management deletionNonce missing
- 2f71be: 1.1.2 Feedback Submission metric instrumentation owner missing
- 7f6e8d: 1.1.2 Whole artifact cross-artifact CSRF missing
- 9d77eb: 1.1.2 Admin Access & Auth session rotation unspecified
- d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=5, new=0, resolved=2, stillOpen=3, criticalOpen=0, highOpen=1, deltaOpen=3

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: SecurityGap open=2 | MissedRequirement open=1

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 4
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus  |  open gaps: 5
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs  |  open gaps: 5
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: POST /feedback rate-limit chosen because protect from abuse",
    "global-2: Session rotation policy chosen because enforce token renewal",
    "global-3: Security controls fragmented across artifacts causing missing protections",
    "1.1.1.1: Components lack mapped security controls and owners (Whole artifact)",
    "1.1.2: Domain context omits concrete controls and owners in DevSecOps / Security (DevSecOps / Security)"
  ],
  "lessons_learned": [
    "global-1: Apply and document rate-limit for POST /feedback across artifacts because protect from abuse",
    "global-2: Implement session-rotation with rotatedAt and TTL and document token renewal because enforce token renewal",
    "global-3: Standardise a minimal security checklist and require DevSecOps entries across artifacts to ensure consistent controls",
    "1.1.1.1: Map every component to a security control and owner and reference Related Reqs (Whole artifact)",
    "1.1.2: Record rate-limit,deletionNonce,session-rotation,CSRF,and metrics owner in DevSecOps / Security (DevSecOps / Security)"
  ],
  "processChanges": [
    {
      "type": "modify_instructions",
      "artifactIndex": "1.1.1.1",
      "new_instructions": "For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls"
    }
  ]
}
INFO: Appended new instructions to 1.1.1.1. Length now = 377 chars
INFO: Updated instructions for artifact 1.1.1.1
Phase 'Initiating' ⇒ mini 1/2 (Macro=2)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=Initiating, mini=1).

# Objective: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 1
  • Artifact index:  1.1.0
  • Artifact name:   Input
  • Artifact type:   table
  • Columns (exact order): Input Item, Details, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Input Item  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: Client specifications, Initial user scenarios, Domain details, Success metrics
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Input Item": "Basic Goal",
    "Details": "Summarize the primary objective",
    "Related Reqs": "N/A"
  },
  {
    "Input Item": "Constraints",
    "Details": "Highlight known limitations",
    "Related Reqs": "N/A"
  }
]

## **Special instructions**: List initial high-level inputs for a software project in each row  
List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Apply and document rate-limit for POST /feedback across artifacts because protect from abuse
- global-2: Implement session-rotation with rotatedAt and TTL and document token renewal because enforce token renewal
- global-3: Standardise a minimal security checklist and require DevSecOps entries across artifacts to ensure consistent controls

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback with optional email, admin view, delete with confirm, secure storage, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow users to submit feedback without identity; store feedback text and minimal metadata",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field captured only if provided; store hashed/email encrypted and mark contact-intent flag",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission (visible in admin UI)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Secure login for reviewers; least-privilege roles for admin UI access and session controls",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation dialog; log deletion event with timestamp and actor ID",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; enforce TLS for transit; access control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice explaining email use, retention and opt-out when email is requested",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI that works on Chrome, Firefox, Edge and mobile widths; keyboard navigable",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits and sees confirmation",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Feedback submission success rate >= 99.0 % over PT30D measured for all production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median page load time <= 2.0 s over PT30D (first contentful paint) measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags (Secure, HttpOnly, SameSite), idle timeout PT30M, MFA for admin, consent notice, retention policy P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: UUIDv7 identifiers \u2014 sortable time-based | # DEC-02: security baseline \u2014 crypto/compliance rule"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": []
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.0",
          "artifactName": "Input",
          "columns": ["Input Item", "Details", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback — prevent abuse | # DEC-02: session rotation tokens — enforce TTL"
  }
}
[INFO] Found 5 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.


 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.0

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.1 — Main Scenario Table with N modules (Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL"
  }
}

 6. Artifact-specific custom instructions
  List initial high-level inputs for a software project in each row  
List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0005 Session rotation not specified"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency and completeness; 2) Check trace to spec/deps; 3) Confirm proper deferrals",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.0 Session rotation policy I-? InProgress",
      "gapID": "9d77eb",
      "knownIssue": "InProgress",
      "impact": "Medium",
      "recommendation": "Confirm rotation per UUID-0005; document mapping"
    },
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.0 Whole artifact cross-artifact CSRF missing",
      "gapID": "7f6e8d",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add CSRF protection for cookie-backed admin flows"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
      "gapID": "2f71be",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add instrumentation owner column and owner"
    }
  ]
}
BEFORE-MERGE 1.1.0 3
CALL-VERIFY 1.1.0 2/Initiating/1
canonical="1.1.2 Admin Access & Auth session rotation unspecified"
canonical="1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
canonical="1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified || 1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact || 1.1.2 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner || 1.1.2 Feedback Submission metric instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.0 Session rotation policy I-? InProgress",
  "impact": "Medium",
  "recommendation": "Confirm rotation per UUID-0005; document mapping",
  "knownIssue": "InProgress"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 9d77eb, 2ac8a1, 7f6e8d, 2f71be,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "9d77eb",
  "explanation": "Matches session rotation issue"
}
DEBUG: embed-override matched → 7f6e8d (sim=0.988)
canonical="1.1.2 Admin Access & Auth session rotation unspecified"
canonical="1.1.1.1 Whole artifact CSRF token not specified cross-artifact"
canonical="1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified || 1.1.1 UUID-0005 Session rotation not specified || 1.1.0 Session rotation policy I-? InProgress",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact || 1.1.0 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner || 1.1.2 Feedback Submission metric instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
  "impact": "Medium",
  "recommendation": "Add instrumentation owner column and owner",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 0a5003, 9d77eb, 2ac8a1, 7f6e8d, 2f71be,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2f71be",
  "explanation": "Submission instrumentation owner missing"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "Add rate-limit/backoff at API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Session rotation policy I-? InProgress",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Show 'Rate-limit for submissions' row with limit and exponential backoff"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show 'Session rotation policy' row with rotatedAt and TTL PT8H"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "KnownIssue",
      "notes": "No deletionNonce TTL verification in 'Delete with confirmation' row"
    },
    {
      "gapID": "7f6e8d",
      "newStatus": "Resolved",
      "notes": "Show 'Security baseline' SameSite cookie flag addressing anti-CSRF"
    },
    {
      "gapID": "2f71be",
      "newStatus": "KnownIssue",
      "notes": "No instrumentation owner in 'Success metric: submission reliability' row"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=Initiating, mini=1).

# Objective: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 2
  • Artifact index:  1.1.1
  • Artifact name:   Main Scenario Table with N modules
  • Artifact type:   table
  • Columns (exact order): Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Module ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Module ID": "M-1",
    "Module": "User",
    "Action 1": "Register",
    "Action 2": "Login",
    "Action 3": "Verify email",
    "Action 4": "Verify academic credentials",
    "Action 5": "Update profile",
    "Related Reqs": "Req-01",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  },
  {
    "Module ID": "M-2",
    "Module": "Event",
    "Action 1": "Create event",
    "Action 2": "Edit event",
    "Action 3": "Delete event",
    "Action 4": "submit event",
    "Action 5": "View event details",
    "Related Reqs": "Req-01",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  }
]

## **Special instructions**: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Apply and document rate-limit for POST /feedback across artifacts because protect from abuse
- global-2: Implement session-rotation with rotatedAt and TTL and document token renewal because enforce token renewal
- global-3: Standardise a minimal security checklist and require DevSecOps entries across artifacts to ensure consistent controls
- 1.1.1.1: Map every component to a security control and owner and reference Related Reqs (Whole artifact)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
IMPORTANT: These CRITICAL/HIGH-SEVERITY issues remain unresolved and MUST be addressed:
- HIGH Issue: GapID=0a5003: 1.1.1.1 FR-005 I-5 Missing rate-limit → Add throttling for POST /feedback; define thresholds
☐ Mark each bullet **[RESOLVED]** internally before submitting.


## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Define session rotation policy and rotatedAt field"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "knownIssue": "InProgress",
    "recommendation": "Add deletionNonce TTL verification in API-Service"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action 5",
    "Action 6",
    "...",
    "Action n",
    "Related Reqs"
  ],
  "rows": [
    {
      "Module ID": "UUID-0001",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email input",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action 5": "Submit feedback with ISO-8601 UTC timestamp",
      "Action 6": "Show submission confirmation",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0002",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present",
      "Action 4": "Hash or encrypt email before persist",
      "Action 5": "Persist record with time-sortable UUID",
      "Action 6": "Return success/failure to client",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0003",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "Action 3": "Apply least-privilege DB access",
      "Action 4": "Retention policy P365D enforcement",
      "Action 5": "Audit-write deletion events",
      "Action 6": "Periodic backups of dataset",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0004",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "View full feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action 5": "Log deletion actor ID and ISO-8601 timestamp",
      "Action 6": "Search and export feedback list",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0005",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Idle session timeout PT30M",
      "Action 4": "Enforce MFA for admin accounts",
      "Action 5": "Role-based access control for UI actions",
      "Action 6": "Audit admin login and privilege changes",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Module ID": "UUID-0006",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support data deletion upon verified request",
      "Action 5": "Expose retention period to admins",
      "Action 6": "Record consent and processing purpose in audit logs",
      "...": "N/A",
      "Action n": "N/A",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Module security baseline \u2014 enforce session, MFA"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash)",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1",
          "artifactName": "Main Scenario Table with N modules",
          "columns": ["Module ID", "Module", "Action 1", "Action 2", "...", "Action n", "Related Reqs", "DevSecOps / Security"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "...",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text and optional email",
      "...": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; 429 + exponential backoff; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "...": "Mark contact_intent if email present; hash email before persist",
      "Action n": "Return success/failure to client",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Verify deletionNonce TTL on delete operations; input validation; audit write on submit"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "...": "Enforce least-privilege DB access",
      "Action n": "Retention policy P365D enforcement",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level-at-rest encryption; backup cadence PT24H; access logs for all read/write"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "...": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF protection for admin flows; audit trail for deletes"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "...": "Idle session timeout PT30M; enforce MFA for admin accounts",
      "Action n": "Rotate sessions on privileged actions; record rotatedAt",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "Session TTL PT8H; rotatedAt timestamp for each token; renew on privileged action; secret rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "...": "Provide data access and deletion request process",
      "Action n": "Support data deletion upon verified request",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypted email at rest; retention disclosure to admins"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit defined — protect POST feedback | # DEC-02: Session rotation — rotatedAt plus TTL"
  }
}
[INFO] Found 5 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO] awaiting upstream requirement
Anonymous feedback | Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash) | [PLACEHOLDER-AUTO] awaiting upstream requirement
Optional email capture | Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO] awaiting upstream requirement
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO] awaiting upstream requirement
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO] awaiting upstream requirement
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp | [PLACEHOLDER-AUTO] awaiting upstream requirement
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO] awaiting upstream requirement
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO] awaiting upstream requirement
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production | [PLACEHOLDER-AUTO] awaiting upstream requirement
Identifier strategy | Use time-sortable UUID identifiers for feedback and admin actions | [PLACEHOLDER-AUTO] awaiting upstream requirement
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO] awaiting upstream requirement
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle | [PLACEHOLDER-AUTO] awaiting upstream requirement
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO] awaiting upstream requirement
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO] awaiting upstream requirement

 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "...",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text and optional email",
      "...": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; 429 + exponential backoff; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "...": "Mark contact_intent if email present; hash email before persist",
      "Action n": "Return success/failure to client",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Verify deletionNonce TTL on delete operations; input validation; audit write on submit"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "...": "Enforce least-privilege DB access",
      "Action n": "Retention policy P365D enforcement",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level-at-rest encryption; backup cadence PT24H; access logs for all read/write"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "...": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF protection for admin flows; audit trail for deletes"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "...": "Idle session timeout PT30M; enforce MFA for admin accounts",
      "Action n": "Rotate sessions on privileged actions; record rotatedAt",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "Session TTL PT8H; rotatedAt timestamp for each token; renew on privileged action; secret rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "...": "Provide data access and deletion request process",
      "Action n": "Support data deletion upon verified request",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypted email at rest; retention disclosure to admins"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit defined \u2014 protect POST feedback | # DEC-02: Session rotation \u2014 rotatedAt plus TTL"
  }
}

 6. Artifact-specific custom instructions
  Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify artifact internal consistency, completeness, and ambiguity for this stage. 2) Check trace to client spec and dependencies. 3) Confirm missing content deferred per Rule-1.",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 M-2 deletionNonce partial fix",
      "gapID": "2ac8a1",
      "knownIssue": "InProgress",
      "impact": "Medium",
      "recommendation": "Complete server-side deletionNonce implementation"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1 M-1 Decision metric missing owner",
      "gapID": "2f71be",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add instrumentation owner for FR-005"
    }
  ]
}
BEFORE-MERGE 1.1.1 2
CALL-VERIFY 1.1.1 2/Initiating/1
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "SecurityGap",
  "shortDescription": "1.1.1 M-2 deletionNonce partial fix",
  "impact": "Medium",
  "recommendation": "Complete server-side deletionNonce implementation",
  "knownIssue": "InProgress"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 7f6e8d, 2f71be, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2ac8a1",
  "explanation": "Matches deletionNonce issue"
}
canonical="1.1.1 M-2 deletionNonce partial fix"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix || 1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1 M-1 Decision metric missing owner",
  "impact": "Medium",
  "recommendation": "Add instrumentation owner for FR-005",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 7f6e8d, 2f71be, 9d77eb, 2ac8a1,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "2f71be",
  "explanation": "Decision metric owner match"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "...",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text and optional email",
      "...": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; 429 + exponential backoff; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "...": "Mark contact_intent if email present; hash email before persist",
      "Action n": "Return success/failure to client",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Verify deletionNonce TTL on delete operations; input validation; audit write on submit"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "...": "Enforce least-privilege DB access",
      "Action n": "Retention policy P365D enforcement",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level-at-rest encryption; backup cadence PT24H; access logs for all read/write"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "...": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF protection for admin flows; audit trail for deletes"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "...": "Idle session timeout PT30M; enforce MFA for admin accounts",
      "Action n": "Rotate sessions on privileged actions; record rotatedAt",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "Session TTL PT8H; rotatedAt timestamp for each token; renew on privileged action; secret rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "...": "Provide data access and deletion request process",
      "Action n": "Support data deletion upon verified request",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypted email at rest; retention disclosure to admins"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit defined \u2014 protect POST feedback | # DEC-02: Session rotation \u2014 rotatedAt plus TTL"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-1 Decision metric missing owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "7f6e8d",
      "newStatus": "Resolved",
      "notes": "Add CSRF protection in DevSecOps / Security"
    },
    {
      "gapID": "2f71be",
      "newStatus": "KnownIssue",
      "notes": "Lacks owner/source for rate-limit in M-1 DevSecOps / Security"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show rotate sessions and rotatedAt in M-5 DevSecOps / Security"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Show deletionNonce TTL verification in M-2 DevSecOps / Security"
    }
  ]
}
DEBUG: Actually resolved 4 issues in mini iteration (macro=2, phase=Initiating, mini=1).
DEBUG: Actually resolved 4 issues in mini iteration (macro=2, phase=Initiating, mini=1).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=2, phase=Initiating, mini=1).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.0: # DEC-01: rate-limit POST /feedback — prevent abuse | # DEC-02: session rotation tokens — enforce TTL
1.1.1: # DEC-01: Rate-limit defined — protect POST feedback | # DEC-02: Session rotation — rotatedAt plus TTL

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 2f71be | 7f6e8d | 9d77eb | d6e0ba |
| --- | --- | --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  | K/M | K/M | I/M | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | I/M | K/M |  | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | N/M | N/M | K/M |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M | K/M | K/M |  |

Canonical issue descriptions:
- 0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions
- 2ac8a1: 1.1.1 M-2 deletionNonce partial fix
- 2f71be: 1.1.1 M-1 Decision metric missing owner
- 7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact
- 9d77eb: 1.1.1 UUID-0005 Session rotation not specified
- d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=5, new=0, resolved=4, stillOpen=1, criticalOpen=0, highOpen=1, deltaOpen=-2

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: MissedRequirement open=1

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 4
   • instructions: List initial high-level inputs for a software project in each row   List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 5
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus  |  open gaps: 5
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component   For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs  |  open gaps: 5
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: rate-limit POST because prevent abuse",
    "global-2: session-rotation tokens because enforce TTL",
    "global-3: security controls fragmented because missing baselines and cross-artifact tokens",
    "1.1.1: module security entries inconsistent because DevSecOps / Security column not enforced per module",
    "1.1.1.1: metrics lack owner because Potential Metrics entries omit owner field"
  ],
  "lessons_learned": [
    "global-1: enforce rate-limit for POST/feedback across artifacts because prevent abuse",
    "global-2: require session-rotation token TTL across artifacts because enforce TTL",
    "global-3: harmonise security baseline and specify CSRF/session controls across artifacts (Whole artifact)",
    "1.1.1: require a populated DevSecOps / Security cell for every module before acceptance (DevSecOps / Security)",
    "1.1.1.1: assign owner and acceptance criteria for each Potential Metrics entry (Potential Metrics)"
  ],
  "processChanges": [
    {
      "type": "add_columns",
      "artifactIndex": "1.1.1.1",
      "columns": [
        "Related Reqs",
        "DevSecOps / Security"
      ]
    }
  ]
}
DEBUG: Updating columns for 1.1.1.1 from 'Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus' to 'Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security'
INFO: Added columns ['Related Reqs', 'DevSecOps / Security'] to artifact 1.1.1.1
Phase 'Initiating' ⇒ mini 2/2 (Macro=2)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=Initiating, mini=2).

# Objective: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 1
  • Artifact index:  1.1.0
  • Artifact name:   Input
  • Artifact type:   table
  • Columns (exact order): Input Item, Details, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Input Item  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: Client specifications, Initial user scenarios, Domain details, Success metrics
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Input Item": "Basic Goal",
    "Details": "Summarize the primary objective",
    "Related Reqs": "N/A"
  },
  {
    "Input Item": "Constraints",
    "Details": "Highlight known limitations",
    "Related Reqs": "N/A"
  }
]

## **Special instructions**: List initial high-level inputs for a software project in each row  
List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: enforce rate-limit for POST/feedback across artifacts because prevent abuse
- global-2: require session-rotation token TTL across artifacts because enforce TTL
- global-3: harmonise security baseline and specify CSRF/session controls across artifacts (Whole artifact)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text and minimal metadata (timestamp, submission ID, ip-hash)",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; store encrypted at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor ID and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS in transit; access-control audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff on throttle",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO] awaiting upstream requirement"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": []
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.0",
          "artifactName": "Input",
          "columns": ["Input Item", "Details", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.0 (Input) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "CSRF and anti-forgery",
      "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Instrumentation owner for rate-limit metric",
      "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback — prevent abuse | # DEC-02: session rotation tokens — enforce TTL | # DEC-03: UUID time-sortable IDs — enable ordering"
  }
}
[INFO] Found 2 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.


 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.0

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.1 — Main Scenario Table with N modules (Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "CSRF and anti-forgery",
      "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Instrumentation owner for rate-limit metric",
      "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL | # DEC-03: UUID time-sortable IDs \u2014 enable ordering"
  }
}

 6. Artifact-specific custom instructions
  List initial high-level inputs for a software project in each row  
List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "Is the artifact internally consistent, traceable to client spec, and are missing items correctly deferred per Rule-1?",
  "identifiedIssues": [
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.0 Related Reqs placeholders",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Populate Related Reqs with requirement IDs per row"
    }
  ]
}
BEFORE-MERGE 1.1.0 1
CALL-VERIFY 1.1.0 2/Initiating/2
canonical="1.1.1 M-2 deletionNonce partial fix"
canonical="1.1.1 M-1 Decision metric missing owner"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix || 1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-1 Decision metric missing owner || 1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.0 Related Reqs placeholders",
  "impact": "Medium",
  "recommendation": "Populate Related Reqs with requirement IDs per row",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 9d77eb, 2ac8a1, 7f6e8d, 2f71be,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Related requirements missing"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "",
    "knownIssue": "Resolved"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "",
    "knownIssue": "Resolved"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "",
    "knownIssue": "Resolved"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "",
    "knownIssue": "Resolved"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "",
    "knownIssue": "Resolved"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.0 Related Reqs placeholders",
  "impact": "Medium",
  "recommendation": "Populate Related Reqs with requirement IDs per row",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003, 9d77eb, 2ac8a1, 7f6e8d,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {"matchResult":"NEW","explanation":"New related requirements gap"}
[DEBUG] New GapID assigned immediately: 5fe616
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "CSRF and anti-forgery",
      "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Instrumentation owner for rate-limit metric",
      "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL | # DEC-03: UUID time-sortable IDs \u2014 enable ordering"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0005 Session rotation not specified",
    "impact": "Medium",
    "recommendation": "Implement session rotation and rotatedAt field",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 Whole artifact CSRF token not specified cross-artifact",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-1 Decision metric missing owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show rotatedAt and TTL in 'Session rotation policy' row"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "No deletionNonce TTL in 'Delete with confirmation' row; retain InProgress"
    },
    {
      "gapID": "7f6e8d",
      "newStatus": "Resolved",
      "notes": "Specify 'CSRF and anti-forgery' row with tokens or SameSite"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Provide owner in 'Instrumentation owner for rate-limit metric' row"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=Initiating, mini=2).

# Objective: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is Initiating).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 2
  • Artifact index:  1.1.1
  • Artifact name:   Main Scenario Table with N modules
  • Artifact type:   table
  • Columns (exact order): Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Module ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Module ID": "M-1",
    "Module": "User",
    "Action 1": "Register",
    "Action 2": "Login",
    "Action 3": "Verify email",
    "Action 4": "Verify academic credentials",
    "Action 5": "Update profile",
    "Related Reqs": "Req-01",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  },
  {
    "Module ID": "M-2",
    "Module": "Event",
    "Action 1": "Create event",
    "Action 2": "Edit event",
    "Action 3": "Delete event",
    "Action 4": "submit event",
    "Action 5": "View event details",
    "Related Reqs": "Req-01",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  }
]

## **Special instructions**: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: enforce rate-limit for POST/feedback across artifacts because prevent abuse
- global-2: require session-rotation token TTL across artifacts because enforce TTL
- global-3: harmonise security baseline and specify CSRF/session controls across artifacts (Whole artifact)
- 1.1.1: require a populated DevSecOps / Security cell for every module before acceptance (DevSecOps / Security)
- 1.1.1.1: assign owner and acceptance criteria for each Potential Metrics entry (Potential Metrics)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-1 Decision metric missing owner",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner => Assign instrumentation owner and source for rate-limit metric

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "...",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive)",
      "Action 2": "Enter feedback text and optional email",
      "...": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; 429 + exponential backoff; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "...": "Mark contact_intent if email present; hash email before persist",
      "Action n": "Return success/failure to client",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Verify deletionNonce TTL on delete operations; input validation; audit write on submit"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest",
      "...": "Enforce least-privilege DB access",
      "Action n": "Retention policy P365D enforcement",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level-at-rest encryption; backup cadence PT24H; access logs for all read/write"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "...": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF protection for admin flows; audit trail for deletes"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "...": "Idle session timeout PT30M; enforce MFA for admin accounts",
      "Action n": "Rotate sessions on privileged actions; record rotatedAt",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "Session TTL PT8H; rotatedAt timestamp for each token; renew on privileged action; secret rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "...": "Provide data access and deletion request process",
      "Action n": "Support data deletion upon verified request",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypted email at rest; retention disclosure to admins"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit defined \u2014 protect POST feedback | # DEC-02: Session rotation \u2014 rotatedAt plus TTL"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "CSRF and anti-forgery",
          "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Instrumentation owner for rate-limit metric",
          "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1",
          "artifactName": "Main Scenario Table with N modules",
          "columns": ["Module ID", "Module", "Action 1", "Action 2", "...", "Action n", "Related Reqs", "DevSecOps / Security"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1 (Main Scenario Table with N modules) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": ["Module ID", "Module", "Action 1", "Action 2", "Action 3", "Action 4", "Action n", "Related Reqs", "DevSecOps / Security"],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive, accessible)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email field + contact_intent checkbox",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present; hash email before persist",
      "Action 4": "Enqueue for storage and notify admin UI",
      "Action n": "Return success/failure to client with id",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
      "Action 3": "Enforce least-privilege DB access",
      "Action 4": "Backup cadence PT24H",
      "Action n": "Retention policy P365D enforcement and secure deletion",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "Inspect feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Enforce MFA for admin accounts",
      "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
      "Action n": "Session TTL PT8H; renew on privileged action",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support verified data deletion and record event",
      "Action n": "Surface retention disclosure to admins",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit owner=SRE — assign metric ownership | # DEC-02: Session rotation preserved — rotatedAt + TTL | # DEC-03: CSRF baseline — admin flows protected"
  }
}
[INFO] Found 1 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO]
Anonymous feedback | Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash | [PLACEHOLDER-AUTO]
Optional email capture | Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO]
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO]
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO]
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp | [PLACEHOLDER-AUTO]
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs | [PLACEHOLDER-AUTO]
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO]
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO]
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO]
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO]
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs | [PLACEHOLDER-AUTO]
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM | [PLACEHOLDER-AUTO]
Identifier strategy | Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions | [PLACEHOLDER-AUTO]
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO]
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE | [PLACEHOLDER-AUTO]
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO]
CSRF and anti-forgery | Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side | [PLACEHOLDER-AUTO]
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO]
Instrumentation owner for rate-limit metric | Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H | [PLACEHOLDER-AUTO]

 2. **Current phase:** Initiating

 3. **Current artifact:** 1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive, accessible)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email field + contact_intent checkbox",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present; hash email before persist",
      "Action 4": "Enqueue for storage and notify admin UI",
      "Action n": "Return success/failure to client with id",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
      "Action 3": "Enforce least-privilege DB access",
      "Action 4": "Backup cadence PT24H",
      "Action n": "Retention policy P365D enforcement and secure deletion",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "Inspect feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Enforce MFA for admin accounts",
      "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
      "Action n": "Session TTL PT8H; renew on privileged action",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support verified data deletion and record event",
      "Action n": "Surface retention disclosure to admins",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit owner=SRE \u2014 assign metric ownership | # DEC-02: Session rotation preserved \u2014 rotatedAt + TTL | # DEC-03: CSRF baseline \u2014 admin flows protected"
  }
}

 6. Artifact-specific custom instructions
  Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.  
Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.0 Related Reqs placeholders"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency, unambiguous completeness for this stage. 2) Check row trace to ClientSpec and dependencies. 3) Confirm missing content correctly deferred per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "SecurityGap",
      "shortDescription": "1.1.1 M-4 Server-side deletionNonce missing",
      "gapID": "2ac8a1",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Add deletionNonce field and server validation"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1 M-3 Related Reqs placeholders present",
      "gapID": "5fe616",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Populate Related Reqs with requirement IDs"
    },
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1 M-2 Email storage method conflict",
      "gapID": "",
      "knownIssue": "NewIssue",
      "impact": "Medium",
      "recommendation": "Use deterministic encryption for emails"
    }
  ]
}
BEFORE-MERGE 1.1.1 3
CALL-VERIFY 1.1.1 2/Initiating/2
DEBUG: embed-override matched → 2ac8a1 (sim=0.868)
canonical="1.1.1 M-2 deletionNonce partial fix"
canonical="1.1.0 Related Reqs placeholders"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix || 1.1.1 UUID-0004 Server-side deletionNonce missing || 1.1.1 M-4 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1 M-3 Related Reqs placeholders present",
  "impact": "Medium",
  "recommendation": "Populate Related Reqs with requirement IDs",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 2f71be, 2ac8a1, 5fe616,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "5fe616",
  "explanation": "Related reqs placeholders match"
}
canonical="1.1.1 M-2 deletionNonce partial fix"
canonical="1.1.0 Related Reqs placeholders"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix || 1.1.1 UUID-0004 Server-side deletionNonce missing || 1.1.1 M-4 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders || 1.1.1 M-3 Related Reqs placeholders present",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1 M-2 Email storage method conflict",
  "impact": "Medium",
  "recommendation": "Use deterministic encryption for emails",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 2f71be, 2ac8a1, 5fe616,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Different M-2 topic"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact cross-artifact missing security/privacy baselines",
    "impact": "Low",
    "recommendation": "",
    "knownIssue": "Resolved"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0002 Missing rate-limit for submissions",
    "impact": "High",
    "recommendation": "",
    "knownIssue": "Resolved"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1 M-2 Email storage method conflict",
  "impact": "Medium",
  "recommendation": "Use deterministic encryption for emails",
  "knownIssue": "NewIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: d6e0ba, 0a5003,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "NEW",
  "explanation": "Email storage issue new"
}
[DEBUG] New GapID assigned immediately: d0923d
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive, accessible)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email field + contact_intent checkbox",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present; hash email before persist",
      "Action 4": "Enqueue for storage and notify admin UI",
      "Action n": "Return success/failure to client with id",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
      "Action 3": "Enforce least-privilege DB access",
      "Action 4": "Backup cadence PT24H",
      "Action n": "Retention policy P365D enforcement and secure deletion",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "Inspect feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Enforce MFA for admin accounts",
      "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
      "Action n": "Session TTL PT8H; renew on privileged action",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support verified data deletion and record event",
      "Action n": "Surface retention disclosure to admins",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit owner=SRE \u2014 assign metric ownership | # DEC-02: Session rotation preserved \u2014 rotatedAt + TTL | # DEC-03: CSRF baseline \u2014 admin flows protected"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-4 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Show metric owner=SRE and source=API-Service in M-1 DevSecOps / Security"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "Find no deletionNonce TTL verification in M-4 DevSecOps / Security"
    }
  ]
}
CALL-VERIFY 2 Initiating 2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.0",
  "artifactName": "Input",
  "columns": [
    "Input Item",
    "Details",
    "Related Reqs"
  ],
  "rows": [
    {
      "Input Item": "Client specification (summary)",
      "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Anonymous feedback",
      "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Optional email capture",
      "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Submission timestamp",
      "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Admin authentication",
      "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Delete with confirmation",
      "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Data protection for emails and credentials",
      "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Privacy / GDPR notice",
      "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Responsive cross-browser UI",
      "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: submit feedback",
      "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Initial user scenario: admin review",
      "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: submission reliability",
      "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Success metric: UI performance",
      "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Identifier strategy",
      "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Security baseline",
      "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Rate-limit for submissions",
      "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Session rotation policy",
      "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "CSRF and anti-forgery",
      "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Minimal DevSecOps checklist",
      "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    },
    {
      "Input Item": "Instrumentation owner for rate-limit metric",
      "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
      "Related Reqs": "[PLACEHOLDER-AUTO]"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: rate-limit POST /feedback \u2014 prevent abuse | # DEC-02: session rotation tokens \u2014 enforce TTL | # DEC-03: UUID time-sortable IDs \u2014 enable ordering"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 Whole artifact cross-artifact security baseline gaps",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 M-2 deletionNonce partial fix",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Documented in 'Security baseline' row: cookie flags, timeout, MFA, retention, audit, GDPR notice"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "No deletionNonce TTL verification in 'Delete with confirmation' row"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Documented in 'Instrumentation owner for rate-limit metric' row: Owner SRE, source API-Service"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=Initiating, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1",
  "artifactName": "Main Scenario Table with N modules",
  "columns": [
    "Module ID",
    "Module",
    "Action 1",
    "Action 2",
    "Action 3",
    "Action 4",
    "Action n",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Module ID": "M-1",
      "Module": "Public Feedback Form",
      "Action 1": "Open feedback page (responsive, accessible)",
      "Action 2": "Enter feedback text",
      "Action 3": "Optional email field + contact_intent checkbox",
      "Action 4": "Show GDPR/privacy notice and consent checkbox",
      "Action n": "Submit feedback with ISO-8601 UTC timestamp",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
    },
    {
      "Module ID": "M-2",
      "Module": "Submission Processing",
      "Action 1": "Validate feedback payload server-side",
      "Action 2": "Sanitize content for display",
      "Action 3": "Mark contact_intent if email present; hash email before persist",
      "Action 4": "Enqueue for storage and notify admin UI",
      "Action n": "Return success/failure to client with id",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
    },
    {
      "Module ID": "M-3",
      "Module": "Storage",
      "Action 1": "Store feedback records in SQL RDBMS",
      "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
      "Action 3": "Enforce least-privilege DB access",
      "Action 4": "Backup cadence PT24H",
      "Action n": "Retention policy P365D enforcement and secure deletion",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
    },
    {
      "Module ID": "M-4",
      "Module": "Admin UI",
      "Action 1": "Admin login screen (responsive)",
      "Action 2": "List feedback sorted by timestamp",
      "Action 3": "Inspect feedback details",
      "Action 4": "Delete feedback with confirm dialog",
      "Action n": "Log deletion actor ID and ISO-8601 timestamp",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
    },
    {
      "Module ID": "M-5",
      "Module": "Admin Authentication",
      "Action 1": "Authenticate admins via OIDC IdP capability",
      "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Action 3": "Enforce MFA for admin accounts",
      "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
      "Action n": "Session TTL PT8H; renew on privileged action",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
    },
    {
      "Module ID": "M-6",
      "Module": "Privacy & GDPR",
      "Action 1": "Display email-use notice when email requested",
      "Action 2": "Capture consent and contact-intent flags",
      "Action 3": "Provide data access and deletion request process",
      "Action 4": "Support verified data deletion and record event",
      "Action n": "Surface retention disclosure to admins",
      "Related Reqs": "[PLACEHOLDER-AUTO]",
      "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit owner=SRE \u2014 assign metric ownership | # DEC-02: Session rotation preserved \u2014 rotatedAt + TTL | # DEC-03: CSRF baseline \u2014 admin flows protected"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d6e0ba",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Whole artifact security/privacy baseline partial",
    "impact": "Low",
    "recommendation": "Add session/cookie flags, timeouts, MFA, consent, retention, audit",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "recommendation": "Define session rotation policy and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-1 Decision metric missing owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d6e0ba",
      "newStatus": "Resolved",
      "notes": "Show DevSecOps/M-5/M-6 rows: session flags, TTL, MFA, rotatedAt, consent, retention, audit"
    },
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Show M-1 DevSecOps: POST /feedback rate-limit 10 req per IP per PT1M"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show M-5: session rotation on privileged actions and rotatedAt timestamp present"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "Retain InProgress; DevSecOps/Storage rows lack deletionNonce TTL verification"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Show M-1 DevSecOps: metric owner=SRE and source=API-Service counters"
    }
  ]
}
DEBUG: Actually resolved 5 issues in mini iteration (macro=2, phase=Initiating, mini=2).
CALL-VERIFY 2 Initiating 2
DEBUG: Using cached response for identical prompt.
DEBUG: Using cached response for identical prompt.
DEBUG: Actually resolved 5 issues in mini iteration (macro=2, phase=Initiating, mini=2).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=2, phase=Initiating, mini=2).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.0: # DEC-01: rate-limit POST /feedback — prevent abuse | # DEC-02: session rotation tokens — enforce TTL | # DEC-03: UUID time-sortable IDs — enable ordering
1.1.1: # DEC-01: Rate-limit owner=SRE — assign metric ownership | # DEC-02: Session rotation preserved — rotatedAt + TTL | # DEC-03: CSRF baseline — admin flows protected

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 2f71be | 5fe616 | 7f6e8d | 9d77eb | d0923d | d6e0ba |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  | K/M | N/M | K/M | I/M |  | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | I/M | K/M | K/M |  | N/M | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | N/M |  | N/M | K/M |  |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M |  | K/M | K/M |  |  |

Canonical issue descriptions:
- 0a5003: 1.1.1.1 FR-005 I-5 Missing rate-limit
- 2ac8a1: 1.1.1.1 FR-022 I-22 deletionNonce partial
- 2f71be: 1.1.1 M-1 Decision metric missing owner
- 5fe616: 1.1.1 M-3 Related Reqs placeholders present
- 7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact
- 9d77eb: 1.1.1.1 FR-025 I-25 Missing session rotation
- d0923d: 1.1.1 M-2 Email storage method conflict
- d6e0ba: 1.1.0 Whole artifact security/privacy baseline partial

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=8, new=1, resolved=5, stillOpen=3, criticalOpen=0, highOpen=1, deltaOpen=0

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: MissedRequirement open=2 | SecurityGap open=1

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 5
   • instructions: List initial high-level inputs for a software project in each row   List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 7
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security  |  open gaps: 5
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component   For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs  |  open gaps: 5
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: inconsistent security-control specification across artifacts causing cross-artifact security gaps",
    "global-2: metrics and ownership not assigned across modules and components causing unowned metrics and unclear SRE responsibilities",
    "1.1.1.1: component-level requirements lack required security attributes and protections (nonce, rate-limit, session-rotation)"
  ],
  "lessons_learned": [
    "global-1: adopt a project-wide security-control checklist and enforce entries in DevSecOps / Security and Related Reqs because enforceable baseline",
    "global-2: mandate metric owner and map Potential Metrics to an owner on each module/component (Potential Metrics)",
    "1.1.1.1: require every Requirement ID row to declare DevSecOps / Security, Related Reqs, and Potential Metrics before acceptance (DevSecOps / Security, Related Reqs, Potential Metrics)"
  ],
  "processChanges": []
}
Phase 'FeasibilityStudy' ⇒ mini 1/2 (Macro=2)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=1).

# Objective: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 3
  • Artifact index:  1.1.1.1
  • Artifact name:   Modules Components Description Table
  • Artifact type:   table
  • Columns (exact order): Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Requirement ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Requirement ID": "FR-01",
    "Module": "User",
    "Component": "Register",
    "Description": "User signs up with details like name, email, and password.",
    "Interface": "I-1: Registration form (email/password)",
    "Potential Metrics": "Actionable: Registration success rate (% completion); Time to register. Vanity: Total registrations",
    "V&V focus": "TBD",
    "Related Reqs": "TBD \u2013 added per lessons learned",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  },
  {
    "Requirement ID": "FR-02",
    "Module": "User",
    "Component": "Login",
    "Description": "User logs in with credentials.",
    "Interface": "I-3: Login form",
    "Potential Metrics": "Actionable: Login success rate (% successful); Avg. login time Vanity: Total login attempts",
    "V&V focus": "TBD",
    "Related Reqs": "TBD \u2013 added per lessons learned",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned"
  }
]

## **Special instructions**: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component  
For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: adopt a project-wide security-control checklist and enforce entries in DevSecOps / Security and Related Reqs because enforceable baseline
- global-2: mandate metric owner and map Potential Metrics to an owner on each module/component (Potential Metrics)
- 1.1.1.1: require every Requirement ID row to declare DevSecOps / Security, Related Reqs, and Potential Metrics before acceptance (DevSecOps / Security, Related Reqs, Potential Metrics)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.2 Feedback Submission metric instrumentation owner missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows
- GapID=2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner => Assign instrumentation owner and source for rate-limit metric

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s over PT30D (production)",
      "V&V focus": "Cross-browser rendering, accessibility"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D",
      "V&V focus": "Input validation, XSS sanitization"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email (vanity) PT30D; encryption-at-rest verified",
      "V&V focus": "Email optionality, encryption correctness"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D",
      "V&V focus": "Consent recorded and auditable"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; Decision: Rate-limit POST /feedback 10 req/s per IP, burst 20 (429 on exceed)",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D",
      "V&V focus": "User feedback and error handling"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D",
      "V&V focus": "Schema validation, duplicate suppression"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan)",
      "V&V focus": "Sanitizer test coverage"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit)",
      "V&V focus": "Flag persistence, audit logs"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit)",
      "V&V focus": "Encryption key usage, KMS integration tests"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D",
      "V&V focus": "ID format, DB ACID write tests"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100%",
      "V&V focus": "Status code correctness, idempotency"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "V&V focus": "Schema correctness, access controls"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit)",
      "V&V focus": "Encryption verification, key rotation tests"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D",
      "V&V focus": "Access control audits"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly",
      "V&V focus": "Retention job correctness, delete logs"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete",
      "V&V focus": "Audit integrity and append-only writes"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D",
      "V&V focus": "Backup restore verification"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D",
      "V&V focus": "Auth flow and UI accessibility"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D",
      "V&V focus": "Sorting correctness, pagination"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D",
      "V&V focus": "Decryption/display rules, masking"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D",
      "V&V focus": "Confirm dialog enforcement, race conditions"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion",
      "V&V focus": "Audit consistency and tamper-evidence"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D",
      "V&V focus": "Permission enforcement, export data masking"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D",
      "V&V focus": "OIDC flow conformance, token validation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit)",
      "V&V focus": "Cookie attribute verification"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit",
      "V&V focus": "Timeout enforcement"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts",
      "V&V focus": "MFA enforcement tests"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D",
      "V&V focus": "RBAC policy correctness"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event",
      "V&V focus": "Audit completeness and integrity"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test)",
      "V&V focus": "Notice visibility and content accuracy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked",
      "V&V focus": "Consent auditability"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request",
      "V&V focus": "Request verification and completion"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days",
      "V&V focus": "Deletion verification and audit"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit)",
      "V&V focus": "Retention metadata correctness"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent",
      "V&V focus": "Audit linkage and immutability"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; rotatedAt present for rotated sessions",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% (expected) PT30D; TTL configured (PT15M)",
      "V&V focus": "Nonce TTL correctness, rejection behavior"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: POST /feedback rate-limit \u2014 protect from abuse | # DEC-02: Session rotation policy \u2014 enforce token renewal"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "CSRF and anti-forgery",
          "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Instrumentation owner for rate-limit metric",
          "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1",
      "artifactName": "Main Scenario Table with N modules",
      "columns": [
        "Module ID",
        "Module",
        "Action 1",
        "Action 2",
        "Action 3",
        "Action 4",
        "Action n",
        "Related Reqs",
        "DevSecOps / Security"
      ],
      "rows": [
        {
          "Module ID": "M-1",
          "Module": "Public Feedback Form",
          "Action 1": "Open feedback page (responsive, accessible)",
          "Action 2": "Enter feedback text",
          "Action 3": "Optional email field + contact_intent checkbox",
          "Action 4": "Show GDPR/privacy notice and consent checkbox",
          "Action n": "Submit feedback with ISO-8601 UTC timestamp",
          "Related Reqs": "FR-005",
          "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
        },
        {
          "Module ID": "M-2",
          "Module": "Submission Processing",
          "Action 1": "Validate feedback payload server-side",
          "Action 2": "Sanitize content for display",
          "Action 3": "Mark contact_intent if email present; hash email before persist",
          "Action 4": "Enqueue for storage and notify admin UI",
          "Action n": "Return success/failure to client with id",
          "Related Reqs": "FR-022",
          "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
        },
        {
          "Module ID": "M-3",
          "Module": "Storage",
          "Action 1": "Store feedback records in SQL RDBMS",
          "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
          "Action 3": "Enforce least-privilege DB access",
          "Action 4": "Backup cadence PT24H",
          "Action n": "Retention policy P365D enforcement and secure deletion",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
        },
        {
          "Module ID": "M-4",
          "Module": "Admin UI",
          "Action 1": "Admin login screen (responsive)",
          "Action 2": "List feedback sorted by timestamp",
          "Action 3": "Inspect feedback details",
          "Action 4": "Delete feedback with confirm dialog",
          "Action n": "Log deletion actor ID and ISO-8601 timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
        },
        {
          "Module ID": "M-5",
          "Module": "Admin Authentication",
          "Action 1": "Authenticate admins via OIDC IdP capability",
          "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Action 3": "Enforce MFA for admin accounts",
          "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
          "Action n": "Session TTL PT8H; renew on privileged action",
          "Related Reqs": "FR-025",
          "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
        },
        {
          "Module ID": "M-6",
          "Module": "Privacy & GDPR",
          "Action 1": "Display email-use notice when email requested",
          "Action 2": "Capture consent and contact-intent flags",
          "Action 3": "Provide data access and deletion request process",
          "Action 4": "Support verified data deletion and record event",
          "Action n": "Surface retention disclosure to admins",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1.1",
          "artifactName": "Modules Components Description Table",
          "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus", "Related Reqs", "DevSecOps / Security"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; owner=Frontend",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; owner=Frontend",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "V&V focus": "Email optionality, encryption correctness",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level encryption; KMS usage; least-privilege DB access; consent capture"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D; owner=Product",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; owner=Frontend",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; owner=Backend",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; owner=Security",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); owner=Backend",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encryption for email field"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit); owner=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; owner=Backend",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; owner=Security",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; owner=InfraSec",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; owner=Storage",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; owner=Compliance",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; owner=AdminUX",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; owner=AdminUX",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; owner=AdminUX",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; owner=AdminOps",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; owner=Compliance",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; owner=AdminUX",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; owner=Auth",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit); owner=Auth",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; owner=Auth",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; owner=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; owner=Auth",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; owner=Compliance",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test); owner=Product",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; owner=Product",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; owner=Compliance",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; owner=Compliance",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit); owner=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; owner=Compliance",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; owner=Auth",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: metric owner per component — owner assigned"
  }
}
[INFO] Found 4 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO]
Anonymous feedback | Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash | [PLACEHOLDER-AUTO]
Optional email capture | Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO]
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO]
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO]
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp | [PLACEHOLDER-AUTO]
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs | [PLACEHOLDER-AUTO]
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO]
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO]
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO]
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO]
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs | [PLACEHOLDER-AUTO]
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM | [PLACEHOLDER-AUTO]
Identifier strategy | Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions | [PLACEHOLDER-AUTO]
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO]
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE | [PLACEHOLDER-AUTO]
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO]
CSRF and anti-forgery | Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side | [PLACEHOLDER-AUTO]
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO]
Instrumentation owner for rate-limit metric | Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H | [PLACEHOLDER-AUTO]
--- DEPENDENCY: Artifact 1.1.1 (Main Scenario Table with N modules) ---
M-1 | Public Feedback Form | Open feedback page (responsive, accessible) | Enter feedback text | Optional email field + contact_intent checkbox | Show GDPR/privacy notice and consent checkbox | Submit feedback with ISO-8601 UTC timestamp | FR-005 | POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events
M-2 | Submission Processing | Validate feedback payload server-side | Sanitize content for display | Mark contact_intent if email present; hash email before persist | Enqueue for storage and notify admin UI | Return success/failure to client with id | FR-022 | Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest
M-3 | Storage | Store feedback records in SQL RDBMS | Encrypt sensitive fields at rest (email, ip-hash) | Enforce least-privilege DB access | Backup cadence PT24H | Retention policy P365D enforcement and secure deletion | [PLACEHOLDER-AUTO] | Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job
M-4 | Admin UI | Admin login screen (responsive) | List feedback sorted by timestamp | Inspect feedback details | Delete feedback with confirm dialog | Log deletion actor ID and ISO-8601 timestamp | [PLACEHOLDER-AUTO] | RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M
M-5 | Admin Authentication | Authenticate admins via OIDC IdP capability | Enforce session cookie flags Secure/HttpOnly/SameSite | Enforce MFA for admin accounts | Rotate sessions on privileged actions and record rotatedAt | Session TTL PT8H; renew on privileged action | FR-025 | OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy
M-6 | Privacy & GDPR | Display email-use notice when email requested | Capture consent and contact-intent flags | Provide data access and deletion request process | Support verified data deletion and record event | Surface retention disclosure to admins | [PLACEHOLDER-AUTO] | Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.2 — Domain Context Table (Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; owner=Frontend",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; owner=Frontend",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "V&V focus": "Email optionality, encryption correctness",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level encryption; KMS usage; least-privilege DB access; consent capture"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D; owner=Product",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; owner=Frontend",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; owner=Backend",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; owner=Security",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); owner=Backend",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encryption for email field"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit); owner=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; owner=Backend",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; owner=Security",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; owner=InfraSec",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; owner=Storage",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; owner=Compliance",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; owner=AdminUX",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; owner=AdminUX",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; owner=AdminUX",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; owner=AdminOps",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; owner=Compliance",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; owner=AdminUX",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; owner=Auth",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit); owner=Auth",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; owner=Auth",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; owner=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; owner=Auth",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; owner=Compliance",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test); owner=Product",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; owner=Product",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; owner=Compliance",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; owner=Compliance",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit); owner=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; owner=Compliance",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; owner=Auth",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: metric owner per component \u2014 owner assigned"
  }
}

 6. Artifact-specific custom instructions
  Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component  
For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.0 Related Reqs placeholders"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1 M-2 Email storage method conflict"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency, completeness for stage; 2) Trace rows to spec; 3) Confirm correct deferrals",
  "identifiedIssues": [
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1.1 FR-003 Encryption vs hashing inconsistency",
      "gapID": "d0923d",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Decide and document email storage method"
    }
  ]
}
BEFORE-MERGE 1.1.1.1 1
CALL-VERIFY 1.1.1.1 2/FeasibilityStudy/1
canonical="1.1.1 UUID-0004 Server-side deletionNonce missing"
canonical="1.1.0 Related Reqs placeholders"
canonical="1.1.1 M-2 Email storage method conflict"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing || 1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders || 1.1.1 M-3 Related Reqs placeholders present",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-2 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Use deterministic encryption for emails",
    "knownIssue": "NewIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1.1 FR-003 Encryption vs hashing inconsistency",
  "impact": "Medium",
  "recommendation": "Decide and document email storage method",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 2ac8a1, 2f71be, 5fe616, d0923d,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "d0923d",
  "explanation": "Same email storage conflict"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; owner=Frontend",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; owner=Frontend",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "V&V focus": "Email optionality, encryption correctness",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level encryption; KMS usage; least-privilege DB access; consent capture"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D; owner=Product",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; owner=Frontend",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; owner=Backend",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; owner=Security",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); owner=Backend",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encryption for email field"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit); owner=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; owner=Backend",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; owner=Security",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; owner=InfraSec",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; owner=Storage",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; owner=Compliance",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; owner=AdminUX",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; owner=AdminUX",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; owner=AdminUX",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; owner=AdminOps",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; owner=Compliance",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; owner=AdminUX",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; owner=Auth",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit); owner=Auth",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; owner=Auth",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; owner=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; owner=Auth",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; owner=Compliance",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test); owner=Product",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; owner=Product",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; owner=Compliance",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; owner=Compliance",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit); owner=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; owner=Compliance",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; owner=Auth",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: metric owner per component \u2014 owner assigned"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-005 Decision metric lacks instrumentation owner",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-3 Related Reqs placeholders present",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Encryption vs hashing inconsistency",
    "impact": "Medium",
    "recommendation": "Decide and document email storage method",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Cite FR-038 row: DeletionNonce TTL verification added"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Cite FR-005 Potential Metrics: rate-limit owner=SRE assigned"
    },
    {
      "gapID": "5fe616",
      "newStatus": "Resolved",
      "notes": "Populate Related Reqs column per row; see Related Reqs entries"
    },
    {
      "gapID": "d0923d",
      "newStatus": "KnownIssue",
      "notes": "Retain: Description field still states 'encrypted/hashed' ambiguity"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=1).

# Objective: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 4
  • Artifact index:  1.1.2
  • Artifact name:   Domain Context Table
  • Artifact type:   table
  • Columns (exact order): Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Category  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Category": "Financial Data",
    "Details": "Includes transactions",
    "Quality Attributes": "Reliability",
    "Potential Metrics": "Error rate",
    "DevSecOps / Security": "Data encryption",
    "Related Reqs": "Req-05"
  },
  {
    "Category": "User Profiles",
    "Details": "Handles personal info",
    "Quality Attributes": "Privacy",
    "Potential Metrics": "Time to anonymize",
    "DevSecOps / Security": "GDPR compliance",
    "Related Reqs": "Req-09"
  }
]

## **Special instructions**: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: adopt a project-wide security-control checklist and enforce entries in DevSecOps / Security and Related Reqs because enforceable baseline
- global-2: mandate metric owner and map Potential Metrics to an owner on each module/component (Potential Metrics)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Session rotation policy I-? InProgress",
    "impact": "Medium",
    "knownIssue": "InProgress",
    "recommendation": "Specify session rotation mechanism and rotation TTL"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows
- GapID=2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner => Assign instrumentation owner and source for rate-limit metric
- GapID=5fe616: 1.1.0 Related Reqs placeholders => Populate Related Reqs with requirement IDs per row

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D (all admin accounts)",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite; idle timeout PT30M; RBAC checks; per-feature checklist present",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Encrypted backups; restore drills; access-limited key material; checklist entry for restore drills",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D (all production submits); Rate-limit: 10 req/s per IP, burst 20 (429 on exceed) measured per endpoint PT1D",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS required; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D (audit)",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create and actions; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; alert when rate-limit breach >0.1% PT7D",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity)",
      "DevSecOps / Security": "Field-level encryption or hashing at rest; encrypt in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit)",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D",
      "DevSecOps / Security": "Encrypted sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; Rejected deletes due to expired nonce <=0 % PT30D",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 (scan) PT30D",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Rate-limit chosen \u2014 protect POST endpoint | # DEC-02: DeletionNonce TTL \u2014 prevent stale deletes | # DEC-03: Session rotation \u2014 record rotatedAt"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "CSRF and anti-forgery",
          "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Instrumentation owner for rate-limit metric",
          "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1.1",
      "artifactName": "Modules Components Description Table",
      "columns": [
        "Requirement ID",
        "Module",
        "Component",
        "Description",
        "Interface",
        "Potential Metrics",
        "V&V focus",
        "Related Reqs",
        "DevSecOps / Security"
      ],
      "rows": [
        {
          "Requirement ID": "FR-001",
          "Module": "Public Feedback Form",
          "Component": "Open feedback page (responsive)",
          "Description": "Serve responsive feedback page across desktop and mobile",
          "Interface": "I-1: GET /feedback page",
          "Potential Metrics": "Median FCP <=2.0 s PT30D; owner=Frontend",
          "V&V focus": "Cross-browser rendering, accessibility",
          "Related Reqs": "FR-001",
          "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans"
        },
        {
          "Requirement ID": "FR-002",
          "Module": "Public Feedback Form",
          "Component": "Enter feedback text",
          "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
          "Interface": "I-2: feedback textarea",
          "Potential Metrics": "Validation error rate <=0.5% PT30D; owner=Frontend",
          "V&V focus": "Input validation, XSS sanitization",
          "Related Reqs": "FR-002",
          "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans"
        },
        {
          "Requirement ID": "FR-003",
          "Module": "Public Feedback Form",
          "Component": "Optional email input",
          "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
          "Interface": "I-3: email input (optional)",
          "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
          "V&V focus": "Email optionality, encryption correctness",
          "Related Reqs": "FR-003",
          "DevSecOps / Security": "Field-level encryption; KMS usage; least-privilege DB access; consent capture"
        },
        {
          "Requirement ID": "FR-004",
          "Module": "Public Feedback Form",
          "Component": "Show GDPR/privacy notice and consent checkbox",
          "Description": "Display brief email-use notice and consent capture when email requested",
          "Interface": "I-4: consent checkbox UI",
          "Potential Metrics": "Consent capture rate when email present (%) PT30D; owner=Product",
          "V&V focus": "Consent recorded and auditable",
          "Related Reqs": "FR-004",
          "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit"
        },
        {
          "Requirement ID": "FR-005",
          "Module": "Public Feedback Form",
          "Component": "Submit feedback with ISO-8601 UTC timestamp",
          "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
          "Interface": "I-5: POST /feedback",
          "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
          "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
          "Related Reqs": "FR-005",
          "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts"
        },
        {
          "Requirement ID": "FR-006",
          "Module": "Public Feedback Form",
          "Component": "Show submission confirmation",
          "Description": "Client shows success/failure message after submit",
          "Interface": "I-6: submission UI response",
          "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; owner=Frontend",
          "V&V focus": "User feedback and error handling",
          "Related Reqs": "FR-006",
          "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures"
        },
        {
          "Requirement ID": "FR-007",
          "Module": "Submission Processing",
          "Component": "Validate feedback payload server-side",
          "Description": "Server-side schema validation and duplicate detection",
          "Interface": "I-7: POST /feedback validation",
          "Potential Metrics": "Rejected payload rate <=1.0% PT30D; owner=Backend",
          "V&V focus": "Schema validation, duplicate suppression",
          "Related Reqs": "FR-007",
          "DevSecOps / Security": "Server-side validation; input shaping; request schema tests"
        },
        {
          "Requirement ID": "FR-008",
          "Module": "Submission Processing",
          "Component": "Sanitize content for display",
          "Description": "Sanitize stored content to prevent XSS on admin views",
          "Interface": "I-8: sanitize pipeline",
          "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; owner=Security",
          "V&V focus": "Sanitizer test coverage",
          "Related Reqs": "FR-008",
          "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans"
        },
        {
          "Requirement ID": "FR-009",
          "Module": "Submission Processing",
          "Component": "Mark contact_intent if email present",
          "Description": "Set contact_intent boolean when optional email provided",
          "Interface": "I-9: contact_intent flag in payload",
          "Potential Metrics": "Flag consistency 100% PT30D (audit); owner=Backend",
          "V&V focus": "Flag persistence, audit logs",
          "Related Reqs": "FR-009",
          "DevSecOps / Security": "Audit log on flag set; encryption for email field"
        },
        {
          "Requirement ID": "FR-010",
          "Module": "Submission Processing",
          "Component": "Hash or encrypt email before persist",
          "Description": "Apply field-level encryption or hashing to emails prior to storage",
          "Interface": "I-10: crypto module",
          "Potential Metrics": "Encrypted-at-rest verified 100% (audit); owner=Security",
          "V&V focus": "Encryption key usage, KMS integration tests",
          "Related Reqs": "FR-010",
          "DevSecOps / Security": "KMS policy; key rotation; access limited to service role"
        },
        {
          "Requirement ID": "FR-011",
          "Module": "Submission Processing",
          "Component": "Persist record with time-sortable UUID",
          "Description": "Persist feedback record with UUIDv7 primary id",
          "Interface": "I-11: DB insert API",
          "Potential Metrics": "Insert success rate >=99.0% PT30D; owner=Storage",
          "V&V focus": "ID format, DB ACID write tests",
          "Related Reqs": "FR-011",
          "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit"
        },
        {
          "Requirement ID": "FR-012",
          "Module": "Submission Processing",
          "Component": "Return success/failure to client",
          "Description": "Return clear HTTP status and error codes; retry-safe",
          "Interface": "I-12: POST /feedback response codes",
          "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; owner=Backend",
          "V&V focus": "Status code correctness, idempotency",
          "Related Reqs": "FR-012",
          "DevSecOps / Security": "Idempotency tokens where needed; structured error codes"
        },
        {
          "Requirement ID": "FR-013",
          "Module": "Storage",
          "Component": "Store feedback records in SQL RDBMS",
          "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
          "Interface": "I-13: DB schema feedback table",
          "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
          "V&V focus": "Schema correctness, access controls",
          "Related Reqs": "FR-013",
          "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes"
        },
        {
          "Requirement ID": "FR-014",
          "Module": "Storage",
          "Component": "Encrypt sensitive fields at rest",
          "Description": "Encrypt emails and credentials at rest using field-level encryption",
          "Interface": "I-14: encryption-at-rest policy",
          "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; owner=Security",
          "V&V focus": "Encryption verification, key rotation tests",
          "Related Reqs": "FR-014",
          "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit"
        },
        {
          "Requirement ID": "FR-015",
          "Module": "Storage",
          "Component": "Apply least-privilege DB access",
          "Description": "DB accounts scoped by role; app uses minimal privileges",
          "Interface": "I-15: DB access roles",
          "Potential Metrics": "Role violation incidents =0 PT90D; owner=InfraSec",
          "V&V focus": "Access control audits",
          "Related Reqs": "FR-015",
          "DevSecOps / Security": "IAM role reviews; automated permission drift alerts"
        },
        {
          "Requirement ID": "FR-016",
          "Module": "Storage",
          "Component": "Retention policy P365D enforcement",
          "Description": "Automated deletion of records older than P365D unless exempt",
          "Interface": "I-16: retention job",
          "Potential Metrics": "Retention enforcement rate 100% monthly; owner=Storage",
          "V&V focus": "Retention job correctness, delete logs",
          "Related Reqs": "FR-016",
          "DevSecOps / Security": "Automated deletion job; deletion audit entries"
        },
        {
          "Requirement ID": "FR-017",
          "Module": "Storage",
          "Component": "Audit-write deletion events",
          "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
          "Interface": "I-17: deletion audit log",
          "Potential Metrics": "Deletion audit entries 100% per delete; owner=Compliance",
          "V&V focus": "Audit integrity and append-only writes",
          "Related Reqs": "FR-017",
          "DevSecOps / Security": "Append-only audit store; retention for audit logs"
        },
        {
          "Requirement ID": "FR-018",
          "Module": "Storage",
          "Component": "Periodic backups of dataset",
          "Description": "Perform regular backups with retention and restore tests",
          "Interface": "I-18: backup schedule",
          "Potential Metrics": "Daily backup success rate >=99.0% PT30D; owner=Storage",
          "V&V focus": "Backup restore verification",
          "Related Reqs": "FR-018",
          "DevSecOps / Security": "Encrypted backups; restore drills; access controls"
        },
        {
          "Requirement ID": "FR-019",
          "Module": "Admin UI",
          "Component": "Admin login screen (responsive)",
          "Description": "Responsive admin login with session handling",
          "Interface": "I-19: GET/POST /admin/login",
          "Potential Metrics": "Median admin login time <=2.0 s PT30D; owner=AdminUX",
          "V&V focus": "Auth flow and UI accessibility",
          "Related Reqs": "FR-019",
          "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms"
        },
        {
          "Requirement ID": "FR-020",
          "Module": "Admin UI",
          "Component": "List feedback sorted by timestamp",
          "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
          "Interface": "I-20: GET /admin/feedback?sort=time",
          "Potential Metrics": "List latency p95 <=300 ms PT30D; owner=AdminUX",
          "V&V focus": "Sorting correctness, pagination",
          "Related Reqs": "FR-020",
          "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs"
        },
        {
          "Requirement ID": "FR-021",
          "Module": "Admin UI",
          "Component": "View full feedback details",
          "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
          "Interface": "I-21: GET /admin/feedback/{id}",
          "Potential Metrics": "Detail retrieval success 100% PT30D; owner=AdminUX",
          "V&V focus": "Decryption/display rules, masking",
          "Related Reqs": "FR-021",
          "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit"
        },
        {
          "Requirement ID": "FR-022",
          "Module": "Admin UI",
          "Component": "Delete feedback with confirm dialog",
          "Description": "Admin delete requires explicit confirm and second-step verification",
          "Interface": "I-22: DELETE /admin/feedback/{id}",
          "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; owner=AdminOps",
          "V&V focus": "Confirm dialog enforcement, race conditions",
          "Related Reqs": "FR-022",
          "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens"
        },
        {
          "Requirement ID": "FR-023",
          "Module": "Admin UI",
          "Component": "Log deletion actor ID and ISO-8601 timestamp",
          "Description": "Record actor id and timestamp in audit log on delete",
          "Interface": "I-23: deletion audit entry",
          "Potential Metrics": "Audit entry present 100% per deletion; owner=Compliance",
          "V&V focus": "Audit consistency and tamper-evidence",
          "Related Reqs": "FR-023",
          "DevSecOps / Security": "Immutable audit store; retention and access controls"
        },
        {
          "Requirement ID": "FR-024",
          "Module": "Admin UI",
          "Component": "Search and export feedback list",
          "Description": "Admin can search and export CSV with permission checks",
          "Interface": "I-24: GET /admin/feedback?query & export",
          "Potential Metrics": "Export success rate >=99.0% PT30D; owner=AdminUX",
          "V&V focus": "Permission enforcement, export data masking",
          "Related Reqs": "FR-024",
          "DevSecOps / Security": "Export masking; RBAC; export job audit"
        },
        {
          "Requirement ID": "FR-025",
          "Module": "Admin Authentication",
          "Component": "Authenticate admins via OIDC IdP capability",
          "Description": "Admin auth via OIDC-capable IdP; support MFA",
          "Interface": "I-25: OIDC flow endpoints",
          "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; owner=Auth",
          "V&V focus": "OIDC flow conformance, token validation",
          "Related Reqs": "FR-025",
          "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation"
        },
        {
          "Requirement ID": "FR-026",
          "Module": "Admin Authentication",
          "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
          "Interface": "I-26: session cookie policy",
          "Potential Metrics": "Cookies with flags 100% (audit); owner=Auth",
          "V&V focus": "Cookie attribute verification",
          "Related Reqs": "FR-026",
          "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits"
        },
        {
          "Requirement ID": "FR-027",
          "Module": "Admin Authentication",
          "Component": "Idle session timeout PT30M",
          "Description": "Idle admin sessions expire after PT30M inactivity",
          "Interface": "I-27: session timeout policy",
          "Potential Metrics": "Idle session expiry enforcement 100% daily audit; owner=Auth",
          "V&V focus": "Timeout enforcement",
          "Related Reqs": "FR-027",
          "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation"
        },
        {
          "Requirement ID": "FR-028",
          "Module": "Admin Authentication",
          "Component": "Enforce MFA for admin accounts",
          "Description": "Require MFA for all admin logins",
          "Interface": "I-28: MFA enrollment and challenge",
          "Potential Metrics": "MFA enabled rate 100% for admin accounts; owner=Auth",
          "V&V focus": "MFA enforcement tests",
          "Related Reqs": "FR-028",
          "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit"
        },
        {
          "Requirement ID": "FR-029",
          "Module": "Admin Authentication",
          "Component": "Role-based access control for UI actions",
          "Description": "RBAC for admin UI actions and exports",
          "Interface": "I-29: RBAC policy checks",
          "Potential Metrics": "Unauthorized access attempts =0 PT90D; owner=Auth",
          "V&V focus": "RBAC policy correctness",
          "Related Reqs": "FR-029",
          "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs"
        },
        {
          "Requirement ID": "FR-030",
          "Module": "Admin Authentication",
          "Component": "Audit admin login and privilege changes",
          "Description": "Log admin login events and role changes with actor id and timestamp",
          "Interface": "I-30: admin audit log",
          "Potential Metrics": "Admin audit entries 100% per event; owner=Compliance",
          "V&V focus": "Audit completeness and integrity",
          "Related Reqs": "FR-030",
          "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes"
        },
        {
          "Requirement ID": "FR-031",
          "Module": "Privacy & GDPR",
          "Component": "Display email-use notice when email requested",
          "Description": "Show notice explaining email use, retention and opt-out",
          "Interface": "I-31: privacy notice UI",
          "Potential Metrics": "Notice shown on email field 100% (UI test); owner=Product",
          "V&V focus": "Notice visibility and content accuracy",
          "Related Reqs": "FR-031",
          "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy"
        },
        {
          "Requirement ID": "FR-032",
          "Module": "Privacy & GDPR",
          "Component": "Capture consent and contact-intent flags",
          "Description": "Store consent and contact_intent flags with timestamp and actor id",
          "Interface": "I-32: consent storage API",
          "Potential Metrics": "Consent recorded 100% when checkbox checked; owner=Product",
          "V&V focus": "Consent auditability",
          "Related Reqs": "FR-032",
          "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit"
        },
        {
          "Requirement ID": "FR-033",
          "Module": "Privacy & GDPR",
          "Component": "Provide data access and deletion request process",
          "Description": "Admin process and API to fulfill access/deletion requests",
          "Interface": "I-33: data subject request endpoints",
          "Potential Metrics": "DSR fulfillment time <=30 days per request; owner=Compliance",
          "V&V focus": "Request verification and completion",
          "Related Reqs": "FR-033",
          "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs"
        },
        {
          "Requirement ID": "FR-034",
          "Module": "Privacy & GDPR",
          "Component": "Support data deletion upon verified request",
          "Description": "Delete or anonymize records on verified deletion requests, log action",
          "Interface": "I-34: verified delete workflow",
          "Potential Metrics": "Verified deletions completed within 30 days; owner=Compliance",
          "V&V focus": "Deletion verification and audit",
          "Related Reqs": "FR-034",
          "DevSecOps / Security": "DeletionNonce verification; deletion audit entries"
        },
        {
          "Requirement ID": "FR-035",
          "Module": "Privacy & GDPR",
          "Component": "Expose retention period to admins",
          "Description": "Display retention policy and next-delete dates in admin UI",
          "Interface": "I-35: retention info UI",
          "Potential Metrics": "Retention info accuracy 100% (audit); owner=Storage",
          "V&V focus": "Retention metadata correctness",
          "Related Reqs": "FR-035",
          "DevSecOps / Security": "Retention metadata generation; UI access controls"
        },
        {
          "Requirement ID": "FR-036",
          "Module": "Privacy & GDPR",
          "Component": "Record consent and processing purpose in audit logs",
          "Description": "Append consent and processing purpose to audit trail immutably",
          "Interface": "I-36: consent audit entries",
          "Potential Metrics": "Consent audit entries 100% per consent; owner=Compliance",
          "V&V focus": "Audit linkage and immutability",
          "Related Reqs": "FR-036",
          "DevSecOps / Security": "Append-only audit; retention and access control"
        },
        {
          "Requirement ID": "FR-037",
          "Module": "Admin Authentication",
          "Component": "Session rotation policy and rotatedAt field",
          "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
          "Interface": "I-27b: session rotation endpoint /session/rotate",
          "Potential Metrics": "Session rotation performed 100% on privilege change; owner=Auth",
          "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
          "Related Reqs": "FR-037",
          "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests"
        },
        {
          "Requirement ID": "FR-038",
          "Module": "Submission Processing",
          "Component": "DeletionNonce TTL verification",
          "Description": "Verify deletionNonce TTL before accepting admin delete requests",
          "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
          "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps",
          "V&V focus": "Nonce TTL correctness, rejection behavior",
          "Related Reqs": "FR-038",
          "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.2",
          "artifactName": "Domain Context Table",
          "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; owner=Auth",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite=Strict; idle timeout PT30M; CSRF tokens for admin flows; per-feature checklist entry",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills checklist entry",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; owner=Storage",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; rate-limit throttle rate >1% PT7D; owner=SRE",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "DevSecOps / Security": "Field-level encryption/hashing at rest; TLS in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; owner=Product",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit); owner=Storage",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; owner=AdminUX",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypt sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; owner=AdminOps",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on delete forms; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; owner=Security",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; owner=Auth",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; session TTL PT8H; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Metric owner mapping — assign owners for decision metrics | # DEC-02: Session TTL PT8H — explicit rotation TTL | # DEC-03: CSRF tokens for admin — protect admin flows"
  }
}
[INFO] Found 4 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO]
Anonymous feedback | Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash | [PLACEHOLDER-AUTO]
Optional email capture | Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO]
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO]
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO]
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp | [PLACEHOLDER-AUTO]
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs | [PLACEHOLDER-AUTO]
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO]
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO]
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO]
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO]
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs | [PLACEHOLDER-AUTO]
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM | [PLACEHOLDER-AUTO]
Identifier strategy | Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions | [PLACEHOLDER-AUTO]
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO]
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE | [PLACEHOLDER-AUTO]
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO]
CSRF and anti-forgery | Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side | [PLACEHOLDER-AUTO]
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO]
Instrumentation owner for rate-limit metric | Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H | [PLACEHOLDER-AUTO]
--- DEPENDENCY: Artifact 1.1.1.1 (Modules Components Description Table) ---
FR-001 | Public Feedback Form | Open feedback page (responsive) | Serve responsive feedback page across desktop and mobile | I-1: GET /feedback page | Median FCP <=2.0 s PT30D; owner=Frontend | Cross-browser rendering, accessibility | FR-001 | TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans
FR-002 | Public Feedback Form | Enter feedback text | Input accepts freeform feedback text, client-side length limit 5000 chars | I-2: feedback textarea | Validation error rate <=0.5% PT30D; owner=Frontend | Input validation, XSS sanitization | FR-002 | Client-side sanitization; server-side validation; dependency vuln scans
FR-003 | Public Feedback Form | Optional email input | Optional email field; flag contact_intent when present; store encrypted/hashed | I-3: email input (optional) | % submissions with email PT30D (vanity); owner=Product | Email optionality, encryption correctness | FR-003 | Field-level encryption; KMS usage; least-privilege DB access; consent capture
FR-004 | Public Feedback Form | Show GDPR/privacy notice and consent checkbox | Display brief email-use notice and consent capture when email requested | I-4: consent checkbox UI | Consent capture rate when email present (%) PT30D; owner=Product | Consent recorded and auditable | FR-004 | Consent logged immutably; retention disclosure; privacy text audit
FR-005 | Public Feedback Form | Submit feedback with ISO-8601 UTC timestamp | POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp | I-5: POST /feedback | Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE | Id assignment, timestamp accuracy, rate-limit enforcement | FR-005 | Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts
FR-006 | Public Feedback Form | Show submission confirmation | Client shows success/failure message after submit | I-6: submission UI response | Median time-to-confirm <=1.5 s PT30D; owner=Frontend | User feedback and error handling | FR-006 | Consistent HTTP status codes; client telemetry for failures
FR-007 | Submission Processing | Validate feedback payload server-side | Server-side schema validation and duplicate detection | I-7: POST /feedback validation | Rejected payload rate <=1.0% PT30D; owner=Backend | Schema validation, duplicate suppression | FR-007 | Server-side validation; input shaping; request schema tests
FR-008 | Submission Processing | Sanitize content for display | Sanitize stored content to prevent XSS on admin views | I-8: sanitize pipeline | XSS vulnerability count =0 (scan) PT30D; owner=Security | Sanitizer test coverage | FR-008 | Output encoding; sanitizer library pinned; security scans
FR-009 | Submission Processing | Mark contact_intent if email present | Set contact_intent boolean when optional email provided | I-9: contact_intent flag in payload | Flag consistency 100% PT30D (audit); owner=Backend | Flag persistence, audit logs | FR-009 | Audit log on flag set; encryption for email field
FR-010 | Submission Processing | Hash or encrypt email before persist | Apply field-level encryption or hashing to emails prior to storage | I-10: crypto module | Encrypted-at-rest verified 100% (audit); owner=Security | Encryption key usage, KMS integration tests | FR-010 | KMS policy; key rotation; access limited to service role
FR-011 | Submission Processing | Persist record with time-sortable UUID | Persist feedback record with UUIDv7 primary id | I-11: DB insert API | Insert success rate >=99.0% PT30D; owner=Storage | ID format, DB ACID write tests | FR-011 | DB least-privilege role; input sanitization; write-audit
FR-012 | Submission Processing | Return success/failure to client | Return clear HTTP status and error codes; retry-safe | I-12: POST /feedback response codes | Proper HTTP success code on valid submit 100% PT30D; owner=Backend | Status code correctness, idempotency | FR-012 | Idempotency tokens where needed; structured error codes
FR-013 | Storage | Store feedback records in SQL RDBMS | Persist feedback rows in SQL RDBMS with least-privilege access | I-13: DB schema feedback table | DB write latency p95 <=200 ms PT30D; owner=Storage | Schema correctness, access controls | FR-013 | DB roles; TLS to DB; audit logging for writes
FR-014 | Storage | Encrypt sensitive fields at rest | Encrypt emails and credentials at rest using field-level encryption | I-14: encryption-at-rest policy | Encrypted fields coverage 100% (audit) PT30D; owner=Security | Encryption verification, key rotation tests | FR-014 | KMS keys; key rotation schedule; encryption audit
FR-015 | Storage | Apply least-privilege DB access | DB accounts scoped by role; app uses minimal privileges | I-15: DB access roles | Role violation incidents =0 PT90D; owner=InfraSec | Access control audits | FR-015 | IAM role reviews; automated permission drift alerts
FR-016 | Storage | Retention policy P365D enforcement | Automated deletion of records older than P365D unless exempt | I-16: retention job | Retention enforcement rate 100% monthly; owner=Storage | Retention job correctness, delete logs | FR-016 | Automated deletion job; deletion audit entries
FR-017 | Storage | Audit-write deletion events | Log deletion actor id and ISO-8601 timestamp immutably | I-17: deletion audit log | Deletion audit entries 100% per delete; owner=Compliance | Audit integrity and append-only writes | FR-017 | Append-only audit store; retention for audit logs
FR-018 | Storage | Periodic backups of dataset | Perform regular backups with retention and restore tests | I-18: backup schedule | Daily backup success rate >=99.0% PT30D; owner=Storage | Backup restore verification | FR-018 | Encrypted backups; restore drills; access controls
FR-019 | Admin UI | Admin login screen (responsive) | Responsive admin login with session handling | I-19: GET/POST /admin/login | Median admin login time <=2.0 s PT30D; owner=AdminUX | Auth flow and UI accessibility | FR-019 | OIDC flows; MFA prompt; CSRF protection on login forms
FR-020 | Admin UI | List feedback sorted by timestamp | Admin list view sorted newest-first using UUIDv7 ordering | I-20: GET /admin/feedback?sort=time | List latency p95 <=300 ms PT30D; owner=AdminUX | Sorting correctness, pagination | FR-020 | RBAC checks; query rate-limits; audit read logs
FR-021 | Admin UI | View full feedback details | Detail view shows text, timestamp, contact_intent, encrypted email marker | I-21: GET /admin/feedback/{id} | Detail retrieval success 100% PT30D; owner=AdminUX | Decryption/display rules, masking | FR-021 | Decryption via authorized role; masking for emails; access audit
FR-022 | Admin UI | Delete feedback with confirm dialog | Admin delete requires explicit confirm and second-step verification | I-22: DELETE /admin/feedback/{id} | Confirmed-deletes ratio >=99% PT30D; owner=AdminOps | Confirm dialog enforcement, race conditions | FR-022 | DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens
FR-023 | Admin UI | Log deletion actor ID and ISO-8601 timestamp | Record actor id and timestamp in audit log on delete | I-23: deletion audit entry | Audit entry present 100% per deletion; owner=Compliance | Audit consistency and tamper-evidence | FR-023 | Immutable audit store; retention and access controls
FR-024 | Admin UI | Search and export feedback list | Admin can search and export CSV with permission checks | I-24: GET /admin/feedback?query & export | Export success rate >=99.0% PT30D; owner=AdminUX | Permission enforcement, export data masking | FR-024 | Export masking; RBAC; export job audit
FR-025 | Admin Authentication | Authenticate admins via OIDC IdP capability | Admin auth via OIDC-capable IdP; support MFA | I-25: OIDC flow endpoints | Admin auth failure rate <=1.0% PT30D; owner=Auth | OIDC flow conformance, token validation | FR-025 | OIDC capability; token validation; MFA enforcement; secret rotation
FR-026 | Admin Authentication | Enforce session cookie flags Secure/HttpOnly/SameSite | Set Secure, HttpOnly, SameSite on admin session cookies | I-26: session cookie policy | Cookies with flags 100% (audit); owner=Auth | Cookie attribute verification | FR-026 | Cookie flags enforced; SameSite=Strict for admin; cookie audits
FR-027 | Admin Authentication | Idle session timeout PT30M | Idle admin sessions expire after PT30M inactivity | I-27: session timeout policy | Idle session expiry enforcement 100% daily audit; owner=Auth | Timeout enforcement | FR-027 | Session store TTL PT30M; inactivity checks; session rotation
FR-028 | Admin Authentication | Enforce MFA for admin accounts | Require MFA for all admin logins | I-28: MFA enrollment and challenge | MFA enabled rate 100% for admin accounts; owner=Auth | MFA enforcement tests | FR-028 | MFA challenge on auth; backup codes; enrollment audit
FR-029 | Admin Authentication | Role-based access control for UI actions | RBAC for admin UI actions and exports | I-29: RBAC policy checks | Unauthorized access attempts =0 PT90D; owner=Auth | RBAC policy correctness | FR-029 | RBAC enforcement; policy tests; permission audit logs
FR-030 | Admin Authentication | Audit admin login and privilege changes | Log admin login events and role changes with actor id and timestamp | I-30: admin audit log | Admin audit entries 100% per event; owner=Compliance | Audit completeness and integrity | FR-030 | Append-only admin audit; alert on suspicious changes
FR-031 | Privacy & GDPR | Display email-use notice when email requested | Show notice explaining email use, retention and opt-out | I-31: privacy notice UI | Notice shown on email field 100% (UI test); owner=Product | Notice visibility and content accuracy | FR-031 | Privacy text versioning; UI tests; consent link to policy
FR-032 | Privacy & GDPR | Capture consent and contact-intent flags | Store consent and contact_intent flags with timestamp and actor id | I-32: consent storage API | Consent recorded 100% when checkbox checked; owner=Product | Consent auditability | FR-032 | Immutable consent records; linkage to submissions; audit
FR-033 | Privacy & GDPR | Provide data access and deletion request process | Admin process and API to fulfill access/deletion requests | I-33: data subject request endpoints | DSR fulfillment time <=30 days per request; owner=Compliance | Request verification and completion | FR-033 | Verified request workflow; audit trail; auth for DSRs
FR-034 | Privacy & GDPR | Support data deletion upon verified request | Delete or anonymize records on verified deletion requests, log action | I-34: verified delete workflow | Verified deletions completed within 30 days; owner=Compliance | Deletion verification and audit | FR-034 | DeletionNonce verification; deletion audit entries
FR-035 | Privacy & GDPR | Expose retention period to admins | Display retention policy and next-delete dates in admin UI | I-35: retention info UI | Retention info accuracy 100% (audit); owner=Storage | Retention metadata correctness | FR-035 | Retention metadata generation; UI access controls
FR-036 | Privacy & GDPR | Record consent and processing purpose in audit logs | Append consent and processing purpose to audit trail immutably | I-36: consent audit entries | Consent audit entries 100% per consent; owner=Compliance | Audit linkage and immutability | FR-036 | Append-only audit; retention and access control
FR-037 | Admin Authentication | Session rotation policy and rotatedAt field | Rotate session tokens on privilege change and record rotatedAt ISO-8601 | I-27b: session rotation endpoint /session/rotate | Session rotation performed 100% on privilege change; owner=Auth | Rotation enforcement, rotatedAt timestamp correctness | FR-037 | Rotate tokens on privilege change; record rotatedAt; rotation tests
FR-038 | Submission Processing | DeletionNonce TTL verification | Verify deletionNonce TTL before accepting admin delete requests | I-22b: deletionNonce verification in DELETE /admin/feedback/{id} | Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps | Nonce TTL correctness, rejection behavior | FR-038 | DeletionNonce TTL PT15M; verify server-side; audit rejection events

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.2

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; owner=Auth",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite=Strict; idle timeout PT30M; CSRF tokens for admin flows; per-feature checklist entry",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills checklist entry",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; owner=Storage",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; rate-limit throttle rate >1% PT7D; owner=SRE",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "DevSecOps / Security": "Field-level encryption/hashing at rest; TLS in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; owner=Product",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit); owner=Storage",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; owner=AdminUX",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypt sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; owner=AdminOps",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on delete forms; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; owner=Security",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; owner=Auth",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; session TTL PT8H; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Metric owner mapping \u2014 assign owners for decision metrics | # DEC-02: Session TTL PT8H \u2014 explicit rotation TTL | # DEC-03: CSRF tokens for admin \u2014 protect admin flows"
  }
}

 6. Artifact-specific custom instructions
  List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1 M-2 Email storage method conflict"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Verify internal consistency, 2) check trace to spec/deps, 3) confirm correct deferral per Rule-1",
  "identifiedIssues": [
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.2 Optional Email Email storage conflict",
      "gapID": "d0923d",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Resolve encryption vs hashing; choose one method"
    }
  ]
}
BEFORE-MERGE 1.1.2 1
CALL-VERIFY 1.1.2 2/FeasibilityStudy/1
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-2 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Use deterministic encryption for emails",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.2 Optional Email Email storage conflict",
  "impact": "Medium",
  "recommendation": "Resolve encryption vs hashing; choose one method",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 5fe616, 2ac8a1, d0923d,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "d0923d",
  "explanation": "Same email storage conflict"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=1).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; owner=Auth",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite=Strict; idle timeout PT30M; CSRF tokens for admin flows; per-feature checklist entry",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills checklist entry",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; owner=Storage",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; rate-limit throttle rate >1% PT7D; owner=SRE",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "DevSecOps / Security": "Field-level encryption/hashing at rest; TLS in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; owner=Product",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit); owner=Storage",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; owner=AdminUX",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypt sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; owner=AdminOps",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on delete forms; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; owner=Security",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; owner=Auth",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; session TTL PT8H; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Metric owner mapping \u2014 assign owners for decision metrics | # DEC-02: Session TTL PT8H \u2014 explicit rotation TTL | # DEC-03: CSRF tokens for admin \u2014 protect admin flows"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.2 Optional Email Email storage conflict",
    "impact": "Medium",
    "recommendation": "Resolve encryption vs hashing; choose one method",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "5fe616",
      "newStatus": "Resolved",
      "notes": "Show Related Reqs column populated for each row"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Include deletionNonce TTL PT15M and verification in Admin UI row"
    },
    {
      "gapID": "d0923d",
      "newStatus": "KnownIssue",
      "notes": "Mention 'encryption/hashing' both present; choose single storage method"
    }
  ]
}
DEBUG: Actually resolved 3 issues in mini iteration (macro=2, phase=FeasibilityStudy, mini=1).
DEBUG: Actually resolved 3 issues in mini iteration (macro=2, phase=FeasibilityStudy, mini=1).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=2, phase=FeasibilityStudy, mini=1).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.1.1: # DEC-01: metric owner per component — owner assigned
1.1.2: # DEC-01: Metric owner mapping — assign owners for decision metrics | # DEC-02: Session TTL PT8H — explicit rotation TTL | # DEC-03: CSRF tokens for admin — protect admin flows

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 2f71be | 5fe616 | 7f6e8d | 9d77eb | d0923d | d6e0ba |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  | K/M | N/M | K/M | I/M |  | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | I/M | K/M | K/M |  | N/M | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | N/M |  | N/M | K/M | K/M |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M |  | K/M | K/M | K/M |  |

Canonical issue descriptions:
- 0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions
- 2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing
- 2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner
- 5fe616: 1.1.0 Related Reqs placeholders
- 7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact
- 9d77eb: 1.1.1 UUID-0005 Session rotation not specified
- d0923d: 1.1.2 Optional Email Email storage conflict
- d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs

        Here is the current iteration stats:
        ITERATION-STATS: total=4, new=0, resolved=3, stillOpen=1, criticalOpen=0, highOpen=0, deltaOpen=-2

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: MissedRequirement open=1

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 5
   • instructions: List initial high-level inputs for a software project in each row   List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 7
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security  |  open gaps: 6
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component   For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs  |  open gaps: 6
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: CSRF tokens for admin chosen because protect admin flows",
    "global-2: Security controls fragmented across modules causing missing rate-limit session-rotation CSRF deletionNonce",
    "global-3: Decision and telemetry metrics lack explicit owners causing unassigned instrumentation and poor traceability"
  ],
  "lessons_learned": [
    "global-1: Enforce CSRF tokens for all admin interfaces across artifacts because protect admin flows",
    "global-2: Consolidate a project security baseline and require explicit DevSecOps / Security entries per component (DevSecOps / Security)",
    "global-3: Require a Metric Owner field and mandate owner assignment for each potential metric to ensure instrumentation (Potential Metrics)"
  ],
  "processChanges": [
    {
      "type": "add_columns",
      "artifactIndex": "1.1.1.1",
      "columns": [
        "Metric Owner"
      ]
    },
    {
      "type": "add_columns",
      "artifactIndex": "1.1.2",
      "columns": [
        "Metric Owner"
      ]
    },
    {
      "type": "modify_instructions",
      "artifactIndex": "1.1.1",
      "new_instructions": "For each module action, declare rate-limit, session-rotation policy, CSRF protection, deletionNonce handling and populate DevSecOps / Security column"
    }
  ]
}
DEBUG: Updating columns for 1.1.1.1 from 'Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security' to 'Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security, Metric Owner'
INFO: Added columns ['Metric Owner'] to artifact 1.1.1.1
DEBUG: Updating columns for 1.1.2 from 'Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs' to 'Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs, Metric Owner'
INFO: Added columns ['Metric Owner'] to artifact 1.1.2
INFO: Appended new instructions to 1.1.1. Length now = 503 chars
INFO: Updated instructions for artifact 1.1.1
Phase 'FeasibilityStudy' ⇒ mini 2/2 (Macro=2)
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

# Objective: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 3
  • Artifact index:  1.1.1.1
  • Artifact name:   Modules Components Description Table
  • Artifact type:   table
  • Columns (exact order): Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security, Metric Owner
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Requirement ID  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Requirement ID": "FR-01",
    "Module": "User",
    "Component": "Register",
    "Description": "User signs up with details like name, email, and password.",
    "Interface": "I-1: Registration form (email/password)",
    "Potential Metrics": "Actionable: Registration success rate (% completion); Time to register. Vanity: Total registrations",
    "V&V focus": "TBD",
    "Related Reqs": "TBD \u2013 added per lessons learned",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned",
    "Metric Owner": "TBD \u2013 added per lessons learned"
  },
  {
    "Requirement ID": "FR-02",
    "Module": "User",
    "Component": "Login",
    "Description": "User logs in with credentials.",
    "Interface": "I-3: Login form",
    "Potential Metrics": "Actionable: Login success rate (% successful); Avg. login time Vanity: Total login attempts",
    "V&V focus": "TBD",
    "Related Reqs": "TBD \u2013 added per lessons learned",
    "DevSecOps / Security": "TBD \u2013 added per lessons learned",
    "Metric Owner": "TBD \u2013 added per lessons learned"
  }
]

## **Special instructions**: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component  
For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Enforce CSRF tokens for all admin interfaces across artifacts because protect admin flows
- global-2: Consolidate a project security baseline and require explicit DevSecOps / Security entries per component (DevSecOps / Security)
- global-3: Require a Metric Owner field and mandate owner assignment for each potential metric to ensure instrumentation (Potential Metrics)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Encryption vs hashing inconsistency",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Decide and document email storage method"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service
- GapID=2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner => Assign instrumentation owner and source for rate-limit metric
- GapID=5fe616: 1.1.0 Related Reqs placeholders => Populate Related Reqs with requirement IDs per row

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; owner=Frontend",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; owner=Frontend",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted/hashed",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "V&V focus": "Email optionality, encryption correctness",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level encryption; KMS usage; least-privilege DB access; consent capture"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present (%) PT30D; owner=Product",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; owner=Frontend",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; owner=Backend",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; owner=Security",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); owner=Backend",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encryption for email field"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Hash or encrypt email before persist",
      "Description": "Apply field-level encryption or hashing to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit); owner=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; owner=Backend",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; owner=Security",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; owner=InfraSec",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; owner=Storage",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; owner=Compliance",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; owner=Storage",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; owner=AdminUX",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; owner=AdminUX",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; owner=AdminUX",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; owner=AdminOps",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; owner=Compliance",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; owner=AdminUX",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; owner=Auth",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit); owner=Auth",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; owner=Auth",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; owner=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; owner=Auth",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; owner=Compliance",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test); owner=Product",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; owner=Product",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; owner=Compliance",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; owner=Compliance",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit); owner=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; owner=Compliance",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; owner=Auth",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; owner=AdminOps",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: metric owner per component \u2014 owner assigned"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "CSRF and anti-forgery",
          "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Instrumentation owner for rate-limit metric",
          "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1",
      "artifactName": "Main Scenario Table with N modules",
      "columns": [
        "Module ID",
        "Module",
        "Action 1",
        "Action 2",
        "Action 3",
        "Action 4",
        "Action n",
        "Related Reqs",
        "DevSecOps / Security"
      ],
      "rows": [
        {
          "Module ID": "M-1",
          "Module": "Public Feedback Form",
          "Action 1": "Open feedback page (responsive, accessible)",
          "Action 2": "Enter feedback text",
          "Action 3": "Optional email field + contact_intent checkbox",
          "Action 4": "Show GDPR/privacy notice and consent checkbox",
          "Action n": "Submit feedback with ISO-8601 UTC timestamp",
          "Related Reqs": "FR-005",
          "DevSecOps / Security": "POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events"
        },
        {
          "Module ID": "M-2",
          "Module": "Submission Processing",
          "Action 1": "Validate feedback payload server-side",
          "Action 2": "Sanitize content for display",
          "Action 3": "Mark contact_intent if email present; hash email before persist",
          "Action 4": "Enqueue for storage and notify admin UI",
          "Action n": "Return success/failure to client with id",
          "Related Reqs": "FR-022",
          "DevSecOps / Security": "Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest"
        },
        {
          "Module ID": "M-3",
          "Module": "Storage",
          "Action 1": "Store feedback records in SQL RDBMS",
          "Action 2": "Encrypt sensitive fields at rest (email, ip-hash)",
          "Action 3": "Enforce least-privilege DB access",
          "Action 4": "Backup cadence PT24H",
          "Action n": "Retention policy P365D enforcement and secure deletion",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job"
        },
        {
          "Module ID": "M-4",
          "Module": "Admin UI",
          "Action 1": "Admin login screen (responsive)",
          "Action 2": "List feedback sorted by timestamp",
          "Action 3": "Inspect feedback details",
          "Action 4": "Delete feedback with confirm dialog",
          "Action n": "Log deletion actor ID and ISO-8601 timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M"
        },
        {
          "Module ID": "M-5",
          "Module": "Admin Authentication",
          "Action 1": "Authenticate admins via OIDC IdP capability",
          "Action 2": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Action 3": "Enforce MFA for admin accounts",
          "Action 4": "Rotate sessions on privileged actions and record rotatedAt",
          "Action n": "Session TTL PT8H; renew on privileged action",
          "Related Reqs": "FR-025",
          "DevSecOps / Security": "OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy"
        },
        {
          "Module ID": "M-6",
          "Module": "Privacy & GDPR",
          "Action 1": "Display email-use notice when email requested",
          "Action 2": "Capture consent and contact-intent flags",
          "Action 3": "Provide data access and deletion request process",
          "Action 4": "Support verified data deletion and record event",
          "Action n": "Surface retention disclosure to admins",
          "Related Reqs": "[PLACEHOLDER-AUTO]",
          "DevSecOps / Security": "Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.1.1",
          "artifactName": "Modules Components Description Table",
          "columns": ["Requirement ID", "Module", "Component", "Description", "Interface", "Potential Metrics", "V&V focus", "Related Reqs", "DevSecOps / Security", "Metric Owner"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.1.1 (Modules Components Description Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security",
    "Metric Owner"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; percentile: p50; source=RUM",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; source=Frontend logs",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS)",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service",
      "V&V focus": "Email optionality, encryption correctness, contact_intent flag",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present 100% PT30D; source=Frontend",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts",
      "Metric Owner": "SRE"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; source=RUM",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; source=API-Service",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; source=Security scans",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); source=DB audit",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encrypted email field access controls",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Encrypt email before persist",
      "Description": "Apply field-level envelope encryption (KMS) to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit) PT30D; source=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role; decrypt audits",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; source=DB metrics",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; source=API-Service",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; source=DB metrics",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level envelope encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; source=Security audit",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; source=IAM audit",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts",
      "Metric Owner": "InfraSec"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; source=Retention job logs",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; source=Audit store",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; source=Backup logs",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; source=RUM",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms; TLS",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; source=API-Service",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; source=API-Service",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit; CSRF protection",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; source=Audit logs",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI",
      "Metric Owner": "AdminOps"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; source=Audit store",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; source=API-Service",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit; CSRF tokens on export actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; source=Auth logs",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit) PT30D; source=Auth audit",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; source=Session store",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; source=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; source=Auth audit",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; source=Audit store",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test) PT30D; source=UI tests",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; source=DB audit",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; source=Compliance logs",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; source=Audit store",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit) PT30D; source=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; source=Audit store",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; source=Auth logs",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; source=API-Service",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete",
      "Metric Owner": "AdminOps"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: email field encryption — preserve contact capability | # DEC-02: UUIDv7 identifiers — time-sortable IDs"
  }
}
[INFO] Found 1 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO]
Anonymous feedback | Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash | [PLACEHOLDER-AUTO]
Optional email capture | Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO]
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO]
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO]
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp | [PLACEHOLDER-AUTO]
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs | [PLACEHOLDER-AUTO]
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO]
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO]
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO]
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO]
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs | [PLACEHOLDER-AUTO]
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM | [PLACEHOLDER-AUTO]
Identifier strategy | Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions | [PLACEHOLDER-AUTO]
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO]
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE | [PLACEHOLDER-AUTO]
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO]
CSRF and anti-forgery | Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side | [PLACEHOLDER-AUTO]
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO]
Instrumentation owner for rate-limit metric | Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H | [PLACEHOLDER-AUTO]
--- DEPENDENCY: Artifact 1.1.1 (Main Scenario Table with N modules) ---
M-1 | Public Feedback Form | Open feedback page (responsive, accessible) | Enter feedback text | Optional email field + contact_intent checkbox | Show GDPR/privacy notice and consent checkbox | Submit feedback with ISO-8601 UTC timestamp | FR-005 | POST /feedback rate-limit 10 req per IP per PT1M; metric owner=SRE; source=API-Service counters; 429+exp backoff; TLS; input validation; log throttle events
M-2 | Submission Processing | Validate feedback payload server-side | Sanitize content for display | Mark contact_intent if email present; hash email before persist | Enqueue for storage and notify admin UI | Return success/failure to client with id | FR-022 | Server-side validation; XSS sanitization; hash email before persist; audit write on submit; retry idempotency for ingest
M-3 | Storage | Store feedback records in SQL RDBMS | Encrypt sensitive fields at rest (email, ip-hash) | Enforce least-privilege DB access | Backup cadence PT24H | Retention policy P365D enforcement and secure deletion | [PLACEHOLDER-AUTO] | Field-level encryption at rest; TLS in transit; DB access via least-privilege roles; access logs for reads/writes; retention enforcement job
M-4 | Admin UI | Admin login screen (responsive) | List feedback sorted by timestamp | Inspect feedback details | Delete feedback with confirm dialog | Log deletion actor ID and ISO-8601 timestamp | [PLACEHOLDER-AUTO] | RBAC for UI actions; CSRF tokens or SameSite=Strict cookies for admin flows; audit trail for deletes; session idle timeout PT30M
M-5 | Admin Authentication | Authenticate admins via OIDC IdP capability | Enforce session cookie flags Secure/HttpOnly/SameSite | Enforce MFA for admin accounts | Rotate sessions on privileged actions and record rotatedAt | Session TTL PT8H; renew on privileged action | FR-025 | OIDC IdP capability; session TTL PT8H; rotatedAt timestamp; idle timeout PT30M; MFA enforcement; secrets rotation policy
M-6 | Privacy & GDPR | Display email-use notice when email requested | Capture consent and contact-intent flags | Provide data access and deletion request process | Support verified data deletion and record event | Surface retention disclosure to admins | [PLACEHOLDER-AUTO] | Record consent and processing purpose in audit logs; encrypt email at rest; deletion audit event with actor_id and timestamp; retention disclosure

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.1.1

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • 1.1.2 — Domain Context Table (Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs, Metric Owner)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security",
    "Metric Owner"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; percentile: p50; source=RUM",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; source=Frontend logs",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS)",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service",
      "V&V focus": "Email optionality, encryption correctness, contact_intent flag",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present 100% PT30D; source=Frontend",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts",
      "Metric Owner": "SRE"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; source=RUM",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; source=API-Service",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; source=Security scans",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); source=DB audit",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encrypted email field access controls",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Encrypt email before persist",
      "Description": "Apply field-level envelope encryption (KMS) to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit) PT30D; source=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role; decrypt audits",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; source=DB metrics",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; source=API-Service",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; source=DB metrics",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level envelope encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; source=Security audit",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; source=IAM audit",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts",
      "Metric Owner": "InfraSec"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; source=Retention job logs",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; source=Audit store",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; source=Backup logs",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; source=RUM",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms; TLS",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; source=API-Service",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; source=API-Service",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit; CSRF protection",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; source=Audit logs",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI",
      "Metric Owner": "AdminOps"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; source=Audit store",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; source=API-Service",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit; CSRF tokens on export actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; source=Auth logs",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit) PT30D; source=Auth audit",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; source=Session store",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; source=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; source=Auth audit",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; source=Audit store",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test) PT30D; source=UI tests",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; source=DB audit",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; source=Compliance logs",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; source=Audit store",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit) PT30D; source=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; source=Audit store",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; source=Auth logs",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; source=API-Service",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete",
      "Metric Owner": "AdminOps"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: email field encryption \u2014 preserve contact capability | # DEC-02: UUIDv7 identifiers \u2014 time-sortable IDs"
  }
}

 6. Artifact-specific custom instructions
  Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component  
For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "impact": "Medium",
    "desc": "1.1.1 M-2 Email storage method conflict"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Is artifact internally consistent and complete for this stage? 2) Do rows trace to spec/deps? 3) Are missing items correctly deferred?",
  "identifiedIssues": [
    {
      "gapType": "MissedRequirement",
      "shortDescription": "1.1.1.1 FR-003 Email storage method conflict",
      "gapID": "d0923d",
      "knownIssue": "KnownIssue",
      "impact": "Medium",
      "recommendation": "Align hashing vs encryption method; pick one and document"
    }
  ]
}
BEFORE-MERGE 1.1.1.1 1
CALL-VERIFY 1.1.1.1 2/FeasibilityStudy/2
canonical="1.1.2 Optional Email Email storage conflict"
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
    You are analyzing software issues for possible duplication.

    Your task is to follow STEP 1: normalise known unique (open/resolved) issues, then STEP 2 – Match logic, and finally STEP 3 – output valid JSON.

    STEP 1 – Normalise
    • For *every* issue (known & candidate) create a temporary field called **coreProblem** by:
      – Removing any leading numbering denoting artifact indexes, such as “1.1.4.2 ” or “1.1.1 ” or "2.3.1".
      – Lower-casing.
      – Stripping duplicate whitespace.
      – Split `shortDescription` at “||”; treat each part as an alias and normalise separately.
      – If a **row OR column token** (e.g., “Row M-06”, “FR-12”, “FB-02”, “SLA column”) is present, **prepend it to coreProblem** so that different rows/columns are not merged.
      – Treat obvious synonyms, abbreviations, and word-form variants as equivalent (e.g., “p95” ≈ “95th percentile”; “encrypt”, “encryption”, “encrypted”).  Do not invent far-fetched matches: use only clear, context-relevant synonyms.

    STEP 2 – Match logic
      • Does the candidate contain a **row/column token**?
        – **Yes** →
            ▸ If an existing coreProblem **with the same token** matches → duplicate (row → row).
            ▸ **Else**, strip the token from **both** the candidate *and* all known coreProblems, then compare.
                · If one matches → **return that gapID** and treat as a *row-to-row merge* (locator should widen, usually to `Whole artifact`).
                · If none match, compare the stripped candidate with token-less coreProblems
                  (earlier *Whole-artifact* gaps) → if match, scope-narrowing refinement.
                · Otherwise `"NEW"`.
        – **No**  → ▸ If a known coreProblem **without** row/column token already matches → duplicate into that (Whole-artifact wins).
                          ▸ **Else**, strip row/column tokens from known issues and compare.
                            · If one matches → **return its gapID** and treat this as a *scope-widening refinement*.
                            · Otherwise return `"NEW"`.
    • If a duplicate is found under these rules, return the first matching gapID in list order; otherwise return `"NEW"`.

    STEP 3 – Output
    Return **only**
    {
      "matchResult": "NEW" | "<gapID>",
      "explanation": "≤ 5 words reason"
    }


    We have a set of known unique (open/resolved) issues:
    [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.2 Optional Email Email storage conflict || 1.1.1 M-2 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Resolve encryption vs hashing; choose one method",
    "knownIssue": "KnownIssue"
  }
]

    Now we have 1 new candidate issue:
    {
  "gapType": "MissedRequirement",
  "shortDescription": "1.1.1.1 FR-003 Email storage method conflict",
  "impact": "Medium",
  "recommendation": "Align hashing vs encryption method; pick one and document",
  "knownIssue": "KnownIssue"
}

    EDGE CASES
    • If several gapIDs share the same coreProblem, choose the one whose gapType matches the candidate; if still tied, choose the earliest gapID.
    • Treat plural/singular as the same.
    • If row/column tokens differ **but coreProblem matches**, merge into the existing gapID and widen the locator (usually to `Whole artifact`). Otherwise `"NEW"`.
    • If one issue has a token and the other doesn’t:
        – Merge into the existing gap **regardless of which side has the token**
          (row → whole or whole → row keeps the **same gapID**);
        – If no matching coreProblem exists, return `"NEW"`.
    • Edge case summary: if row/column tokens differ **and** `coreProblem` differs → `"NEW"`; otherwise merge per previous rule.

    ──────────────────────── EXAMPLES ──────────────────────────

    1.  Same words, different order
    Known issue:  gapID "78592b"  → "mobile OS compatibility not verified"
    Candidate issue:  "Compatibility with mobile OS is unverified at v1.1.5"
    {
      "matchResult": "78592b",
      "explanation": "Same mobile-OS gap"
    }

    2.  Synonym & section noise
    Known issue:  gapID "d7c2a6"  → "data encryption not explicitly detailed"
    Candidate issue: "1.1.4.2 NFR-03 encrypt user data, details missing"
    {
      "matchResult": "d7c2a6",
      "explanation": "Encryption detail missing"
    }

    3.  Plural ↔ singular, substring match
    Known issue:  gapID "32db4f"  → "payment processing security control not detailed"
    Candidate issue: "WF-07 lacks security controls list for payments"
    {
      "matchResult": "32db4f",
      "explanation": "Same payment control"
    }

    4.  Alias after “||” handled
    Known issue:  gapID "24ba4a"  → "…success metrics not confirmed || …success metrics not confirmed"
    Candidate issue: "INP-06 success metrics remain unconfirmed"
    {
      "matchResult": "24ba4a",
      "explanation": "Matches alias text"
    }

    5.  Overlap but gapType tie-break
    Known issue-A: gapID "9b97a8", PerformanceGap → "response time exceeds 400 ms"
    Known issue-B: gapID "24ba4a", UsabilityGap   → "success metrics not confirmed"
    Candidate issue: PerformanceGap               → "p95 response-time still above target"
    {
      "matchResult": "9b97a8",
      "explanation": "Matches perf gap"
    }

    6.  Truly unrelated topic
    Known issue list has no “avatar upload” problems at all.
    Candidate issue: "User avatar upload fails intermittently"
    {
      "matchResult": "NEW",
      "explanation": "Completely new gap"
    }

    7.  Same text, different row
    Known issue: gapID "de3cfe" → "Row M-06 missing trace links"
    Candidate issue: "Row FB-02 missing trace links"
    {
      "matchResult": "de3cfe",
      "explanation": "Same trace gap"
    }

    8.  Whole-artifact precedes row
    Known issue: gapID "aa11bb" → "Whole artifact missing KPI column"
    Candidate issue: "Row I-07 missing KPI column"
    {
      "matchResult": "aa11bb",
      "explanation": "Merge into whole"
    }

    9.  Row precedes whole (no whole gap yet)
    Known issue: gapID "bb22cc" → "Row I-07 missing KPI column"
    Candidate issue: "Whole artifact missing KPI column"
    {
      "matchResult": "bb22cc",
      "explanation": "Merge into row gap"
    }
    ──────────────────────────────────────────────────

    Return ONLY valid JSON with:
    {
      "matchResult": "NEW" or one of the valid gapIDs: 2ac8a1, 5fe616, d0923d,
      "explanation": "≤ 5 words reason"
    }

    Keep each issue’s explanation very brief, but specific (one short sentence, not more than 5 words).
    No extra text outside JSON, no triple backticks or code fencing.
    
DEBUG (LLMClient): GPT Response:
 {
  "matchResult": "d0923d",
  "explanation": "Matches email storage conflict"
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security",
    "Metric Owner"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; percentile: p50; source=RUM",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; source=Frontend logs",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS)",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service",
      "V&V focus": "Email optionality, encryption correctness, contact_intent flag",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present 100% PT30D; source=Frontend",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts",
      "Metric Owner": "SRE"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; source=RUM",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; source=API-Service",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; source=Security scans",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); source=DB audit",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encrypted email field access controls",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Encrypt email before persist",
      "Description": "Apply field-level envelope encryption (KMS) to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit) PT30D; source=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role; decrypt audits",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; source=DB metrics",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; source=API-Service",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; source=DB metrics",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level envelope encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; source=Security audit",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; source=IAM audit",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts",
      "Metric Owner": "InfraSec"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; source=Retention job logs",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; source=Audit store",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; source=Backup logs",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; source=RUM",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms; TLS",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; source=API-Service",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; source=API-Service",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit; CSRF protection",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; source=Audit logs",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI",
      "Metric Owner": "AdminOps"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; source=Audit store",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; source=API-Service",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit; CSRF tokens on export actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; source=Auth logs",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit) PT30D; source=Auth audit",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; source=Session store",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; source=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; source=Auth audit",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; source=Audit store",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test) PT30D; source=UI tests",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; source=DB audit",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; source=Compliance logs",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; source=Audit store",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit) PT30D; source=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; source=Audit store",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; source=Auth logs",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; source=API-Service",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete",
      "Metric Owner": "AdminOps"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: email field encryption \u2014 preserve contact capability | # DEC-02: UUIDv7 identifiers \u2014 time-sortable IDs"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "5fe616",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Related Reqs placeholders",
    "impact": "Medium",
    "recommendation": "Populate Related Reqs with requirement IDs per row",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Align hashing vs encryption method; pick one and document",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "2ac8a1",
      "newStatus": "InProgress",
      "notes": "Document TTL verification in Row FR-038; server-side check added"
    },
    {
      "gapID": "5fe616",
      "newStatus": "Resolved",
      "notes": "Populate Related Reqs column per row"
    },
    {
      "gapID": "d0923d",
      "newStatus": "Resolved",
      "notes": "Specify field-level envelope encryption in Row FR-003"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce exactly one compliant JSON artifact in this turn.
 • If information is missing and can not be safely infered, log the gap in metadata instead of guessing.
 • Think step-by-step privately in your scratch-pad before filling rows.
 • For any **metric-like field**, apply a **two-tier policy**:
   – **Decision metrics**: **prefer** a quantitative KPI (statistic + numeric threshold + unit + time window); add population/source when available.
   – **Vanity/trend metrics**: provide a clear, quantitative descriptor; thresholds are **optional** unless explicitly mandated.

# Role: you are a *software engineer* and *implementation author* of *current artifact*, who loves turning fuzzy ideas into rock-solid, testable designs.
 • We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

# Objective: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, previous artifact version, dependencies, lessons learned and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# ENGINEERING MINDSET – apply before typing any row
 • Systems-thinking lens – see artifact as part of a larger architecture.
 • Spec-wins but Challenge Gaps – uphold client spec, flag omissions.
 • ClientSpec+Special‑instructions supremacy & tie‑breakers – treat the original client specifications **and Special instructions** as ground truth; on ambiguity or conflicts with dependencies/lessons/issues, consult them first; if still unclear, prefer non‑speculative defaults or log an `unresolvedNotes` gap (do not invent new requirements).
 • Proactive Ambiguity Resolution – infer safe, industry‑standard defaults **when in scope** and data is missing.
 • Data‑Driven & Measurable – favour quantifiable targets, verifiable metrics **when in scope**.
 • Risk-First Attitude – default to least-privilege, secure, fault-tolerant choices.
 • DRY + KISS – avoid duplication; keep every cell succinct and specific.
 • Quality Baselines – embed CIA, SOLID‐S, and performance envelopes where relevant, via concrete system properties; avoid checklist phrasing.
 • Trace‑When‑In‑Scope – add trace links where a trace column exists **and is in scope** for the phase/artifact **and carry referenced constants**.
 • Continuous-Improvement – fold lessons learned into current design without regressions.

# ANTI‑OVERSPECIFICATION & ANTI‑LOCK‑IN (global)
 • Default to capability‑based nouns (e.g., “OIDC IdP”, “S3‑compatible object storage”, “SQL RDBMS”).
 • Do not name vendors, paid SKUs, or single‑cloud managed services before an ADR explicitly approves them,
   unless they appear in original client specifications (as the only option) or in a Critical/High bullet.
 • Prefer portable standards (e.g., OIDC, OAuth 2.1, OpenMetrics, S3 API, SQL RDBMS) when a choice is needed.
 • If Sample data rows mention vendors, treat them as examples; replace with capability nouns.
 • Overspecification = naming a vendor/product/non‑portable API where the spec doesn’t require it and a
   standards‑based capability noun exists.
 • Vendor names and tech‑locks are allowed only when the client specification explicitly mandates a single vendor/technology (not merely as an example). In that case, use a capability noun followed by the lock in parentheses, e.g., "S3‑compatible object storage (required: AWS S3)". Define ADR on first use: Architecture Decision Record (ADR).
 • Decision timing: postpone tool/vendor picks to backlog phase (current phase is FeasibilityStudy).

# #Cell fill policy
Never leave a cell blank. If a column truly does not apply to this row or you cannot safely supply a concrete value, write exactly one of these tokens (case sensitive):
•	N/A — column truly does not apply to this row
•	Not required — column is applicable in general, but the spec makes it optional for this row
•	Insufficient data — spec/dependencies don’t give enough to set a value safely
•	TBD — a required value is known to be needed but not yet decided
Semantics:
N/A = not relevant • Not required = optional here • Insufficient data = unknown due to missing inputs • TBD = known required, undecided

## **MANDATORY-FIX RULE**
*If the {highlighted_msg} block contains any **CRITICAL** or **HIGH**-severity bullets* you **must** for **each** bullet:
1. **Implement** the recommended action **or** leave it unresolved **only** when blocked, in which case add a key-value entry under `metadata.unresolvedNotes` exactly as specified in Step B.
2. Record the bullet in the **Progress Tracker** with the same `GapID` and mark status **Resolved**, **Partially**, or **Unresolved** as appropriate.
 (This rule has equal precedence with “Spec-wins”; obey both even if they conflict with other guidance.) Update row content, don’t add commentary
 • If a CRITICAL/HIGH bullet clearly belongs to **another artifact**, do **not** duplicate that content here.  Instead, leave the gap *Unresolved* and add an entry under `metadata.unresolvedNotes` using the **cross-artifact scope** reason pattern described in Step B.
 • If a CRITICAL/HIGH fix conflicts with the client spec:
    – Do **not** implement the fix.
    – Log the gap in `metadata.unresolvedNotes` with reason "spec conflict".

## ⚙️ DECISION-&-INFO-CRUMB RULE (global)
*INTERNAL — never emit the scratch-pad*

When you must invent **any numeric threshold, enumerated option or tooling/architecture choice**:
 1. Draft ≥ 2 candidate rows with **Perf / Cost / Maintainability / Security** scores 1-5.
 2. Pick the winner (highest Total  →  highest Security  →  lowest Cost).
 3. DO NOT print the draft table.
 4. Fill the official artifact only with the winning figure/option.
 5. **Also** detect passive facts that (a) alter behaviour of ≥ 1 earlier artifact in the next macro/phase **and** (b) are absent from the upstream spec blocks — see the 13-item trigger list below.
 6. For every decision *or* info-trigger, append **1-5 crumbs** in `metadata.notesFromLLM`, separated by `" | "`.
  • Format: `# DEC-<nn>: <WHAT> — <WHY>`  (no trailing pipes)
  • `<WHAT>`  = reusable noun phrase **≤ 6 words** (*do **not** add artifact IDs*).
  • `<WHY>`   = one short motive (≤ 8 words) starting with a verb.
  • Max 65 characters per crumb.
  • Use exactly one em-dash (—); no trailing pipes.
  • Number <nn> chronologically per artifact (01, 02 …); restart at each call.
  • **Uniqueness guard**: emit a crumb **only once per iteration** — if an identical `<WHAT>` already exists in dependencies **or previous artifact version**, **skip it and do not increment the counter**.
  • Always include at least one crumb; if none qualify use `# DEC-00: no cross-artifact impact — FYI`.
  • Example: `# DEC-01: REST/JSON chosen — simpler firewall | # DEC-02: UUIDv7 identifiers — sortable, time-based`
  • The **last crumb must not end with `|`**.

## INFO-CRUMB TRIGGERS (emit when any row causes one):
  1 Contract shape changed   2 Schema-migration pattern   3 Trace header/ID
  4 Identifier strategy      5 Crypto/Compliance rule     6 Perf envelope
  7 Ordering/Idempotency     8 Tool/runtime pin           9 Deprecation clock
 10 Business constant        11 Data-quality rule        12 Shard/Partition key
 13 Log/Audit format
### INFO-CRUMB REMINDER
 • Always emit ≥ 1 and ≤ 5 crumbs.
 • Never duplicate an existing crumb from another artifact in the same macro-iteration.
 • Missing crumb for a fired trigger ⇒ High-severity gap.

##⚠️  **Quality Gate Notice**
 • After you submit your JSON, a *senior reviewer LLM* will score it with the rubric below.
 • If your score is < 7 / 10, you will be asked to redo the artifact.
 • Therefore, meet every rubric point **on the first try**.

### EVALUATION RUBRIC *(do **not** output this rubric)*
 • 10 / 10  All Critical + High CLOSED **in scope**  + ≥ 80 % of Med/Low CLOSED **in scope**
 •  7 / 10  All Critical CLOSED, some High remain
 • ≤ 4 / 10  Any Critical issue still open or re-introduced
(The grader is strict and reward-based; aim for 10/10.)


## PROGRESS TRACKER (fill before Step A & update before JSON)
| GapID | Status (Resolved/Partially/Unresolved) | One-line Fix |
|-------|----------------------------------------|--------------|
Fill the table above **before you start step A** and update it again just before sending the JSON.
**Internal use only – never include the table in your final answer.**
(Example row – delete the whole table before sending JSON):
| 7f3942 | Resolved | Add timestamp |
(Delete the entire table before sending your JSON ─ do **not** leave any sample row.)
**Tracker enforcement — complete it only when CRITICAL/HIGH bullets exist. Remove the whole table before emitting JSON.**


# EXECUTION STEPS  (follow A → I)
 A  **Analyse & Align**
   1. Clarify purpose & audience – note the table’s intent in your private scratch-pad.
   2. Collect source knowledge – pull specs, dependencies, prior artifacts, data samples; discard off-scope info.
   3. Model the domain – list entities → attributes and choose correct row granularity.
   4. Design column set & primary key – one unique fact per column; PK minimal and stable.
   5. Apply **Spec-wins** (treat “optional” spec bullets as *must* but mark them *(optional)* in rows).
 B  Resolve all unresolved issues listed above **(any severity)** including every CRITICAL/HIGH bullet per the MANDATORY-FIX RULE (skip if “None”); aim for a 10/10 rubric score and update the Progress Tracker.
   • **ONLY** if a gap is truly blocked, leave it *Unresolved* and add an entry in `metadata.unresolvedNotes` using: `"<gapID>": "<≤120-char reason this gap cannot be fixed right now>"`
   • If gap is not applicable to current artifact or false (reviewer mistake), consider it blocked and do not resolve it.
   • Do **not** include the `GapID=` prefix.
   • List **only** gaps that are still blocked. If none are blocked, omit the `unresolvedNotes` key entirely.
     Acceptable reason patterns (choose **one** per gap; list not exhaustive):
       – conflicting instructions inside this prompt (e.g. spec A demands anonymity; spec B demands user IDs)
       – spec / dependency gap (e.g. encryption algorithm or success metric not supplied)
       – upstream artifact not generated yet in this macro/phase (e.g. dependency table still missing)
       – cross-artifact scope (bullet targets a different artifact that this update cannot fix)
   • **If a mandatory foreign-key value cannot be resolved from declared dependencies,** omit the entire row **and** add  `"<row-locator>": "missing FK <column> – upstream row absent"` to `metadata.unresolvedNotes`.
 C  Prevent re-opening globally resolved issues (skip if “None”).
 D  Apply relevant lessons learned (**owned by this artifact**; skip if “None”, not applicable, or false).
 E  Sync with updated dependencies (respecting the Spec-wins rule; skip if “None”).
 F  **Deduplicate & Normalise**
   • Merge or remove duplicate / obsolete rows; keep primary-key uniqueness.
   • Normalise names & units – apply canonical vocab **consistent with previous version of artifact, dependencies, client specifications**, SI/IEC units, tidy enums, merge synonyms.
   • Run internal checks – PK uniqueness, no blank mandatory cells, logical bounds (start ≤ end, % ≤ 100).
 G  **Requirement Coverage & Gap-Filling**
   Ensure every “must / shall / at least” requirement maps to one row or column; add **only** what is missing. **Do not add rows solely as examples.**
   • If a spec bullet uses *should / may / could / optional*, add a row **only when this artifact is the natural owner** of that item (e.g. UI spec → UI table).
     – If the requirement clearly belongs to another artifact, skip it here and rely on that artifact to cover it.
     – If you add the row but lack concrete figures, run the **DECISION-SCRATCHPAD** to select a sensible default. Use `[PLACEHOLDER-AUTO]` only when no safe, non-speculative default exists.
   • When the spec mandates a capability yet omits **specific values or choices** (e.g. “host on a free provider”, “provide licence attribution”):
       1. First attempt to decide a reasonable industry default via the scratch-pad (e.g. Vercel Free, MIT-style licence-attribution workflow).
       2. If even the scratch-pad cannot yield a defensible choice, add the row with `[PLACEHOLDER-AUTO]` *and* an inline comment explaining why a placeholder was unavoidable.
   • If you later decide on a value, replace every `[PLACEHOLDER-AUTO]` cell in that row with the chosen value.
   • For every row that contains a **“Related Reqs”, “Trace”, “Req ID”** or similar column, populate that cell with **only** a Requirement-ID (`FR-`, `NFR-`, `US-`, etc.).
     – If no suitable ID exists after diligent search, insert `[PLACEHOLDER-AUTO]` and comment “awaiting upstream requirement”.
H  Sort rows ascending by the primary-key column/columns unless *Special instructions* say otherwise.
I  **Quality-assure & Output**
   1. Quality-assure & iterate – run the Quick Self-Check; confirm no banned meta words, row count ≤ 200, etc.
   2. Output the JSON schema shown below.

# STYLE & SIZE RULES
  • Telegraphic style — imperative or noun phrases; each **text** field ≤ 120 chars incl. spaces. (If Special instructions demand prose, this overrides the limit **only** for the named columns.)
  • Do **not** reuse sample nouns/IDs unless they also appear in the client specification.
  • Ignore any sample columns not present in the column list.
  • Maximum rows: **200**.
  • "notesFromLLM" (metadata) is **required**; 1-5 crumbs, total ≤ 200 chars (**reviewer enforces**).
  • No full sentences unless Special instructions require them.
  • 💡 **Domain-only rule** – Every **row cell** must describe an *observable product/property* (UI element, API call, metric, control, etc.).
     ✗ Never include in table meta‑process wording such as “apply lessons”, “update dependencies”, “resolve issue”, “prevent re‑emergence”, “align with spec”, “checklist:”, etc..
     ✗ Never copy or paraphrase text from MANDATORY-FIX bullets.
     ✓ Close a gap by **editing the concrete domain data**, not by narrating the fix.
  • This rule also applies to *any* columns: describe what the **system** does, not what *you, the engineer* will do.
  • If you add a “# chosen:… ” breadcrumb, place it **only** in metadata.notesFromLLM (never as free-text after or before JSON).
  • If any trigger (see INFO‑CRUMB list) fired, verify the matching crumb is present in `metadata.notesFromLLM` **after composing rows**.
  • Use strict SI (kB, ms, C) and IEC binary prefixes (KiB, MiB) for sizes; never imperial.
  • Timestamps: ISO-8601 UTC (`YYYY-MM-DDThh:mm:ssZ`). Durations: ISO-8601 (`PT3H15M`, `P7D`).
  • Numbers: period as decimal separator, no thousands separator; ≤ 4 decimal places unless higher precision is required.
  • Safe ASCII symbols only.
  • **Row‑type invariant** - All rows must represent the **same entity type** for this artifact; keep it consistent across every row.
(<end of instruction block>)

(<start of project data block:>)
# Project-specific data:

## Key project-specific data
  • Artifact number: 4
  • Artifact index:  1.1.2
  • Artifact name:   Domain Context Table
  • Artifact type:   table
  • Columns (exact order): Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs, Metric Owner
  • Column‑sequence expansion (hard rule): If the column list shows a repeat pattern like
    “Action 1, Action 2, ..., Action n”, treat it as **expandable**, implement as many as needed.
  • Primary-key column(s): Category  → values **must be unique**; create new IDs if collisions occur. If **Special instructions** mentions primary key with multiple columns, **Special instructions** win.
  • Obligatory rows: 
  • Sample data rows for another project (replace any 'TBD' with meaningful data if you reuse):
    [
  {
    "Category": "Financial Data",
    "Details": "Includes transactions",
    "Quality Attributes": "Reliability",
    "Potential Metrics": "Error rate",
    "DevSecOps / Security": "Data encryption",
    "Related Reqs": "Req-05",
    "Metric Owner": "TBD \u2013 added per lessons learned"
  },
  {
    "Category": "User Profiles",
    "Details": "Handles personal info",
    "Quality Attributes": "Privacy",
    "Potential Metrics": "Time to anonymize",
    "DevSecOps / Security": "GDPR compliance",
    "Related Reqs": "Req-09",
    "Metric Owner": "TBD \u2013 added per lessons learned"
  }
]

## **Special instructions**: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

## LESSONS LEARNED/major decisions from previous iterations (implement each if correct and applicable)
- global-1: Enforce CSRF tokens for all admin interfaces across artifacts because protect admin flows
- global-2: Consolidate a project security baseline and require explicit DevSecOps / Security entries per component (DevSecOps / Security)
- global-3: Require a Metric Owner field and mandate owner assignment for each potential metric to ensure instrumentation (Potential Metrics)

## Critical/High-severity issues (implement each recommendation if correct and applicable)
No critical/high severity issues known.

## Artifact-specific UNRESOLVED MED / LOW issues (implement each recommendation if correct and applicable)
[
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Email storage method conflict",
    "impact": "Medium",
    "knownIssue": "KnownIssue",
    "recommendation": "Align hashing vs encryption method; pick one and document"
  }
]

## Artifact-specific RESOLVED ISSUES (DO NOT re-introduce)
- GapID=0a5003: 1.1.1 UUID-0002 Missing rate-limit for submissions => Add rate-limit/backoff at API-Service
- GapID=9d77eb: 1.1.1 UUID-0005 Session rotation not specified => Implement session rotation and rotatedAt field
- GapID=2ac8a1: 1.1.1 UUID-0004 Server-side deletionNonce missing => Add deletionNonce TTL verification in API-Service
- GapID=5fe616: 1.1.0 Related Reqs placeholders => Populate Related Reqs with requirement IDs per row

## RESOLVED ISSUES in another artifacts (avoid re-opening)
- GapID=d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines => Add session/cookie flags, timeouts, MFA, consent, retention, audit
- GapID=7f6e8d: 1.1.1.1 Whole artifact CSRF token not specified cross-artifact => Add CSRF tokens or same-site anti-CSRF for admin flows
- GapID=2f71be: 1.1.1.1 FR-005 Decision metric lacks instrumentation owner => Assign instrumentation owner and source for rate-limit metric
- GapID=d0923d: 1.1.1 M-2 Email storage method conflict => Use deterministic encryption for emails

## PREVIOUS ARTIFACT VERSION (build on this; if “None”, create from scratch)
{
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; owner=Auth",
      "DevSecOps / Security": "Session cookie Secure/HttpOnly/SameSite=Strict; idle timeout PT30M; CSRF tokens for admin flows; per-feature checklist entry",
      "Related Reqs": "FR-025, FR-026, FR-027, FR-028, FR-029, FR-030"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills checklist entry",
      "Related Reqs": "FR-018"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttles <=1% PT30D; owner=SRE",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; per-feature checklist includes rate-limit tests",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Use time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; owner=Storage",
      "DevSecOps / Security": "Generate server-side UUIDv7; log id on create; include id in audit entries",
      "Related Reqs": "FR-005, FR-011"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0% over PT30D; rate-limit throttle rate >1% PT7D; owner=SRE",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; retention PT90D; checklist entry for alert tuning",
      "Related Reqs": "FR-012, FR-030"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); owner=Product",
      "DevSecOps / Security": "Field-level encryption/hashing at rest; TLS in transit; access audit; mask in exports; checklist entry for crypto tests",
      "Related Reqs": "FR-003, FR-010"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; owner=Product",
      "DevSecOps / Security": "Store consent timestamp and purpose in audit trail; expose opt-out; checklist entry for consent audit",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly (audit); owner=Storage",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; checklist entry for retention job recovery",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; owner=AdminUX",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; checklist entry for export masking",
      "Related Reqs": "FR-024"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; owner=Storage",
      "DevSecOps / Security": "Encrypt sensitive fields at rest; scoped DB roles; daily backups; checklist entry for role audits",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; Confirmed-deletes ratio >=99 % PT30D; owner=AdminOps",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on delete forms; per-feature checklist includes nonce TTL tests",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; owner=Security",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; checklist entry for sanitizer coverage",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; owner=Auth",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; session TTL PT8H; checklist entry for rotation verification and TTL",
      "Related Reqs": "FR-037"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Metric owner mapping \u2014 assign owners for decision metrics | # DEC-02: Session TTL PT8H \u2014 explicit rotation TTL | # DEC-03: CSRF tokens for admin \u2014 protect admin flows"
  }
}

## DEPENDENCIES (reflect any required updates in the new artifact)
{
  "clientSpec": "I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It\u2019s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.",
  "dependencies": [
    {
      "artifactIndex": "1.1.0",
      "artifactName": "Input",
      "columns": [
        "Input Item",
        "Details",
        "Related Reqs"
      ],
      "rows": [
        {
          "Input Item": "Client specification (summary)",
          "Details": "Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Anonymous feedback",
          "Details": "Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Optional email capture",
          "Details": "Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Submission timestamp",
          "Details": "Record ISO-8601 UTC timestamp for each submission and surface in admin UI",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Admin authentication",
          "Details": "Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Delete with confirmation",
          "Details": "Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Data protection for emails and credentials",
          "Details": "Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Privacy / GDPR notice",
          "Details": "Show brief notice when email requested covering usage, retention and opt-out; link to full policy",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Responsive cross-browser UI",
          "Details": "Accessible UI, keyboard navigable, responsive across desktop and mobile widths",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: submit feedback",
          "Details": "Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Initial user scenario: admin review",
          "Details": "Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: submission reliability",
          "Details": "Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Success metric: UI performance",
          "Details": "Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Identifier strategy",
          "Details": "Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Security baseline",
          "Details": "Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Rate-limit for submissions",
          "Details": "POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Session rotation policy",
          "Details": "Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "CSRF and anti-forgery",
          "Details": "Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Minimal DevSecOps checklist",
          "Details": "Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        },
        {
          "Input Item": "Instrumentation owner for rate-limit metric",
          "Details": "Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H",
          "Related Reqs": "[PLACEHOLDER-AUTO]"
        }
      ]
    },
    {
      "artifactIndex": "1.1.1.1",
      "artifactName": "Modules Components Description Table",
      "columns": [
        "Requirement ID",
        "Module",
        "Component",
        "Description",
        "Interface",
        "Potential Metrics",
        "V&V focus",
        "Related Reqs",
        "DevSecOps / Security",
        "Metric Owner"
      ],
      "rows": [
        {
          "Requirement ID": "FR-001",
          "Module": "Public Feedback Form",
          "Component": "Open feedback page (responsive)",
          "Description": "Serve responsive feedback page across desktop and mobile",
          "Interface": "I-1: GET /feedback page",
          "Potential Metrics": "Median FCP <=2.0 s PT30D; percentile: p50; source=RUM",
          "V&V focus": "Cross-browser rendering, accessibility",
          "Related Reqs": "FR-001",
          "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans",
          "Metric Owner": "Frontend"
        },
        {
          "Requirement ID": "FR-002",
          "Module": "Public Feedback Form",
          "Component": "Enter feedback text",
          "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
          "Interface": "I-2: feedback textarea",
          "Potential Metrics": "Validation error rate <=0.5% PT30D; source=Frontend logs",
          "V&V focus": "Input validation, XSS sanitization",
          "Related Reqs": "FR-002",
          "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans",
          "Metric Owner": "Frontend"
        },
        {
          "Requirement ID": "FR-003",
          "Module": "Public Feedback Form",
          "Component": "Optional email input",
          "Description": "Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS)",
          "Interface": "I-3: email input (optional)",
          "Potential Metrics": "% submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service",
          "V&V focus": "Email optionality, encryption correctness, contact_intent flag",
          "Related Reqs": "FR-003",
          "DevSecOps / Security": "Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access",
          "Metric Owner": "Product"
        },
        {
          "Requirement ID": "FR-004",
          "Module": "Public Feedback Form",
          "Component": "Show GDPR/privacy notice and consent checkbox",
          "Description": "Display brief email-use notice and consent capture when email requested",
          "Interface": "I-4: consent checkbox UI",
          "Potential Metrics": "Consent capture rate when email present 100% PT30D; source=Frontend",
          "V&V focus": "Consent recorded and auditable",
          "Related Reqs": "FR-004",
          "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit",
          "Metric Owner": "Product"
        },
        {
          "Requirement ID": "FR-005",
          "Module": "Public Feedback Form",
          "Component": "Submit feedback with ISO-8601 UTC timestamp",
          "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
          "Interface": "I-5: POST /feedback",
          "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs",
          "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
          "Related Reqs": "FR-005",
          "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts",
          "Metric Owner": "SRE"
        },
        {
          "Requirement ID": "FR-006",
          "Module": "Public Feedback Form",
          "Component": "Show submission confirmation",
          "Description": "Client shows success/failure message after submit",
          "Interface": "I-6: submission UI response",
          "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; source=RUM",
          "V&V focus": "User feedback and error handling",
          "Related Reqs": "FR-006",
          "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures",
          "Metric Owner": "Frontend"
        },
        {
          "Requirement ID": "FR-007",
          "Module": "Submission Processing",
          "Component": "Validate feedback payload server-side",
          "Description": "Server-side schema validation and duplicate detection",
          "Interface": "I-7: POST /feedback validation",
          "Potential Metrics": "Rejected payload rate <=1.0% PT30D; source=API-Service",
          "V&V focus": "Schema validation, duplicate suppression",
          "Related Reqs": "FR-007",
          "DevSecOps / Security": "Server-side validation; input shaping; request schema tests",
          "Metric Owner": "Backend"
        },
        {
          "Requirement ID": "FR-008",
          "Module": "Submission Processing",
          "Component": "Sanitize content for display",
          "Description": "Sanitize stored content to prevent XSS on admin views",
          "Interface": "I-8: sanitize pipeline",
          "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; source=Security scans",
          "V&V focus": "Sanitizer test coverage",
          "Related Reqs": "FR-008",
          "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans",
          "Metric Owner": "Security"
        },
        {
          "Requirement ID": "FR-009",
          "Module": "Submission Processing",
          "Component": "Mark contact_intent if email present",
          "Description": "Set contact_intent boolean when optional email provided",
          "Interface": "I-9: contact_intent flag in payload",
          "Potential Metrics": "Flag consistency 100% PT30D (audit); source=DB audit",
          "V&V focus": "Flag persistence, audit logs",
          "Related Reqs": "FR-009",
          "DevSecOps / Security": "Audit log on flag set; encrypted email field access controls",
          "Metric Owner": "Backend"
        },
        {
          "Requirement ID": "FR-010",
          "Module": "Submission Processing",
          "Component": "Encrypt email before persist",
          "Description": "Apply field-level envelope encryption (KMS) to emails prior to storage",
          "Interface": "I-10: crypto module",
          "Potential Metrics": "Encrypted-at-rest verified 100% (audit) PT30D; source=Security",
          "V&V focus": "Encryption key usage, KMS integration tests",
          "Related Reqs": "FR-010",
          "DevSecOps / Security": "KMS policy; key rotation; access limited to service role; decrypt audits",
          "Metric Owner": "Security"
        },
        {
          "Requirement ID": "FR-011",
          "Module": "Submission Processing",
          "Component": "Persist record with time-sortable UUID",
          "Description": "Persist feedback record with UUIDv7 primary id",
          "Interface": "I-11: DB insert API",
          "Potential Metrics": "Insert success rate >=99.0% PT30D; source=DB metrics",
          "V&V focus": "ID format, DB ACID write tests",
          "Related Reqs": "FR-011",
          "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit",
          "Metric Owner": "Storage"
        },
        {
          "Requirement ID": "FR-012",
          "Module": "Submission Processing",
          "Component": "Return success/failure to client",
          "Description": "Return clear HTTP status and error codes; retry-safe",
          "Interface": "I-12: POST /feedback response codes",
          "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; source=API-Service",
          "V&V focus": "Status code correctness, idempotency",
          "Related Reqs": "FR-012",
          "DevSecOps / Security": "Idempotency tokens where needed; structured error codes",
          "Metric Owner": "Backend"
        },
        {
          "Requirement ID": "FR-013",
          "Module": "Storage",
          "Component": "Store feedback records in SQL RDBMS",
          "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
          "Interface": "I-13: DB schema feedback table",
          "Potential Metrics": "DB write latency p95 <=200 ms PT30D; source=DB metrics",
          "V&V focus": "Schema correctness, access controls",
          "Related Reqs": "FR-013",
          "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes",
          "Metric Owner": "Storage"
        },
        {
          "Requirement ID": "FR-014",
          "Module": "Storage",
          "Component": "Encrypt sensitive fields at rest",
          "Description": "Encrypt emails and credentials at rest using field-level envelope encryption",
          "Interface": "I-14: encryption-at-rest policy",
          "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; source=Security audit",
          "V&V focus": "Encryption verification, key rotation tests",
          "Related Reqs": "FR-014",
          "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit",
          "Metric Owner": "Security"
        },
        {
          "Requirement ID": "FR-015",
          "Module": "Storage",
          "Component": "Apply least-privilege DB access",
          "Description": "DB accounts scoped by role; app uses minimal privileges",
          "Interface": "I-15: DB access roles",
          "Potential Metrics": "Role violation incidents =0 PT90D; source=IAM audit",
          "V&V focus": "Access control audits",
          "Related Reqs": "FR-015",
          "DevSecOps / Security": "IAM role reviews; automated permission drift alerts",
          "Metric Owner": "InfraSec"
        },
        {
          "Requirement ID": "FR-016",
          "Module": "Storage",
          "Component": "Retention policy P365D enforcement",
          "Description": "Automated deletion of records older than P365D unless exempt",
          "Interface": "I-16: retention job",
          "Potential Metrics": "Retention enforcement rate 100% monthly; source=Retention job logs",
          "V&V focus": "Retention job correctness, delete logs",
          "Related Reqs": "FR-016",
          "DevSecOps / Security": "Automated deletion job; deletion audit entries",
          "Metric Owner": "Storage"
        },
        {
          "Requirement ID": "FR-017",
          "Module": "Storage",
          "Component": "Audit-write deletion events",
          "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
          "Interface": "I-17: deletion audit log",
          "Potential Metrics": "Deletion audit entries 100% per delete; source=Audit store",
          "V&V focus": "Audit integrity and append-only writes",
          "Related Reqs": "FR-017",
          "DevSecOps / Security": "Append-only audit store; retention for audit logs",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-018",
          "Module": "Storage",
          "Component": "Periodic backups of dataset",
          "Description": "Perform regular backups with retention and restore tests",
          "Interface": "I-18: backup schedule",
          "Potential Metrics": "Daily backup success rate >=99.0% PT30D; source=Backup logs",
          "V&V focus": "Backup restore verification",
          "Related Reqs": "FR-018",
          "DevSecOps / Security": "Encrypted backups; restore drills; access controls",
          "Metric Owner": "Storage"
        },
        {
          "Requirement ID": "FR-019",
          "Module": "Admin UI",
          "Component": "Admin login screen (responsive)",
          "Description": "Responsive admin login with session handling",
          "Interface": "I-19: GET/POST /admin/login",
          "Potential Metrics": "Median admin login time <=2.0 s PT30D; source=RUM",
          "V&V focus": "Auth flow and UI accessibility",
          "Related Reqs": "FR-019",
          "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms; TLS",
          "Metric Owner": "AdminUX"
        },
        {
          "Requirement ID": "FR-020",
          "Module": "Admin UI",
          "Component": "List feedback sorted by timestamp",
          "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
          "Interface": "I-20: GET /admin/feedback?sort=time",
          "Potential Metrics": "List latency p95 <=300 ms PT30D; source=API-Service",
          "V&V focus": "Sorting correctness, pagination",
          "Related Reqs": "FR-020",
          "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions",
          "Metric Owner": "AdminUX"
        },
        {
          "Requirement ID": "FR-021",
          "Module": "Admin UI",
          "Component": "View full feedback details",
          "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
          "Interface": "I-21: GET /admin/feedback/{id}",
          "Potential Metrics": "Detail retrieval success 100% PT30D; source=API-Service",
          "V&V focus": "Decryption/display rules, masking",
          "Related Reqs": "FR-021",
          "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit; CSRF protection",
          "Metric Owner": "AdminUX"
        },
        {
          "Requirement ID": "FR-022",
          "Module": "Admin UI",
          "Component": "Delete feedback with confirm dialog",
          "Description": "Admin delete requires explicit confirm and second-step verification",
          "Interface": "I-22: DELETE /admin/feedback/{id}",
          "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; source=Audit logs",
          "V&V focus": "Confirm dialog enforcement, race conditions",
          "Related Reqs": "FR-022",
          "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI",
          "Metric Owner": "AdminOps"
        },
        {
          "Requirement ID": "FR-023",
          "Module": "Admin UI",
          "Component": "Log deletion actor ID and ISO-8601 timestamp",
          "Description": "Record actor id and timestamp in audit log on delete",
          "Interface": "I-23: deletion audit entry",
          "Potential Metrics": "Audit entry present 100% per deletion; source=Audit store",
          "V&V focus": "Audit consistency and tamper-evidence",
          "Related Reqs": "FR-023",
          "DevSecOps / Security": "Immutable audit store; retention and access controls",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-024",
          "Module": "Admin UI",
          "Component": "Search and export feedback list",
          "Description": "Admin can search and export CSV with permission checks",
          "Interface": "I-24: GET /admin/feedback?query & export",
          "Potential Metrics": "Export success rate >=99.0% PT30D; source=API-Service",
          "V&V focus": "Permission enforcement, export data masking",
          "Related Reqs": "FR-024",
          "DevSecOps / Security": "Export masking; RBAC; export job audit; CSRF tokens on export actions",
          "Metric Owner": "AdminUX"
        },
        {
          "Requirement ID": "FR-025",
          "Module": "Admin Authentication",
          "Component": "Authenticate admins via OIDC IdP capability",
          "Description": "Admin auth via OIDC-capable IdP; support MFA",
          "Interface": "I-25: OIDC flow endpoints",
          "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; source=Auth logs",
          "V&V focus": "OIDC flow conformance, token validation",
          "Related Reqs": "FR-025",
          "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-026",
          "Module": "Admin Authentication",
          "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
          "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
          "Interface": "I-26: session cookie policy",
          "Potential Metrics": "Cookies with flags 100% (audit) PT30D; source=Auth audit",
          "V&V focus": "Cookie attribute verification",
          "Related Reqs": "FR-026",
          "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-027",
          "Module": "Admin Authentication",
          "Component": "Idle session timeout PT30M",
          "Description": "Idle admin sessions expire after PT30M inactivity",
          "Interface": "I-27: session timeout policy",
          "Potential Metrics": "Idle session expiry enforcement 100% daily audit; source=Session store",
          "V&V focus": "Timeout enforcement",
          "Related Reqs": "FR-027",
          "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-028",
          "Module": "Admin Authentication",
          "Component": "Enforce MFA for admin accounts",
          "Description": "Require MFA for all admin logins",
          "Interface": "I-28: MFA enrollment and challenge",
          "Potential Metrics": "MFA enabled rate 100% for admin accounts; source=Auth",
          "V&V focus": "MFA enforcement tests",
          "Related Reqs": "FR-028",
          "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-029",
          "Module": "Admin Authentication",
          "Component": "Role-based access control for UI actions",
          "Description": "RBAC for admin UI actions and exports",
          "Interface": "I-29: RBAC policy checks",
          "Potential Metrics": "Unauthorized access attempts =0 PT90D; source=Auth audit",
          "V&V focus": "RBAC policy correctness",
          "Related Reqs": "FR-029",
          "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-030",
          "Module": "Admin Authentication",
          "Component": "Audit admin login and privilege changes",
          "Description": "Log admin login events and role changes with actor id and timestamp",
          "Interface": "I-30: admin audit log",
          "Potential Metrics": "Admin audit entries 100% per event; source=Audit store",
          "V&V focus": "Audit completeness and integrity",
          "Related Reqs": "FR-030",
          "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-031",
          "Module": "Privacy & GDPR",
          "Component": "Display email-use notice when email requested",
          "Description": "Show notice explaining email use, retention and opt-out",
          "Interface": "I-31: privacy notice UI",
          "Potential Metrics": "Notice shown on email field 100% (UI test) PT30D; source=UI tests",
          "V&V focus": "Notice visibility and content accuracy",
          "Related Reqs": "FR-031",
          "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy",
          "Metric Owner": "Product"
        },
        {
          "Requirement ID": "FR-032",
          "Module": "Privacy & GDPR",
          "Component": "Capture consent and contact-intent flags",
          "Description": "Store consent and contact_intent flags with timestamp and actor id",
          "Interface": "I-32: consent storage API",
          "Potential Metrics": "Consent recorded 100% when checkbox checked; source=DB audit",
          "V&V focus": "Consent auditability",
          "Related Reqs": "FR-032",
          "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit",
          "Metric Owner": "Product"
        },
        {
          "Requirement ID": "FR-033",
          "Module": "Privacy & GDPR",
          "Component": "Provide data access and deletion request process",
          "Description": "Admin process and API to fulfill access/deletion requests",
          "Interface": "I-33: data subject request endpoints",
          "Potential Metrics": "DSR fulfillment time <=30 days per request; source=Compliance logs",
          "V&V focus": "Request verification and completion",
          "Related Reqs": "FR-033",
          "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-034",
          "Module": "Privacy & GDPR",
          "Component": "Support data deletion upon verified request",
          "Description": "Delete or anonymize records on verified deletion requests, log action",
          "Interface": "I-34: verified delete workflow",
          "Potential Metrics": "Verified deletions completed within 30 days; source=Audit store",
          "V&V focus": "Deletion verification and audit",
          "Related Reqs": "FR-034",
          "DevSecOps / Security": "DeletionNonce verification; deletion audit entries",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-035",
          "Module": "Privacy & GDPR",
          "Component": "Expose retention period to admins",
          "Description": "Display retention policy and next-delete dates in admin UI",
          "Interface": "I-35: retention info UI",
          "Potential Metrics": "Retention info accuracy 100% (audit) PT30D; source=Storage",
          "V&V focus": "Retention metadata correctness",
          "Related Reqs": "FR-035",
          "DevSecOps / Security": "Retention metadata generation; UI access controls",
          "Metric Owner": "Storage"
        },
        {
          "Requirement ID": "FR-036",
          "Module": "Privacy & GDPR",
          "Component": "Record consent and processing purpose in audit logs",
          "Description": "Append consent and processing purpose to audit trail immutably",
          "Interface": "I-36: consent audit entries",
          "Potential Metrics": "Consent audit entries 100% per consent; source=Audit store",
          "V&V focus": "Audit linkage and immutability",
          "Related Reqs": "FR-036",
          "DevSecOps / Security": "Append-only audit; retention and access control",
          "Metric Owner": "Compliance"
        },
        {
          "Requirement ID": "FR-037",
          "Module": "Admin Authentication",
          "Component": "Session rotation policy and rotatedAt field",
          "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
          "Interface": "I-27b: session rotation endpoint /session/rotate",
          "Potential Metrics": "Session rotation performed 100% on privilege change; source=Auth logs",
          "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
          "Related Reqs": "FR-037",
          "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests",
          "Metric Owner": "Auth"
        },
        {
          "Requirement ID": "FR-038",
          "Module": "Submission Processing",
          "Component": "DeletionNonce TTL verification",
          "Description": "Verify deletionNonce TTL before accepting admin delete requests",
          "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
          "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; source=API-Service",
          "V&V focus": "Nonce TTL correctness, rejection behavior",
          "Related Reqs": "FR-038",
          "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete",
          "Metric Owner": "AdminOps"
        }
      ]
    }
  ]
}
(<end of project data block>)

(<start of additional instructions block:>)
# QUICK SELF-CHECK BEFORE JSON
  • Internal consistency – ensure no two rows/cells contradict each other and every identifier used in one place resolves unambiguously elsewhere in this artifact.
  • Column‑set guard – whenever a column belongs to a mandatory pair/triplet (e.g. ID ↔ Description ↔ Related Reqs), make sure **all** partner columns are non‑empty **unless Special instructions allow blank** (use `[PLACEHOLDER-AUTO]` only when truly unknown).
  • Sanity scan – reject impossible values (negative latency, success > 100 %, mutually exclusive limits, dates before 1970-01-01 or far beyond project horizon, etc.).
  • Identifier sanity – verify every `FR-* / NFR-* / US-*` value follows the correct pattern **and** references an existing upstream requirement **and** uses correct identifier from upstream requirement for full traceability.
  • Row-count cap – ensure total rows **≤ 200**.
  • Verify every cell in a column whose header contains “Metric”/“Metrics” is quantitative; otherwise omit the row and add an unresolvedNote.

# ASSERT all columns present, PKs unique, no blank mandatory cells, all rows are populated (unless>200).

        ─────────────  JSON OUTPUT SPEC  ─────────────
        Return **exactly one** valid JSON object of this form **and nothing else** (do **not** include the rubric or tracker):

        {
          "artifactIndex": "1.1.2",
          "artifactName": "Domain Context Table",
          "columns": ["Category", "Details", "Quality Attributes", "Potential Metrics", "DevSecOps / Security", "Related Reqs", "Metric Owner"],
          "rows": [
            {
              "<columnName>": "<value>"
            }
          ],
          "metadata": {
            "notesFromLLM": ""
            /* omit the line below entirely when no gaps remain blocked */
            "unresolvedNotes": {}
          }
        }

        // Each key in the object inside "rows" **must** be one of the column names listed above.
        // Add the "unresolvedNotes" property **only** when at least one gap remains blocked.
        // Example for unresolvedNotes entry:
        //   "unresolvedNotes": { "7f3942": "Spec conflict: anonymity vs user IDs" }

        // Simplified Example (delete in real run)
        {
          "artifactIndex": "12",
          "artifactName": "API-Spec",
          "columns": ["id","verb","path","successCode"],
          "rows": [
            { "id":"END-01", "verb":"GET", "path":"/health", "successCode":"200" }
          ],
          "metadata": { "notesFromLLM": " DEC-01: XXX chosen — to comply with... | # DEC-02: YYY identifiers — sortable and time-based" }
        }

# Before sending JSON, confirm:
 • Every client-specification bullet / numbered rule maps to at least one row/column.
 • Every CRITICAL/HIGH bullet (if any) is either implemented or logged in `metadata.unresolvedNotes`.
 • If correct and applicable, all open issues and lessons learned must be implemented.
 • No duplicate or obsolete rows remain; PKs are unique; row count ≤ 200.
 • Run a self-check: replace any banned meta words (“apply”, “update deps”, “resolve issue”, “align with spec”, etc.) found in **rows** with concrete domain content.
 • If a column name contains “Related” or “Trace”, its value must be **non-empty** whenever a CRITICAL/HIGH bullet demands trace links; otherwise treat the gap as Unresolved.
 • For **decision** metrics, verify presence of statistic, threshold, unit, and window; add population/source when available.
 • For **vanity/trend** metrics, a quantitative descriptor is sufficient unless the spec mandates a threshold.

 • `metadata.notesFromLLM` must hold 1-5 crumbs (each ≤ 65 chars, total ≤ 200 chars) recording new decisions/info-triggers.

# Objective reminder: to create or recreate *current artifact* 1.1.2 (Domain Context Table) from client specifications, dependencies, lessons and open issues:
 1 Analyse scope → 2 Activate domain context → 3 Isolate spec/dependency facts → 4 Detect blind spots/ambiguities and infer safe defaults via silent scratch-pad → 5 Organise data into the table’s exact columns → 6 Deduplicate while closing CRITICAL/HIGH gaps (if corrrect and applicable) and blocking regressions → 7 Map every necessary entity to primary-keyed rows at high granularity → 8 Integrate all decisions + metadata → 9 Output the compliant JSON artifact.

# **Final Check Reminder** – The senior reviewer will re-run the rubric. If *any* Critical/High gap remains open, or < 80 % of Med/Low closed (while being correct and applicable), you will be required to redo this iteration.

# No extra text outside JSON, no triple backticks or code fencing.

# Stop after outputting the JSON object and nothing else.
        
DEBUG (LLMClient): GPT Response:
 {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs",
    "Metric Owner"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; admin auth failure rate <=1.0 % PT30D; source=Auth logs",
      "DevSecOps / Security": "OIDC capability; MFA enforcement; Secure/HttpOnly/SameSite=Strict; CSRF tokens for admin flows; secret rotation",
      "Related Reqs": "FR-025, FR-026, FR-028, FR-029, FR-030",
      "Metric Owner": "Auth"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; restore drill success >=95 % PT90D; source=Backup logs",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills; backup retention policy",
      "Related Reqs": "FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttle rate <=1 % PT30D; source=API-Service logs",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; request logging; vuln scans",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; source=DB/ID-gen logs",
      "DevSecOps / Security": "Server-side UUIDv7 generation; include id in audit entries; monitor collisions",
      "Related Reqs": "FR-005, FR-011",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0 % over PT30D; dashboard RBAC audit PT90D; source=Monitoring",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; metrics retention PT90D; pipeline scans",
      "Related Reqs": "FR-012, FR-030",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); encrypted-at-rest verified 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Deterministic field-level envelope encryption for emails; TLS in transit; access audit; mask in exports",
      "Related Reqs": "FR-003, FR-010, FR-009",
      "Metric Owner": "Security"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; source=DB audit",
      "DevSecOps / Security": "Store consent timestamp and purpose immutably; expose opt-out; consent audit trails",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036",
      "Metric Owner": "Product"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly; verified deletion completion <=30 days per request; source=Retention logs",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; deletionNonce TTL PT15M; RBAC for delete actions",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; masked fields present 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; audit export events; CSRF tokens on export actions",
      "Related Reqs": "FR-024",
      "Metric Owner": "AdminUX"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; insert success rate >=99.0 % PT30D; source=DB metrics",
      "DevSecOps / Security": "Encrypt sensitive fields at rest via envelope encryption; scoped DB roles; daily backups; TLS to DB",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; confirmed-deletes ratio >=99 % PT30D; source=API-Service and Audit store",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on admin forms",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038",
      "Metric Owner": "AdminOps"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; source=Security scans",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; sanitizer library pinning",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012",
      "Metric Owner": "Backend"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; source=Auth logs",
      "DevSecOps / Security": "Rotate tokens on privilege change; rotation endpoint; session TTL PT8H; audit rotation events",
      "Related Reqs": "FR-037",
      "Metric Owner": "Auth"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Deterministic email encryption — eliminates hash vs encrypt conflict"
  }
}
[INFO] Found 1 unresolved issues carried from the previous iteration.
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
(<start of instruction block:>)
# Agent Reminders
 • Produce only valid JSON output in this turn.
 • Think step-by-step privately before outputting JSON.
 • Validate enum tokens & word-limits **before** you emit JSON.
 • Minimise false-positives and false-negatives — raise only **evidence‑backed** issues; for AOB/CPI, prefer **one** Low `cross‑artifact` cluster over silence when uncertain.
 • **Evidence‑first (non‑overridable):** Run Rule‑3 with **semantic match** and the KnownIssue **resolution check** **before** any bias or Zero‑issues guard. Treat a match as satisfied **only** when it shows **primitive‑level sufficiency** and is **owner‑tier anchored**; **generic/category words do not count** as semantically equivalent. If remediation is visible, **do not raise**.
 • **Bias precedence (AOB/CPI/ghost/phase‑end) — after evidence‑first:** When unsure **and** applicability is **explicitly** evidenced, raise **one** Low `cross‑artifact` **cluster‑summary** item; **do not** also fire Zero‑issues guard; otherwise skip.
 • **Zero‑issues guard (safe):** Run **only if** Bias‑precedence did **not** fire. Fire when (a) a trigger has **explicit positive applicability evidence**; (b) no in‑artifact primitive‑sufficient match exists; and (c) Rule‑1/Rule‑2 do not defer. Emit **at most one** Low cluster‑summary item — **returning an empty list is permitted**.
 • **Owner‑tier anchoring (mandatory):** Anchor to the **owning tier** (Renderer / API‑Service / Auth‑Session / Data/Logging / Datastore). **Columns and category labels are not owners.** If the precise target is unclear, recommend by **owner‑tier** and mark `cross‑artifact`.

# Role: You are a senior software-engineering reviewer of documentation.

# Objective: Assess the current artifact against the client specifications, other dependencies and unresolved issues, apply the ABSOLUTE RULES + REVIEW-TRIGGER CHECKLIST, and return exactly one valid JSON object ("questionText", "identifiedIssues").

# Banners:
 🚫 NEVER raise traceability gaps for artifacts 1.1.0-1.1.4.
 ⚠️ Defer **only when** Rule‑1’s **two‑step test conclusively passes**; otherwise apply `cross‑artifact` (see 🔒 Baseline Non‑Deferral).
 🚫 Rule-1 banner – **Defer only if** the missing content is explicitly scheduled **and** the upcoming artifact names a **precise owner**; otherwise **raise** as `cross‑artifact` (AOB/CPI are non‑deferrable).

 🔒 Baseline Non‑Deferral — Do NOT defer ownerless baselines (AOB/CPI/ghost‑dependency set) based on generic categories or catch‑all placeholders.
     Deferral requires a **precise owner** in the same phase: a **named** mechanism/owner/section that can actually host the primitive; **category labels** or broad domains do **not** count.


 🟧 CUSTOM-INSTR banner – Treat every bullet in **Artifact-specific custom instructions**
     (see Project-data block §6) as binding scope for *this* artifact.
     • If the Current Artifact breaks a mandatory custom instruction ⇒ raise a gap.
     • If a custom instruction merely “encourages” something and you are uncertain,
       apply Rule-5 (Evidence threshold): raise **only** when you have clear evidence
       it will harm coverage or compliance; otherwise defer.

 🔖 Definitions (shorthands used below)
 • **AOB (Always‑On Baselines):** CSRF for state‑changing requests **in authenticated, cookie‑backed browser flows**; **throttling for public/unauthenticated write endpoints**; rate‑limit/lockout/backoff on auth; cookie flags; session rotation + idle/absolute timeouts + fields (`createdAt`,`lastActivityAt`,`expiresAt`,`rotatedAt`); MFA method/secret/enrolment/recovery; RBAC model (Role/Permission/Assignment); output encoding for **rendered** user content; GDPR consent/DSAR/retention evidence; audit‑log minimums (`actorId`,`action`,`target`,`ts`,`tamper‑evidence pointer`);
   **session scheme invariant** (either persisted session records with lifecycle fields, or stateless tokens with explicit claims/TTL/rotation + cookie flags);
   **identifier hygiene** (do not password‑hash identifiers; **apply only when confidentiality/obfuscation and uniqueness are both explicitly required** — use deterministic encryption or a documented alias + lookup; **never infer uniqueness**); deterministic encryption or documented lookup for UNIQUE+encrypted; server‑side destructive‑action confirmation (`deletionNonce`+TTL).
   **Scope qualifiers:** apply **CSRF only to authenticated, cookie‑backed state‑changing browser requests**; apply **throttling only to public/unauthenticated write endpoints**; expect **output encoding only where user content is rendered**.
   **Qualifier handling rule (AOB/CPI):** When qualifier evidence (auth/audience/transport/destructive‑semantics/publicness) is **unclear**, do **not** suppress the primitive — **raise Low** as `cross‑artifact` for the missing primitive and state that context is unknown. **Suppress only** when there is **positive evidence** the qualifier does **not** apply.
   **Token‑transport qualifier (CSRF):** when endpoints use bearer tokens in `Authorization` header **and** no ambient cookies are sent, CSRF is **not required**; if transport is unknown, apply the Qualifier handling rule.   **State‑change evidence qualifier:** do **not** infer mutation from HTTP method alone; require explicit evidence of server‑state change; treat `GET`/`HEAD` as non‑mutating unless the spec explicitly contradicts.
   **Destructive‑action scope:** require `deletionNonce` only for destructive, irreversible, or high‑blast‑radius operations.
   **Privacy scope qualifier:** raise GDPR evidence only when personal data processing is in scope; if unclear, raise a `cross‑artifact` gap to document data categories and sources.
 • **Owner‑Tier Map (anchoring hint):** Renderers → output encoding; API/Service layer → CSRF, rate‑limit, destructive‑action confirmation; Auth/Session layer → cookie flags, rotation, timeouts, session scheme; Data/Logging layer → audit/consent schemas; Datastore → uniqueness/indexing/encryption trade‑offs.
 • **CPI (Capability‑Prerequisite Invariant):** when a capability is asserted anywhere (current artifact or dependency/spec), the enabling substrate must exist **in this phase** as **either** (a) persisted primitives/fields/schemas **or** (b) an explicit binding to an external authoritative system **with a documented mapping/owner**.
 • **Precise owner:** a named field/entity/section, not a generic column.

# ABSOLUTE RULES — obey these before anything else:
**When instructions conflict, apply ABSOLUTE RULES → Evidence‑first **(apply Generic≠specific and owner‑tier sufficiency before suppression)** → Bias precedence → global defaults.**

 0. **Rule-0 – Custom-instruction supremacy (local)**
    For this artifact only, instructions in the “Artifact-specific custom instructions”
    block carry the same weight as the Client Specification.
    • Obey them unless they conflict with legal/compliance constraints
      or a higher-level requirement.

 0.1 **Cross‑artifact exception (ownerless/global requirement)**
   Raise a gap when a requirement is in the spec/dependency and:
     • has **no precise owner** in remaining 🟧 Upcoming artifacts **in this phase**, **or**
     • its prerequisites must live in the **current artifact** (CPI).
   Treat AOB and instrumentation hooks as **ownerless** unless a downstream artifact in the **same phase** names a precise owner. Include the phrase `cross‑artifact` in the shortDescription to make scope explicit.

 1. **Rule-1 – No duplicate coverage, silent deferral (with invariants)**
   **Phase‑end clause:** When no upcoming artifacts remain in this phase or it is the **last mini‑iteration**, **do not defer** CPI/AOB/**ghost‑dependency** topics **or critical‑path `TBD`/`to be selected` decisions**; raise a gap if unresolved.
   **Two‑step deferral test (must pass conclusively):** Defer **only if** an upcoming artifact in this **phase** both (a) **can own** the topic and (b) names a **precise owner**. If either (a) or (b) is **not conclusively satisfied**, **do not defer** — **raise now** as `cross‑artifact` when locus is unclear. Can own requires the upcoming artifact to list the exact column/section that would hold the primitive and a named owner; category labels are insufficient.
   If the topic **will** be handled by any artifact listed in **Upcoming artifacts in this phase** → defer **only if** the upcoming artifact can actually **own** that topic type (matching abstraction level/column‑set). Otherwise, **do not defer**.
   **Exceptions (raise instead of deferring; non‑overridable):**
    • **CPI:** capability asserted in current artifact **or** dependency/spec ⇒ require its primitives/fields/protocols now; raise a gap naming both sides, locator anchored to current artifact.
    • **AOB:** never defer ownerless baseline items.
    • **Ghost‑dependency:** treat as ownerless unless an upcoming artifact **explicitly** names the defining artifact/owner; do **not** defer to generic categories.
    • **Baseline checklist (always‑on):** apply AOB whenever the artifact (a) owns relevant entities/flows or (b) references state‑changing endpoints/UI rendering — not only when a `Security/Compliance` column exists.
    • Matches Rule‑0.1 (ownerless/global requirement).
    • Typical cases: trace-columns, KPI tables, detailed metrics, test plans, or any content explicitly named in an upcoming artifact.
    • When you skip an issue under Rule-1, write **DEFERRED** in your internal checklist (do not output).
    • When Rule-1 applies, simply skip the issue. Do **not** list such issue in `identifiedIssues`
   _Note:_ “None”/empty **Upcoming** list means phase‑end; apply the phase‑end clause strictly.

 2. **Rule-2 – Early-artifact traceability freeze**
    • For artifacts 1.1.0 → 1.1.4 do **not** raise *any* traceability or upstream-ID gap.
       (Trace columns are intentionally absent until artifact 1.1.4.1 and later.)
    • Other gap types (spec mis-match, metric format, etc.) are still in scope.
    • **Post‑1.1.4 safeguard:** require **phase‑wide ID stability** — the same requirement ID keeps its meaning across artifacts; drift is a **CrossArtifactGap** under Trigger 7.
    • **Post‑1.1.4 mandatory sweep:** for any artifact ≥ 1.1.4.1, perform an **ID‑stability sweep** vs earlier artifacts and the NFR catalogue; if drift is found, raise under Trigger 7 using an allowed `gapType` (typically `MissedRequirement`) and include the phrase `cross‑artifact` in the shortDescription

 3. Rule-3 – Positive-evidence check
    • Before you record any gap or excess, actively search the *Custom-instructions block*, the Client Specification, all Dependency artifacts, and the Current Artifact **semantically** (synonyms/variants; not exact substrings), including indirect links across artifacts (e.g., FR → WF → US). Accept singular/plural, hyphenation, and tense variants.
    • If matching evidence is already inside the Current Artifact and is of adequate quality, **primitive‑level sufficiency**, detail, and is not conflicting ⇒ the requirement is satisfied → do NOT raise a gap.
    • If the evidence exists only in Dependencies (or another approved artifact) but the requirement should appear in the Current Artifact — this includes
      • requirements marked mandatory, and
      • requirements labelled optional in the Client Specification when they are already documented elsewhere — then the Current Artifact is missing expected content ⇒ you MUST raise a gap (e.g., “Missing mandatory column” or “Optional feature absent”).
    • Raise this gap **only if the missing or conflicting content is something the *Current Artifact* is expected to cover** (e.g., don’t flag functional-feature gaps inside a DevSecOps table).
    • You may skip the issue only when Rule-1 silent deferral and/or the Rule-2 traceability waiver explicitly applies.
    • Cite the supporting evidence line in your private chain-of-thought; do not output it.
    • Ignore incidental hits (unrelated words that merely match the search term) and continue searching.
    • **Context propagation:** When the artifact states a scope‑setting fact once (e.g., cookie sessions, personal data in scope), assume it applies to related rows unless locally contradicted; use it to set/clear qualifiers.
    • **Cross‑dependency affirmation (non‑overridable):** If a non‑conflicting dependency asserts a primitive with concrete mechanism/owner and the current artifact neither contradicts nor narrows it, treat as satisfied for FP‑avoidance unless the Current Artifact **must host** a CPI primitive.
    • **Generic phrases do not satisfy specific primitives** (**overrides semantic‑match suppression**; require a concrete mechanism/owner/parameter for satisfaction):
      – `input validation` ≠ output encoding for rendered content
      – `encryption at rest` ≠ password hashing; ≠ deterministic encryption for UNIQUE lookups
      – `RBAC` (unspecified) ≠ declared roles/permissions model
      – `security baseline` mention ≠ CSRF token/nonces for state‑changing requests
      – `session lifecycle`/cookie flags ≠ **idle** and **absolute** session timeouts
      – `rate limit` mention without thresholds/policy ≠ brute‑force/lockout/backoff control
    • **Qualifier handling (AOB/CPI):** When qualifier evidence is **unclear**, **do not suppress**; raise **Low** as `cross‑artifact` and state the uncertainty. **Suppress only** with positive evidence of non‑applicability.

 4. **Rule-4 – Duplicate-ID suppression** – *Each* `gapID` may appear **once only** in `identifiedIssues`; if the same underlying defect affects several loci, keep **one row** and set the broadest locator.
    • If evidence is not found ➜ omit the issue or create a new gapID (do **not** reuse).
    • Whole-vs-row convention:
      – If a **Whole-artifact** gap already exists **and** the problem now occurs *only* in a specific row/column ➜ **reuse the same gapID** **and update the locator** to that row/column (e.g. change `Whole artifact` → `I-07`).
      – If a **row/column** gap exists and you now find the issue affects the **entire artifact** ➜ **reuse the same gapID** but change the locator to `Whole artifact`.
      – **In both cases:** never create an additional gapID for the same underlying problem.

 5. **Rule-5 – Evidence threshold (anti-false-positive)**
    • Rule-5 works in addition to Rule-3; perform the substring evidence search first.
    • Raise a finding **only** when at least one of the following holds:
      – Direct mismatch with Client Specification.
      – Conflict with a non-conflicting dependency.
      – Failing check under the Review-Trigger list.
    • If evidence is borderline or speculative, *defer* the issue instead of raising it.
    • **Bias rebalancing (overrides global default):** In **Security, Compliance, Feasibility/Implementability**, treat *false negatives as worse*; it is acceptable to raise on widely‑accepted baselines even if not verbatim in the spec (see Cross‑cutting Baselines).
    • If a metric is partially specified yet still **interpretable** (clear unit or window present) and no spec conflict exists, **prefer skip or Low impact** over raising a formal gap.
    • When Trigger‑9 conditions are met for **decision** metrics, raise a KPI‑FORMAT gap regardless.
    • When a baseline primitive is **absent** from visible evidence, raise **at least Low** impact with a concrete locator or `cross‑artifact` if locus is unclear; do **not** skip due to qualifier uncertainty.
    • **Baseline checklist** (apply whenever the artifact **defines or references endpoints/flows or persistent data**, not only when a `Security/Compliance` column exists):
      CSRF for state‑changing requests; rate‑limit/lockout thresholds; cookie flags (HttpOnly/Secure/SameSite);
      session rotation plus idle/absolute timeouts; MFA lifecycle (enroll/reset/recovery); output encoding for rendered user content;
      **throttling for unauthenticated write endpoints**.

 6. **Rule-6 – Output hygiene**
    • The artifact must contain exactly one JSON object and **no** Markdown, code-fencing, or scratch-pad remnants.

 7. **Rule‑7 – Metric-KPI guard (evidence‑aware, must‑run)**
    • Apply this check **only** to **decision/target** metric fields.
    • A cell is a gap **only** if it lacks any or several elements: **statistic/threshold/unit/window and instrumentation owner**, while there was enough information in clientspecs and dependencies to present each element.
    • **Metric–type coherence:** flag as a gap when the **statistic type does not match the measure type** (e.g., percentile on Boolean outcomes; `success rate p99`).
    • If TBD / N/A / Not required/ etc. was used in metric field - that is ok, do not raise a gap, unless TBD / N/A / Not required/ etc. are incorrect.
    • For **vanity/trend** fields, treat KPI completeness as **advisory**; do not raise unless it contradicts the spec or blocks decisions or not actionable.
    • Accept equivalent phrasings for windows/units/statistics (e.g., monthly/weekly/rolling 30 d; %, ms; success rate/mean/p95). Do not accept incoherent combinations per previous bullet.
    • If invalid, fire the KPI-FORMAT trigger (see list) and raise a gap.
    • Instrumentation owner is mandatory for decision metrics; optional for vanity/trend unless explicitly required by spec.
    • **Observability/fitness:** reject **unmeasurable or behavior‑blended** KPIs.
      – Ban objectives like `Zero security breaches in 30 d` (replace with system SLO surrogates).
      – Split user behavior from system reliability (avoid “admin login success rate” as a system KPI).



#Empty cell policy
## Cell can not be completely empty. If column truly does not apply to this row/ column in general, but the spec makes it optional for this row/ spec/dependencies don’t give enough to set a value safely/ a required value is known to be needed but not yet decided  - cell must be populated by creator prompt with N/A/ Not required/ Insufficient data/ TBD.
## Failure to follow this policy by creator prompt is low impact issue.

# Severity guidance
• Critical — Spec/security/legal conflict or blocked core flow; unimplemented CRITICAL/HIGH mandatory fix; Decision metric non‑actionable on a release‑critical path
• High — Major decision quality or coverage risk (e.g., conflicting requirements, broken PK uniqueness, cross-artifact contradiction without Rule‑1 deferral)
• Medium — Actionable but not release‑blocking (e.g., ambiguous values with safe defaults, inconsistent units, incomplete but interpretable Decision metric)
• Low — Stylistic/orthographic/format nits; naming drift; vanity/trend completeness suggestions; acceptable placeholders used correctly
• **Impact calibration for baselines:** Unknown auth‑context + absent baseline ⇒ **Low**; named state‑changing endpoint without control ⇒ **Medium**; explicit public unauthenticated write without throttling ⇒ **High**
• **Unknown‑context policy (aligned with qualifiers):** For AOB/CPI, when applicability is unclear **raise Low** `cross‑artifact` and state the uncertainty; **suppress only** with positive evidence of non‑applicability.

# SCOPE-OF-REVIEW MATRIX (hard guardrails)
# Derive allowed topics from the Current Artifact's column set and the official table catalog.
# If the official table catalog is absent from Dependencies, treat only the 🟧 Upcoming artifacts in this phase as authoritative for Rule‑1 deferral.
# If a topic is not owned by the current schema, apply Rule‑1 and SKIP — **except**:
# • CPI: current artifact must host prerequisite primitives/fields for a capability asserted elsewhere → in scope (anchor to current artifact).
# • AOB: always in scope unless a precise owner is named downstream in this phase.
# **Cross‑artifact invariants:** Even if owned elsewhere, you **must** raise a gap marked `cross‑artifact` (use an allowed `gapType`, typically `MissedRequirement`) when the current artifact makes an assertion that requires undefined data/primitives elsewhere (see Rule‑1 exceptions).
# Examples:
# - For 1.1.0 "Input": in-scope = required rows present; column presence; internal consistency;
#   high-level coverage vs ClientSpec. Out-of-scope = metrics, security/control details, test plans,
#   trace links → DEFER to artifacts that own those columns (e.g., 1.1.2 "Domain Context" → "Potential Metrics").
# - For 1.1.2 "Domain Context": "Potential Metrics" cells must be quantitative KPIs (Rule-7).

# DETERMINISTIC DEFERRAL (augment Rule-1)
# Build a topic→column map from the official table catalog **in Dependencies** and the Upcoming artifacts (names + column headers).
# Require an explicit matching **column** in the upcoming artifact to defer.
# If a candidate topic maps to an Upcoming column and will be most likely implemented there, DROP the issue **only if** that artifact can legitimately **own** it (same abstraction level/column‑set). DROP **unless** it is:
#   • a capability‑prerequisite invariant needed by the current artifact, or
#   • an ownerless cross‑cutting baseline (security, GDPR evidence, instrumentation).

# EVIDENCE-ANCHOR REQUIREMENT (augment Rule-3)
# Before recording any issue, privately locate:
#  (1) the expected column in Current Artifact; and
#  (2) the strongest matching substring in Current Artifact.
# If (2) exists and is adequate-quality → DO NOT raise the issue.
# **Mis‑anchor check:** confirm the chosen locator **owns** the control per the Owner‑Tier Map; if not, **relocate** or mark `cross‑artifact`; do **not** attach controls to non‑owning components.
# **Locator audit (required):** Treat mis‑anchored findings as false‑positives. Before emission, re‑check owner‑tier; if uncertain, **prefer** `cross‑artifact <index> Whole artifact` rather than anchoring to a non‑owner. Category labels are not owners.
# When a baseline concern is valid but no owner exists in the current artifact, raise `cross‑artifact` and name the target artifact type/owner in the recommendation (do not park the finding on an unrelated row).
# **Ownerless/CPI exception:** for AOB, CPI, and **ghost‑dependencies**, you may use **`<index> Whole artifact`** as the locator; do not defer solely because no specific column exists.
# **Unknown‑context handling:** Raise only when applicability is evidenced; if applicability is unknown, skip and recommend documenting applicability context.
# When locus is outside the current artifact or owner is unclear, include the literal token cross‑artifact in the shortDescription.

# UNIVERSAL REVIEW-TRIGGER CHECKLIST (current-artifact focus — **24 triggers**)
**A trigger fires only when the current artifact’s content or explicit dependencies provide concrete evidence matching the trigger’s condition.**
 Use these triggers on *current* artifact:
 • The Client Specification outranks dependency artifacts (“spec-wins”).
 • Do **not** penalise the current artifact for errors that exist **only** upstream unless it copies or relies on them.
 • If a trigger fires and neither Rule-1 nor Rule-2 forbids it, raise at least one matching gap/excess.

 1  SPEC-ALIGNMENT GAP / CONFLICT
    • Current content contradicts or omits an explicit requirement in the Client Specification.
    • Extra detail is welcome **unless it conflicts** with the spec or a non-conflicting dependency, **or changes behavior**; if it does, raise a gap/excess.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 2  DEPENDENCY MISALIGNMENT  (spec-wins still applies)
    • Current artifact contradicts a dependency artifact *that does not itself conflict with the specification*.
    • If the spec is silent and two artifacts differ, treat the earlier one as reference and raise a gap/excess.
    • **Policy coherence:** contradictory strength levels for the same control across accessible sources (e.g., `recommended` vs `enforced`) → raise a gap and name both sources.
    Note: When the spec is silent and a dependency proposes stricter security defaults, prefer the stricter default unless it conflicts with spec or Upcoming artifacts own the decision.
 3  INTERNAL INCONSISTENCY
    • Any two rows, columns, or cells inside the artifact conflict.
 4  GRANULARITY / DETAIL MISMATCH
    • Information is so coarse it blocks implementation **or** so fine it over-specifies beyond the spec’s intended scope.
    • **End‑to‑end implementability (promise ↔ enabling counterparts):** For any declared behavior, constraint, assurance,
      or requirement, the Current Artifact must either (a) specify the concrete mechanism and named owner in its own
      columns/sections, or (b) explicitly reference a dependency that names the mechanism and owner (table/section/column).
      Mechanism/owner pairs must cover the interfacing tiers that make the promise real (UI ↔ API ↔ service logic ↔ data model ↔ security/control).
      If neither (a) nor (b) is satisfied, raise a gap.
    • **Critical‑path TBD:** primary components/technologies marked `TBD`/`to be selected` → at **phase‑end**, raise a gap if no binding decision/owner exists.
 5  MISSING VALUE WHILE SOURCE EXISTS
    • Blank / placeholder although data is present in the spec or a non-conflicting dependency.
    • If a required cell is blank where the policy demands N/A/TBD, raise Low MissedRequirement.
 6  DUPLICATE / OBSOLETE / EXCESS CONTENT
    • Redundant row, duplicate ID, obsolete element, or row count exceeds a stated cap (when such a cap is defined).
 7  IDENTIFIER / LINK ERROR & COLUMN-SET INTEGRITY
    • Malformed, broken, non-unique ID, wrong cross-reference, **or** a mandatory column-set/triplet is only partially filled. (Trace links in 1.1.0–1.1.4 exempt per Rule-2.)
    • Includes foreign keys that point to no existing row in declared dependencies.
    • **Ghost dependency:** a named dependency (component/service/job/interface) lacks a **defining artifact** in the accessible set — i.e., nowhere is it the **primary subject** with responsibilities/interfaces/owner/safeguards. Mentions in “Dependencies/Relationships” do **not** count → raise `cross‑artifact`.
    • **Post‑1.1.4 ID stability (mandatory):** Same requirement ID must preserve semantics across artifacts; drift ⇒ raise a gap anchored to the current artifact.
 8  TRACE LOOP INCOMPLETE
    • Entity/requirement appears here but nowhere downstream **after the partner artifact’s planned index has been delivered.**
    • Do not apply to artifacts 1.1.0–1.1.4 due to the traceability waiver.
 9  METRIC / TARGET INCOMPLETENESS OR CONFLICT
    • Quantitative target lacks unit, threshold, window, population, **instrumentation owner**, or source; non-SI/IEC unit; non-ISO-8601 timestamp; > 4 decimals; or duplicate/conflicting targets exist for the same ID.
    • **Metric–type coherence:** statistic type incompatible with measure type (e.g., percentile on Boolean success); or window/population mis-specified.
    • Success > 100 %, negative latency, mutually exclusive limits, etc.; **cross‑source drift**.
10  UNREALISTIC / IMPOSSIBLE VALUES
11  STRATEGY / PROCESS DEVIATION
    • Violates the agreed methodology, toolchain, or Definition-of-Done for this artifact type.
12  SECURITY / COMPLIANCE GAP
    • Missing, weak, duplicated, or outdated control; unmet legal/licence/privacy requirement.
    • **Security baselines (ownerless):** for authenticated state‑changing requests expect CSRF defenses; rate‑limit/brute‑force throttles; session cookie HttpOnly/Secure/SameSite; idle and absolute session timeouts; basic output encoding in admin UI. Apply the **session scheme invariant** from AOB.    • **GDPR evidence:** when consent/notice/erasure is in scope anywhere, expect consent boolean, policy version, timestamp, actor/source, retention/erasure fields, and export/erasure workflow owner.
    • **Erasure vs soft‑delete:** if soft‑delete exists and erasure is promised, require hard‑delete path + SLA.
    • AOB items apply (see Definitions).
13  PERFORMANCE / QUALITY MISALIGNMENT
    • Latency, throughput, availability, maintainability, or data-quality target mis-aligned with spec or SLA.
    • **Feasibility realism (mandatory):** challenge HA claims lacking required primitives (e.g., LB, stateless autoscaling, replication, zone failover, RPO/RTO); raise anchored to current artifact and name missing owner.
14  VERSION / TOOLCHAIN MISMATCH
    • Runtime, library, or pin conflicts with the approved tech stack.
15  LOGGING / AUDIT / DEPRECATION DEFECT
    • Required log field missing, audit format wrong, deprecation timeline absent.
    • **Data‑model prerequisite:** when `RBAC enforced`, `MFA`, `Session management`, `Audit logging`, or `Consent logging` is claimed, require **either** corresponding persistent fields/schemas **or** an explicit external authority + mapping/owner; otherwise raise **CrossArtifactGap** anchored to the current artifact.
16  ACCESSIBILITY / LOCALISATION OMISSION
    • Required WCAG tag, language fallback, or locale rule missing.
17  BUSINESS CONSTANT / CONFIG ERROR
    • Wrong, stale, or hard-coded business rule or constant.
    • **Standards sanity:** unrealistic maxima/minima for widely‑standardized fields (e.g., email local‑part length cap far below common standards) unless justified by business rule.
18  RISK / ASSUMPTION UNTRACKED
    • Known risk, assumption, or mitigation from spec/dependencies not mirrored here when it should be.
19  RATE-LIMIT / ERROR-BUDGET / SLA CEILING MISSING
    • Expected ceilings absent or inconsistent with performance objectives.
20  DECISION / INFO-CRUMB ERROR
    • Missing, duplicate, or malformed crumb in `metadata.notesFromLLM`, or fired trigger without matching crumb.
21  UNRESOLVED-NOTES VIOLATION
    • `unresolvedNotes` missing when gaps blocked, present when none blocked, reason > 120 chars, or pattern invalid.
22  PROGRESS-TRACKER LEAKAGE
    • Progress-Tracker table or sample row still present in artifact.
23  KPI-FORMAT DEFECT
    • Column header contains `Metric`/`Metrics` but cell is not a quantitative KPI (no statistic, threshold, unit, window, **or owner**), **or** uses incoherent statistic‑type.
24  CUSTOM-INSTR MISMATCH
    • Current artifact violates or omits a mandatory point in its Artifact-specific custom instructions block.
👉 **If any trigger fires and neither Rule‑1 nor Rule‑2 forbids it, at least one corresponding gap/excess *must* appear in `identifiedIssues`; omission is a *High‑severity reviewer oversight*.** Returning an empty list when a trigger fired violates the **Zero‑issues guard**.

# Triggers - gapType mapping:
  • Triggers 1,2,3,4,5,6,7,8,10,11,17,18,20,21,22,24 → MissedRequirement (unless clearly security/compliance).
  • 12,15 → SecurityGap or ComplianceGap (as applicable).
  • 13,19 → PerformanceGap.
  • 16 → UsabilityGap.
  • 9,23 → MissedRequirement (KPI format) unless a policy mandate makes it ComplianceGap.

# CROSS‑CUTTING BASELINES (for Rule‑0.1 and Rule‑5 bias)
# The following expectations are considered ownerless unless an upcoming artifact lists the exact column/section:
# • Security controls: CSRF for **authenticated** state‑changing requests; rate‑limit/throttling (for **public/unauthenticated** writes); session cookie flags; session timeouts; basic output encoding for admin UI.
# • GDPR/Privacy evidence: consent boolean, policy version, timestamp, actor/source; retention/erasure fields; export/erasure workflow owner.
# • Capability prerequisites: RBAC roles/permissions; MFA secret/method/recovery; audit log schema; metrics instrumentation owner/source.
# • Deterministic encryption when UNIQUE fields are encrypted at rest **and uniqueness is explicitly required**, or documented lookup/ADR; never infer uniqueness.
# **Privacy scope note:** Apply GDPR evidence only when personal data is in scope; if unclear, **recommend** documenting data categories, sources, and owner (do not raise a gap).

# ENUM LOCK (hard rule – any other token will be rejected):
 1. "impact":      **Critical | High | Medium | Low**   ← exact spelling, title case
 2. "knownIssue":  **NewIssue | KnownIssue | InProgress**   ← no other text, no extra spaces
 3. gapType list (choose the closest domain for each issue; applies to gaps **and** excesses):
 MissedRequirement | SecurityGap | ComplianceGap | PerformanceGap | UsabilityGap | Other.
 *IMPORTANT*: Use only the gapType values shown above; never invent new types! Invented gap types will be rejected!

# Locator rule – every shortDescription **must begin with the current artifact index** (e.g. 1.1.2) **followed by a space**, then:
 • a row ID (e.g. I-12) **optionally followed by** a column name, OR
 • a column name alone, OR
 • *Whole artifact* (when no specific row/column applies).
 • If the secondary locator is omitted, write `Whole artifact` after the index.
 • Examples:
   • `1.1.2 I-12`
   • `1.1.2 SLA`
   • `1.1.2 I-12 SLA`
   • `1.1.2 Whole artifact`
 • The locator counts toward the word limit.
 • Use <index> Whole artifact when the issue spans multiple rows/columns; if uncertain, anchor to the broadest specific row/column

# Style rules:
 - shortDescription: telegraphic noun phrase, **max 12 words** incl. artifact-index locator; hyphen-joined terms count as one word.
 - recommendation: **mandatory**; imperative verb, **≤ 10 words**.
  • Prefer citing the **exact column in the current artifact**.
  • Cross‑artifact is a literal marker included in shortDescription; it is not a gapType. Use any appropriate gapType (e.g., MissedRequirement, SecurityGap) and include the marker text cross‑artifact in the shortDescription.
  • For cross‑artifact fixes, **name the owner‑tier**; only name an artifact index + column when conclusively identifiable. **Do not fabricate indices.**
  • Reference the same locator when helpful (“Link I-07 to US-03”).
  • Describe the *next concrete action* (Add / Remove / Link / Rewrite / Defer / Verify …), and include the exact row/column or spec-ID to modify so the artifact-creator can copy the instruction verbatim.
  • Never leave it blank; write “Investigate root-cause” **only** if no fix is obvious.
   **🚨 If either field exceeds its word-limit, drop trailing words until limit is met.**
  • Good vs bad length examples:
    ✔ `1.2.7 All trace links missing` (5 words)
    ✘ `1.2.7 Whole artifact Questions for Stakeholders Table trace link missing` (13 words)
 - If a phrase exceeds 12 words, compress or drop adjectives.
 - Do not end either field with a period; remove any generated trailing period.
 - *IMPORTANT*: Prefer backticks for the locator; escaping is a fallback. Inside JSON strings escape any inner double-quotes (" ") or wrap the locator in back-ticks ( `like this` ); un-escaped quotes will be rejected.
 - **Reminder – Traceability waiver:** For artifacts **1.1.0 → 1.1.4**, raise **no traceability gaps of any kind** (Rule-2).
   • Any attempt to raise such a gap is a direct violation and must be omitted from `identifiedIssues`.
 - Limit – output at most **20 issues** to avoid overflow.
 🔒 Before returning JSON: if any `gapID` repeats, revise until unique.
  - **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase*.
  - **Word‑count rule:** Count every whitespace‑separated token toward the 12‑word limit **except** the exact token `cross‑artifact`.

# COMPLIANCE CHECKLIST
 ⓪  Compliance Checklist – perform silently before JSON
 (scratch-pad: Rule-1 Rule-2 Rule-3 Rule-4 Rule-5 Rule-6 Rule-7 ShortDescription≤12 Recommendation≤10 JSON-valid)

# TASKS – run all; omit any that pass. Always obey ABSOLUTE RULES
 0 Preparation
  • Load Client Specification, dependency artifacts, Current Artifact, and Unresolved Issues.
  • For each item in *Unresolved Issues*, **must** re-check whether the underlying defect is still present **in this artifact**; if not, do **not** re-raise it.
  • Mark topics covered by 🟧 Upcoming artifacts (Rule-1) and the 1.1.0 – 1.1.4 trace-waiver scope (Rule-2).

 1 Evidence scan (Rule-3)
  • Search CS → Dependencies → Current Artifact (case-insensitive substrings, indirect links).
  • Apply Rule-3 positive-evidence check before flagging a gap
  • If the requirement is already met in Current Artifact and is well-specified → stop.

 2 Trigger sweep
  • Iterate through the 24 Universal Review-Triggers.
  • For every live trigger not deferred by Rule-1/2, create ≥ 1 candidate finding *within the SCOPE-OF-REVIEW MATRIX*.
  • **Cluster sweep:** If any AOB/CPI item triggers, emit **one aggregated** `cross‑artifact` **cluster finding** that lists the specific missing primitives; **MUST NOT** emit isolated near‑duplicates; **reuse gapID**.


 3 Classify & draft rows
  • Choose gapType, impact, and precise locator; craft shortDescription (≤ 12 words) and recommendation (≤ 10 words).
  • Reject any issue lacking an internal evidence anchor or a column-precise recommendation.
  • Apply knownIssue logic: reuse gapID (KnownIssue / InProgress) or leave blank (NewIssue).

 4 Deduplicate & consolidate (Rule-4)
  • Merge duplicate findings under a single gapID; widen or narrow the locator as required by the examples.
  • Verify every gapID is unique.

 5 Quota & quick-check
  • If > 20 issues, retain the highest-impact ones first.
  • Order by severity: **Critical → High → Medium → Low**; prefer ownerless/CPI and **ghost‑dependency** gaps. If > 20, retain the highest‑impact first.
  • Re-run the Upcoming-Artifact scan; drop any entry that should be silently deferred.

 6 Emit JSON only
  • Output exactly one object:
   { "questionText": …, "identifiedIssues": […] }
  • No extra prose, markdown, or code fencing.
(<end of instruction block>)

(<start of project data block:>)
# PROJECT DATA:
 1. Dependencies (client specification + other artifacts):
  ClientSpec:
I want a simple webpage where people can give feedback about our product or service. People should be able to leave feedback anonymously, but it would be good if they have an option to add their email in case we want to follow up. Each piece of feedback should show when it was submitted. There should be a simple way for me or someone else to log in securely to see all the feedback that has been left. We also need to be able to delete feedback if necessary, but it should ask for confirmation before deleting anything. It’s important that people's email addresses and the login information for managing the feedback are kept safe and secure. We also need to let people know how their email addresses will be used if they provide them, to keep everything compliant with privacy laws like GDPR. The page should be simple and easy to use, and it should look good and work smoothly on different web browsers like Chrome, Firefox, and Edge.

--- DEPENDENCY: Artifact 1.1.0 (Input) ---
Client specification (summary) | Simple webpage for anonymous feedback, optional email, admin view, delete with confirm, GDPR notice, responsive | [PLACEHOLDER-AUTO]
Anonymous feedback | Allow anonymous submissions; store feedback text plus minimal metadata: submission_id, timestamp, ip-hash | [PLACEHOLDER-AUTO]
Optional email capture | Optional email field; encrypt at rest, mark contact_intent flag, do not require for submit | [PLACEHOLDER-AUTO]
Submission timestamp | Record ISO-8601 UTC timestamp for each submission and surface in admin UI | [PLACEHOLDER-AUTO]
Admin authentication | Least-privilege admin roles, strong password + MFA, session rotation with rotatedAt and TTL | [PLACEHOLDER-AUTO]
Delete with confirmation | Admin delete requires explicit confirmation UI; record deletion event with actor_id and timestamp | [PLACEHOLDER-AUTO]
Data protection for emails and credentials | Encrypt emails and admin credentials at rest; TLS for transport; role-based access and audit logs | [PLACEHOLDER-AUTO]
Privacy / GDPR notice | Show brief notice when email requested covering usage, retention and opt-out; link to full policy | [PLACEHOLDER-AUTO]
Responsive cross-browser UI | Accessible UI, keyboard navigable, responsive across desktop and mobile widths | [PLACEHOLDER-AUTO]
Initial user scenario: submit feedback | Anon user opens page, enters feedback, optionally adds email, submits, sees confirmation receipt | [PLACEHOLDER-AUTO]
Initial user scenario: admin review | Admin logs in, views list sorted by timestamp, filters, inspects feedback, may delete with confirm | [PLACEHOLDER-AUTO]
Success metric: submission reliability | Submission success rate >= 99.0 % over PT30D for production submissions; source: API-Service logs | [PLACEHOLDER-AUTO]
Success metric: UI performance | Median first-contentful-paint <= 2.0 s over PT30D measured in production RUM | [PLACEHOLDER-AUTO]
Identifier strategy | Use time-sortable UUID identifiers (time-ordered UUIDs) for feedback and admin actions | [PLACEHOLDER-AUTO]
Security baseline | Session cookie flags Secure/HttpOnly/SameSite, idle timeout PT30M, MFA for admin, retention P365D, audit logs | [PLACEHOLDER-AUTO]
Rate-limit for submissions | POST /feedback rate-limit 10 requests per IP per PT1M with exponential backoff; instrumented metric owner=SRE | [PLACEHOLDER-AUTO]
Session rotation policy | Issue session tokens with rotatedAt timestamp and TTL PT8H; renew on privileged action | [PLACEHOLDER-AUTO]
CSRF and anti-forgery | Admin flows require anti-CSRF token or SameSite=Strict for admin cookies; validate server-side | [PLACEHOLDER-AUTO]
Minimal DevSecOps checklist | Enforce TLS, secret rotation, dependency vuln scan, audit logging, least-privilege IAM entries | [PLACEHOLDER-AUTO]
Instrumentation owner for rate-limit metric | Owner: SRE team; metric source: API-Service request counters and throttles; alert on >1% throttle PT1H | [PLACEHOLDER-AUTO]
--- DEPENDENCY: Artifact 1.1.1.1 (Modules Components Description Table) ---
FR-001 | Public Feedback Form | Open feedback page (responsive) | Serve responsive feedback page across desktop and mobile | I-1: GET /feedback page | Median FCP <=2.0 s PT30D; percentile: p50; source=RUM | Cross-browser rendering, accessibility | FR-001 | TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans | Frontend
FR-002 | Public Feedback Form | Enter feedback text | Input accepts freeform feedback text, client-side length limit 5000 chars | I-2: feedback textarea | Validation error rate <=0.5% PT30D; source=Frontend logs | Input validation, XSS sanitization | FR-002 | Client-side sanitization; server-side validation; dependency vuln scans | Frontend
FR-003 | Public Feedback Form | Optional email input | Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS) | I-3: email input (optional) | % submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service | Email optionality, encryption correctness, contact_intent flag | FR-003 | Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access | Product
FR-004 | Public Feedback Form | Show GDPR/privacy notice and consent checkbox | Display brief email-use notice and consent capture when email requested | I-4: consent checkbox UI | Consent capture rate when email present 100% PT30D; source=Frontend | Consent recorded and auditable | FR-004 | Consent logged immutably; retention disclosure; privacy text audit | Product
FR-005 | Public Feedback Form | Submit feedback with ISO-8601 UTC timestamp | POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp | I-5: POST /feedback | Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs | Id assignment, timestamp accuracy, rate-limit enforcement | FR-005 | Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts | SRE
FR-006 | Public Feedback Form | Show submission confirmation | Client shows success/failure message after submit | I-6: submission UI response | Median time-to-confirm <=1.5 s PT30D; source=RUM | User feedback and error handling | FR-006 | Consistent HTTP status codes; client telemetry for failures | Frontend
FR-007 | Submission Processing | Validate feedback payload server-side | Server-side schema validation and duplicate detection | I-7: POST /feedback validation | Rejected payload rate <=1.0% PT30D; source=API-Service | Schema validation, duplicate suppression | FR-007 | Server-side validation; input shaping; request schema tests | Backend
FR-008 | Submission Processing | Sanitize content for display | Sanitize stored content to prevent XSS on admin views | I-8: sanitize pipeline | XSS vulnerability count =0 (scan) PT30D; source=Security scans | Sanitizer test coverage | FR-008 | Output encoding; sanitizer library pinned; security scans | Security
FR-009 | Submission Processing | Mark contact_intent if email present | Set contact_intent boolean when optional email provided | I-9: contact_intent flag in payload | Flag consistency 100% PT30D (audit); source=DB audit | Flag persistence, audit logs | FR-009 | Audit log on flag set; encrypted email field access controls | Backend
FR-010 | Submission Processing | Encrypt email before persist | Apply field-level envelope encryption (KMS) to emails prior to storage | I-10: crypto module | Encrypted-at-rest verified 100% (audit) PT30D; source=Security | Encryption key usage, KMS integration tests | FR-010 | KMS policy; key rotation; access limited to service role; decrypt audits | Security
FR-011 | Submission Processing | Persist record with time-sortable UUID | Persist feedback record with UUIDv7 primary id | I-11: DB insert API | Insert success rate >=99.0% PT30D; source=DB metrics | ID format, DB ACID write tests | FR-011 | DB least-privilege role; input sanitization; write-audit | Storage
FR-012 | Submission Processing | Return success/failure to client | Return clear HTTP status and error codes; retry-safe | I-12: POST /feedback response codes | Proper HTTP success code on valid submit 100% PT30D; source=API-Service | Status code correctness, idempotency | FR-012 | Idempotency tokens where needed; structured error codes | Backend
FR-013 | Storage | Store feedback records in SQL RDBMS | Persist feedback rows in SQL RDBMS with least-privilege access | I-13: DB schema feedback table | DB write latency p95 <=200 ms PT30D; source=DB metrics | Schema correctness, access controls | FR-013 | DB roles; TLS to DB; audit logging for writes | Storage
FR-014 | Storage | Encrypt sensitive fields at rest | Encrypt emails and credentials at rest using field-level envelope encryption | I-14: encryption-at-rest policy | Encrypted fields coverage 100% (audit) PT30D; source=Security audit | Encryption verification, key rotation tests | FR-014 | KMS keys; key rotation schedule; encryption audit | Security
FR-015 | Storage | Apply least-privilege DB access | DB accounts scoped by role; app uses minimal privileges | I-15: DB access roles | Role violation incidents =0 PT90D; source=IAM audit | Access control audits | FR-015 | IAM role reviews; automated permission drift alerts | InfraSec
FR-016 | Storage | Retention policy P365D enforcement | Automated deletion of records older than P365D unless exempt | I-16: retention job | Retention enforcement rate 100% monthly; source=Retention job logs | Retention job correctness, delete logs | FR-016 | Automated deletion job; deletion audit entries | Storage
FR-017 | Storage | Audit-write deletion events | Log deletion actor id and ISO-8601 timestamp immutably | I-17: deletion audit log | Deletion audit entries 100% per delete; source=Audit store | Audit integrity and append-only writes | FR-017 | Append-only audit store; retention for audit logs | Compliance
FR-018 | Storage | Periodic backups of dataset | Perform regular backups with retention and restore tests | I-18: backup schedule | Daily backup success rate >=99.0% PT30D; source=Backup logs | Backup restore verification | FR-018 | Encrypted backups; restore drills; access controls | Storage
FR-019 | Admin UI | Admin login screen (responsive) | Responsive admin login with session handling | I-19: GET/POST /admin/login | Median admin login time <=2.0 s PT30D; source=RUM | Auth flow and UI accessibility | FR-019 | OIDC flows; MFA prompt; CSRF protection on login forms; TLS | AdminUX
FR-020 | Admin UI | List feedback sorted by timestamp | Admin list view sorted newest-first using UUIDv7 ordering | I-20: GET /admin/feedback?sort=time | List latency p95 <=300 ms PT30D; source=API-Service | Sorting correctness, pagination | FR-020 | RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions | AdminUX
FR-021 | Admin UI | View full feedback details | Detail view shows text, timestamp, contact_intent, encrypted email marker | I-21: GET /admin/feedback/{id} | Detail retrieval success 100% PT30D; source=API-Service | Decryption/display rules, masking | FR-021 | Decryption via authorized role; masking for emails; access audit; CSRF protection | AdminUX
FR-022 | Admin UI | Delete feedback with confirm dialog | Admin delete requires explicit confirm and second-step verification | I-22: DELETE /admin/feedback/{id} | Confirmed-deletes ratio >=99% PT30D; source=Audit logs | Confirm dialog enforcement, race conditions | FR-022 | DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI | AdminOps
FR-023 | Admin UI | Log deletion actor ID and ISO-8601 timestamp | Record actor id and timestamp in audit log on delete | I-23: deletion audit entry | Audit entry present 100% per deletion; source=Audit store | Audit consistency and tamper-evidence | FR-023 | Immutable audit store; retention and access controls | Compliance
FR-024 | Admin UI | Search and export feedback list | Admin can search and export CSV with permission checks | I-24: GET /admin/feedback?query & export | Export success rate >=99.0% PT30D; source=API-Service | Permission enforcement, export data masking | FR-024 | Export masking; RBAC; export job audit; CSRF tokens on export actions | AdminUX
FR-025 | Admin Authentication | Authenticate admins via OIDC IdP capability | Admin auth via OIDC-capable IdP; support MFA | I-25: OIDC flow endpoints | Admin auth failure rate <=1.0% PT30D; source=Auth logs | OIDC flow conformance, token validation | FR-025 | OIDC capability; token validation; MFA enforcement; secret rotation | Auth
FR-026 | Admin Authentication | Enforce session cookie flags Secure/HttpOnly/SameSite | Set Secure, HttpOnly, SameSite on admin session cookies | I-26: session cookie policy | Cookies with flags 100% (audit) PT30D; source=Auth audit | Cookie attribute verification | FR-026 | Cookie flags enforced; SameSite=Strict for admin; cookie audits | Auth
FR-027 | Admin Authentication | Idle session timeout PT30M | Idle admin sessions expire after PT30M inactivity | I-27: session timeout policy | Idle session expiry enforcement 100% daily audit; source=Session store | Timeout enforcement | FR-027 | Session store TTL PT30M; inactivity checks; session rotation | Auth
FR-028 | Admin Authentication | Enforce MFA for admin accounts | Require MFA for all admin logins | I-28: MFA enrollment and challenge | MFA enabled rate 100% for admin accounts; source=Auth | MFA enforcement tests | FR-028 | MFA challenge on auth; backup codes; enrollment audit | Auth
FR-029 | Admin Authentication | Role-based access control for UI actions | RBAC for admin UI actions and exports | I-29: RBAC policy checks | Unauthorized access attempts =0 PT90D; source=Auth audit | RBAC policy correctness | FR-029 | RBAC enforcement; policy tests; permission audit logs | Auth
FR-030 | Admin Authentication | Audit admin login and privilege changes | Log admin login events and role changes with actor id and timestamp | I-30: admin audit log | Admin audit entries 100% per event; source=Audit store | Audit completeness and integrity | FR-030 | Append-only admin audit; alert on suspicious changes | Compliance
FR-031 | Privacy & GDPR | Display email-use notice when email requested | Show notice explaining email use, retention and opt-out | I-31: privacy notice UI | Notice shown on email field 100% (UI test) PT30D; source=UI tests | Notice visibility and content accuracy | FR-031 | Privacy text versioning; UI tests; consent link to policy | Product
FR-032 | Privacy & GDPR | Capture consent and contact-intent flags | Store consent and contact_intent flags with timestamp and actor id | I-32: consent storage API | Consent recorded 100% when checkbox checked; source=DB audit | Consent auditability | FR-032 | Immutable consent records; linkage to submissions; audit | Product
FR-033 | Privacy & GDPR | Provide data access and deletion request process | Admin process and API to fulfill access/deletion requests | I-33: data subject request endpoints | DSR fulfillment time <=30 days per request; source=Compliance logs | Request verification and completion | FR-033 | Verified request workflow; audit trail; auth for DSRs | Compliance
FR-034 | Privacy & GDPR | Support data deletion upon verified request | Delete or anonymize records on verified deletion requests, log action | I-34: verified delete workflow | Verified deletions completed within 30 days; source=Audit store | Deletion verification and audit | FR-034 | DeletionNonce verification; deletion audit entries | Compliance
FR-035 | Privacy & GDPR | Expose retention period to admins | Display retention policy and next-delete dates in admin UI | I-35: retention info UI | Retention info accuracy 100% (audit) PT30D; source=Storage | Retention metadata correctness | FR-035 | Retention metadata generation; UI access controls | Storage
FR-036 | Privacy & GDPR | Record consent and processing purpose in audit logs | Append consent and processing purpose to audit trail immutably | I-36: consent audit entries | Consent audit entries 100% per consent; source=Audit store | Audit linkage and immutability | FR-036 | Append-only audit; retention and access control | Compliance
FR-037 | Admin Authentication | Session rotation policy and rotatedAt field | Rotate session tokens on privilege change and record rotatedAt ISO-8601 | I-27b: session rotation endpoint /session/rotate | Session rotation performed 100% on privilege change; source=Auth logs | Rotation enforcement, rotatedAt timestamp correctness | FR-037 | Rotate tokens on privilege change; record rotatedAt; rotation tests | Auth
FR-038 | Submission Processing | DeletionNonce TTL verification | Verify deletionNonce TTL before accepting admin delete requests | I-22b: deletionNonce verification in DELETE /admin/feedback/{id} | Rejected deletes due to expired nonce <=0% PT30D; source=API-Service | Nonce TTL correctness, rejection behavior | FR-038 | DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete | AdminOps

 2. **Current phase:** FeasibilityStudy

 3. **Current artifact:** 1.1.2

 🟧🟧 UPCOMING ARTIFACTS — DO NOT FLAG GAPS FOR THESE 🟧🟧
 4. **Upcoming artifacts in this phase:**
  • (none)

 5. Current Artifact (JSON):
  {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs",
    "Metric Owner"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; admin auth failure rate <=1.0 % PT30D; source=Auth logs",
      "DevSecOps / Security": "OIDC capability; MFA enforcement; Secure/HttpOnly/SameSite=Strict; CSRF tokens for admin flows; secret rotation",
      "Related Reqs": "FR-025, FR-026, FR-028, FR-029, FR-030",
      "Metric Owner": "Auth"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; restore drill success >=95 % PT90D; source=Backup logs",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills; backup retention policy",
      "Related Reqs": "FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttle rate <=1 % PT30D; source=API-Service logs",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; request logging; vuln scans",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; source=DB/ID-gen logs",
      "DevSecOps / Security": "Server-side UUIDv7 generation; include id in audit entries; monitor collisions",
      "Related Reqs": "FR-005, FR-011",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0 % over PT30D; dashboard RBAC audit PT90D; source=Monitoring",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; metrics retention PT90D; pipeline scans",
      "Related Reqs": "FR-012, FR-030",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); encrypted-at-rest verified 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Deterministic field-level envelope encryption for emails; TLS in transit; access audit; mask in exports",
      "Related Reqs": "FR-003, FR-010, FR-009",
      "Metric Owner": "Security"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; source=DB audit",
      "DevSecOps / Security": "Store consent timestamp and purpose immutably; expose opt-out; consent audit trails",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036",
      "Metric Owner": "Product"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly; verified deletion completion <=30 days per request; source=Retention logs",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; deletionNonce TTL PT15M; RBAC for delete actions",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; masked fields present 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; audit export events; CSRF tokens on export actions",
      "Related Reqs": "FR-024",
      "Metric Owner": "AdminUX"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; insert success rate >=99.0 % PT30D; source=DB metrics",
      "DevSecOps / Security": "Encrypt sensitive fields at rest via envelope encryption; scoped DB roles; daily backups; TLS to DB",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; confirmed-deletes ratio >=99 % PT30D; source=API-Service and Audit store",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on admin forms",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038",
      "Metric Owner": "AdminOps"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; source=Security scans",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; sanitizer library pinning",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012",
      "Metric Owner": "Backend"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; source=Auth logs",
      "DevSecOps / Security": "Rotate tokens on privilege change; rotation endpoint; session TTL PT8H; audit rotation events",
      "Related Reqs": "FR-037",
      "Metric Owner": "Auth"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Deterministic email encryption \u2014 eliminates hash vs encrypt conflict"
  }
}

 6. Artifact-specific custom instructions
  List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.

 7. Unresolved Issues from previous iteration:
  [
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "impact": "Medium",
    "desc": "1.1.1 UUID-0004 Server-side deletionNonce missing"
  }
]

 8. Question:
  1) Verify that the artefact is internally consistent, unambiguous, and complete for this development stage. 2) Check that every row traces to the client specification and dependencies. 3) Confirm that any missing content is correctly deferred according to ABSOLUTE RULE 1.
(<end of project data block>)

(<start of additional instructions block:>)
            Illustrative JSON examples (do **not** include in output):

            Example NewIssue (deficiency):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact `refund within 24 hours` Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add refund-rule row; cite client spec US-01"
            }

            Example KnownIssue (excess):
            {
              "gapType": "SecurityGap",
              "shortDescription": "1.1.2 I-27 Duplicate Over-spec",
              "gapID": "SEC-004",
              "knownIssue": "KnownIssue",
              "impact": "Medium",
              "recommendation": "Delete duplicate I-27; keep single authorised row"
            }

            Example InProgress (being fixed):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 I-07 Partial trace-link added",
              "gapID": "beaf8b",
              "knownIssue": "InProgress",
              "impact": "Medium",
              "recommendation": "Complete trace links I-07"
            }

            *NEGATIVE, BAD Example* (should be DEFERRED as violates rules – do NOT output!):
            {
              "gapType": "MissedRequirement",
              "shortDescription": "1.1.2 Whole artifact Workflow Mapping Table Missing",
              "gapID": "",
              "knownIssue": "NewIssue",
              "impact": "High",
              "recommendation": "Add Workflow Mapping Table"
            }

            Example for *no* issues (use only when **no triggers fire** after full sweep):
            { "questionText": "{q_text}", "identifiedIssues": [] }

          **JSON-SAFETY RULE — Inside every JSON string use ONLY UTF-8 characters that are neither a raw double-quote ( " ) nor an unescaped back-slash ( \ ).
          If you need quotes around a word, wrap them in back-ticks (`like this`) or escape them as "like this".  Use \n only where a newline is required; escape ≥ and % inside strings.**

            Return **ONLY** valid JSON:
            {
              "questionText": "{q_text}",
              "identifiedIssues": [
                {
                  "gapType": "...",
                  "shortDescription": "...",
                  "gapID": "some ID (blank if new)",
                  "knownIssue": "KnownIssue | InProgress | NewIssue",
                  "impact": "Critical | High | Medium | Low",
                  "recommendation": "specific recommendation text: locator/action/link"
                }
              ]
            }

# knownIssue flagging:
 • **Decision block:** If gapID appears in *Unresolved*: if fully fixed → **omit**; if partially fixed → **InProgress**; else **KnownIssue**. If new → **NewIssue**.
 • Allowed tokens are **exactly** `KnownIssue`, `InProgress`, `NewIssue` (any other value will be rejected).
 • Always scan the current artifact for partial fixes first; if any are visible, use InProgress with the updated locator.
 • Use **KnownIssue** when the gapID is still present with **no visible remediation**; if fully remediated in this artifact, **omit** the issue (resolved by omission).
 • Use **InProgress** only when you explicitly detect partial fixes in this artifact and cite the locator that shows the fix.
 • Otherwise use **NewIssue**.
 • **If the gapID you output already appears in *Unresolved Issues* and the problem is still unsolved and is applicable to current artifact fully, you MUST reuse that gapID and set `"knownIssue": "KnownIssue"` (unless you are explicitly marking partial remediation with `"InProgress"`, or the issue is fully `"Resolved"`).  Never label such an issue `"NewIssue"`.**
 • Any other token in either `gapType` or `knownIssue` will cause the response to be rejected.
 • If no issues, output { "questionText": "{q_text}", "identifiedIssues": [] }
 • **Reuse guard:** Before marking `KnownIssue`, re‑check the Current Artifact. If any remediation is visible, **reuse the same `gapID`** but set `"knownIssue": "InProgress"` and update the locator. **Do not** use `KnownIssue` when partial fixes exist.

# QUICK-CHECK STEP ────────────────────────────
 **Before emitting JSON** quickly scan the *Upcoming artifacts* list:
  • If a candidate issue’s primary topic matches an 🟧 Upcoming artifact → apply Rule‑1 (skip) **unless**:
    – **AOB** item, or
    – **CPI** needed by the current artifact.
  • If `shortDescription` contains a substring that equals any Upcoming artifact name ⇒ DEFERRED
  • Otherwise continue with normal gap evaluation.
  • Do NOT include the Compliance Checklist in the JSON output
  • 🚫 Rule-2 reminder: artifacts 1.1.0-1.1.4 ⇒ traceability gaps are out-of-scope.
  • Do **not** claim a metric is violated unless the artifact contains measured data; target rows alone are not evidence of failure.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • Minimise false-positives and false-negatives — raise only evidence-backed issues.
  • Priority: FP‑averse default **except** AOB/CPI/ghost‑dependency/phase‑end, where **one Low** `cross‑artifact` cluster beats silence when unsure.
  • Apply the **Zero‑issues guard (safe)**: use **only** when a trigger has positive applicability evidence, no in‑artifact semantic match exists, and Rule‑1/2 do not defer; emit **one** Low `cross‑artifact` cluster summary.
  • Apply the **ID stability** and **capability‑prerequisite** checks before deferral.
  • **Phase‑end invariants sweep:** on last mini‑iteration or when no upcoming artifacts remain in phase, re‑scan already‑reviewed artifacts in this phase; if any CPI/AOB/**ghost‑dependencies** or critical‑path `TBD` remain, raise now in the **current artifact** as `cross‑artifact`; do **not** defer.

# **FINAL REMINDER** – Before emitting JSON, verify you have **not** raised a gap handled by *Upcoming artifacts in this phase* and that every `gapID`, enum token, and word-count passes the compliance checklist.

# No extra text outside JSON, no triple backticks or code fencing.
            
DEBUG (LLMClient): GPT Response:
 {
  "questionText": "1) Is artifact internally consistent and complete for this stage? 2) Do rows trace to spec/deps? 3) Are missing items correctly deferred?",
  "identifiedIssues": []
}
BEFORE-MERGE 1.1.2 0
CALL-VERIFY 1.1.2 2/FeasibilityStudy/2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs",
    "Metric Owner"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; admin auth failure rate <=1.0 % PT30D; source=Auth logs",
      "DevSecOps / Security": "OIDC capability; MFA enforcement; Secure/HttpOnly/SameSite=Strict; CSRF tokens for admin flows; secret rotation",
      "Related Reqs": "FR-025, FR-026, FR-028, FR-029, FR-030",
      "Metric Owner": "Auth"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; restore drill success >=95 % PT90D; source=Backup logs",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills; backup retention policy",
      "Related Reqs": "FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttle rate <=1 % PT30D; source=API-Service logs",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; request logging; vuln scans",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; source=DB/ID-gen logs",
      "DevSecOps / Security": "Server-side UUIDv7 generation; include id in audit entries; monitor collisions",
      "Related Reqs": "FR-005, FR-011",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0 % over PT30D; dashboard RBAC audit PT90D; source=Monitoring",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; metrics retention PT90D; pipeline scans",
      "Related Reqs": "FR-012, FR-030",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); encrypted-at-rest verified 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Deterministic field-level envelope encryption for emails; TLS in transit; access audit; mask in exports",
      "Related Reqs": "FR-003, FR-010, FR-009",
      "Metric Owner": "Security"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; source=DB audit",
      "DevSecOps / Security": "Store consent timestamp and purpose immutably; expose opt-out; consent audit trails",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036",
      "Metric Owner": "Product"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly; verified deletion completion <=30 days per request; source=Retention logs",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; deletionNonce TTL PT15M; RBAC for delete actions",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; masked fields present 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; audit export events; CSRF tokens on export actions",
      "Related Reqs": "FR-024",
      "Metric Owner": "AdminUX"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; insert success rate >=99.0 % PT30D; source=DB metrics",
      "DevSecOps / Security": "Encrypt sensitive fields at rest via envelope encryption; scoped DB roles; daily backups; TLS to DB",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; confirmed-deletes ratio >=99 % PT30D; source=API-Service and Audit store",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on admin forms",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038",
      "Metric Owner": "AdminOps"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; source=Security scans",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; sanitizer library pinning",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012",
      "Metric Owner": "Backend"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; source=Auth logs",
      "DevSecOps / Security": "Rotate tokens on privilege change; rotation endpoint; session TTL PT8H; audit rotation events",
      "Related Reqs": "FR-037",
      "Metric Owner": "Auth"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Deterministic email encryption \u2014 eliminates hash vs encrypt conflict"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1 M-2 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Use deterministic encryption for emails",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1 UUID-0004 Server-side deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "d0923d",
      "newStatus": "Resolved",
      "notes": "Show deterministic encryption in DevSecOps / Security column"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Show server verifies deletionNonce TTL in Admin UI row"
    }
  ]
}
CALL-VERIFY 2 FeasibilityStudy 2
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.1.1",
  "artifactName": "Modules Components Description Table",
  "columns": [
    "Requirement ID",
    "Module",
    "Component",
    "Description",
    "Interface",
    "Potential Metrics",
    "V&V focus",
    "Related Reqs",
    "DevSecOps / Security",
    "Metric Owner"
  ],
  "rows": [
    {
      "Requirement ID": "FR-001",
      "Module": "Public Feedback Form",
      "Component": "Open feedback page (responsive)",
      "Description": "Serve responsive feedback page across desktop and mobile",
      "Interface": "I-1: GET /feedback page",
      "Potential Metrics": "Median FCP <=2.0 s PT30D; percentile: p50; source=RUM",
      "V&V focus": "Cross-browser rendering, accessibility",
      "Related Reqs": "FR-001",
      "DevSecOps / Security": "TLS; CSP; input validation; RUM instrumentation; deploy pipeline scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-002",
      "Module": "Public Feedback Form",
      "Component": "Enter feedback text",
      "Description": "Input accepts freeform feedback text, client-side length limit 5000 chars",
      "Interface": "I-2: feedback textarea",
      "Potential Metrics": "Validation error rate <=0.5% PT30D; source=Frontend logs",
      "V&V focus": "Input validation, XSS sanitization",
      "Related Reqs": "FR-002",
      "DevSecOps / Security": "Client-side sanitization; server-side validation; dependency vuln scans",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-003",
      "Module": "Public Feedback Form",
      "Component": "Optional email input",
      "Description": "Optional email field; flag contact_intent when present; store encrypted using field-level envelope encryption (KMS)",
      "Interface": "I-3: email input (optional)",
      "Potential Metrics": "% submissions with email PT30D (vanity) ; Encrypted-at-rest verified 100% PT30D; source=API-Service",
      "V&V focus": "Email optionality, encryption correctness, contact_intent flag",
      "Related Reqs": "FR-003",
      "DevSecOps / Security": "Field-level envelope encryption (KMS); least-privilege DB access; consent capture; audit on access",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-004",
      "Module": "Public Feedback Form",
      "Component": "Show GDPR/privacy notice and consent checkbox",
      "Description": "Display brief email-use notice and consent capture when email requested",
      "Interface": "I-4: consent checkbox UI",
      "Potential Metrics": "Consent capture rate when email present 100% PT30D; source=Frontend",
      "V&V focus": "Consent recorded and auditable",
      "Related Reqs": "FR-004",
      "DevSecOps / Security": "Consent logged immutably; retention disclosure; privacy text audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-005",
      "Module": "Public Feedback Form",
      "Component": "Submit feedback with ISO-8601 UTC timestamp",
      "Description": "POST feedback; server assigns UUIDv7 id and ISO-8601 UTC timestamp",
      "Interface": "I-5: POST /feedback",
      "Potential Metrics": "Submission success rate >=99.0% PT30D; rate-limit throttles <=1% PT30D; source=API-Service logs",
      "V&V focus": "Id assignment, timestamp accuracy, rate-limit enforcement",
      "Related Reqs": "FR-005",
      "DevSecOps / Security": "Rate-limit 10 req/IP/PT1M; 429 on exceed; TLS; request logging; abuse alerts",
      "Metric Owner": "SRE"
    },
    {
      "Requirement ID": "FR-006",
      "Module": "Public Feedback Form",
      "Component": "Show submission confirmation",
      "Description": "Client shows success/failure message after submit",
      "Interface": "I-6: submission UI response",
      "Potential Metrics": "Median time-to-confirm <=1.5 s PT30D; source=RUM",
      "V&V focus": "User feedback and error handling",
      "Related Reqs": "FR-006",
      "DevSecOps / Security": "Consistent HTTP status codes; client telemetry for failures",
      "Metric Owner": "Frontend"
    },
    {
      "Requirement ID": "FR-007",
      "Module": "Submission Processing",
      "Component": "Validate feedback payload server-side",
      "Description": "Server-side schema validation and duplicate detection",
      "Interface": "I-7: POST /feedback validation",
      "Potential Metrics": "Rejected payload rate <=1.0% PT30D; source=API-Service",
      "V&V focus": "Schema validation, duplicate suppression",
      "Related Reqs": "FR-007",
      "DevSecOps / Security": "Server-side validation; input shaping; request schema tests",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-008",
      "Module": "Submission Processing",
      "Component": "Sanitize content for display",
      "Description": "Sanitize stored content to prevent XSS on admin views",
      "Interface": "I-8: sanitize pipeline",
      "Potential Metrics": "XSS vulnerability count =0 (scan) PT30D; source=Security scans",
      "V&V focus": "Sanitizer test coverage",
      "Related Reqs": "FR-008",
      "DevSecOps / Security": "Output encoding; sanitizer library pinned; security scans",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-009",
      "Module": "Submission Processing",
      "Component": "Mark contact_intent if email present",
      "Description": "Set contact_intent boolean when optional email provided",
      "Interface": "I-9: contact_intent flag in payload",
      "Potential Metrics": "Flag consistency 100% PT30D (audit); source=DB audit",
      "V&V focus": "Flag persistence, audit logs",
      "Related Reqs": "FR-009",
      "DevSecOps / Security": "Audit log on flag set; encrypted email field access controls",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-010",
      "Module": "Submission Processing",
      "Component": "Encrypt email before persist",
      "Description": "Apply field-level envelope encryption (KMS) to emails prior to storage",
      "Interface": "I-10: crypto module",
      "Potential Metrics": "Encrypted-at-rest verified 100% (audit) PT30D; source=Security",
      "V&V focus": "Encryption key usage, KMS integration tests",
      "Related Reqs": "FR-010",
      "DevSecOps / Security": "KMS policy; key rotation; access limited to service role; decrypt audits",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-011",
      "Module": "Submission Processing",
      "Component": "Persist record with time-sortable UUID",
      "Description": "Persist feedback record with UUIDv7 primary id",
      "Interface": "I-11: DB insert API",
      "Potential Metrics": "Insert success rate >=99.0% PT30D; source=DB metrics",
      "V&V focus": "ID format, DB ACID write tests",
      "Related Reqs": "FR-011",
      "DevSecOps / Security": "DB least-privilege role; input sanitization; write-audit",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-012",
      "Module": "Submission Processing",
      "Component": "Return success/failure to client",
      "Description": "Return clear HTTP status and error codes; retry-safe",
      "Interface": "I-12: POST /feedback response codes",
      "Potential Metrics": "Proper HTTP success code on valid submit 100% PT30D; source=API-Service",
      "V&V focus": "Status code correctness, idempotency",
      "Related Reqs": "FR-012",
      "DevSecOps / Security": "Idempotency tokens where needed; structured error codes",
      "Metric Owner": "Backend"
    },
    {
      "Requirement ID": "FR-013",
      "Module": "Storage",
      "Component": "Store feedback records in SQL RDBMS",
      "Description": "Persist feedback rows in SQL RDBMS with least-privilege access",
      "Interface": "I-13: DB schema feedback table",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; source=DB metrics",
      "V&V focus": "Schema correctness, access controls",
      "Related Reqs": "FR-013",
      "DevSecOps / Security": "DB roles; TLS to DB; audit logging for writes",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-014",
      "Module": "Storage",
      "Component": "Encrypt sensitive fields at rest",
      "Description": "Encrypt emails and credentials at rest using field-level envelope encryption",
      "Interface": "I-14: encryption-at-rest policy",
      "Potential Metrics": "Encrypted fields coverage 100% (audit) PT30D; source=Security audit",
      "V&V focus": "Encryption verification, key rotation tests",
      "Related Reqs": "FR-014",
      "DevSecOps / Security": "KMS keys; key rotation schedule; encryption audit",
      "Metric Owner": "Security"
    },
    {
      "Requirement ID": "FR-015",
      "Module": "Storage",
      "Component": "Apply least-privilege DB access",
      "Description": "DB accounts scoped by role; app uses minimal privileges",
      "Interface": "I-15: DB access roles",
      "Potential Metrics": "Role violation incidents =0 PT90D; source=IAM audit",
      "V&V focus": "Access control audits",
      "Related Reqs": "FR-015",
      "DevSecOps / Security": "IAM role reviews; automated permission drift alerts",
      "Metric Owner": "InfraSec"
    },
    {
      "Requirement ID": "FR-016",
      "Module": "Storage",
      "Component": "Retention policy P365D enforcement",
      "Description": "Automated deletion of records older than P365D unless exempt",
      "Interface": "I-16: retention job",
      "Potential Metrics": "Retention enforcement rate 100% monthly; source=Retention job logs",
      "V&V focus": "Retention job correctness, delete logs",
      "Related Reqs": "FR-016",
      "DevSecOps / Security": "Automated deletion job; deletion audit entries",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-017",
      "Module": "Storage",
      "Component": "Audit-write deletion events",
      "Description": "Log deletion actor id and ISO-8601 timestamp immutably",
      "Interface": "I-17: deletion audit log",
      "Potential Metrics": "Deletion audit entries 100% per delete; source=Audit store",
      "V&V focus": "Audit integrity and append-only writes",
      "Related Reqs": "FR-017",
      "DevSecOps / Security": "Append-only audit store; retention for audit logs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-018",
      "Module": "Storage",
      "Component": "Periodic backups of dataset",
      "Description": "Perform regular backups with retention and restore tests",
      "Interface": "I-18: backup schedule",
      "Potential Metrics": "Daily backup success rate >=99.0% PT30D; source=Backup logs",
      "V&V focus": "Backup restore verification",
      "Related Reqs": "FR-018",
      "DevSecOps / Security": "Encrypted backups; restore drills; access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-019",
      "Module": "Admin UI",
      "Component": "Admin login screen (responsive)",
      "Description": "Responsive admin login with session handling",
      "Interface": "I-19: GET/POST /admin/login",
      "Potential Metrics": "Median admin login time <=2.0 s PT30D; source=RUM",
      "V&V focus": "Auth flow and UI accessibility",
      "Related Reqs": "FR-019",
      "DevSecOps / Security": "OIDC flows; MFA prompt; CSRF protection on login forms; TLS",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-020",
      "Module": "Admin UI",
      "Component": "List feedback sorted by timestamp",
      "Description": "Admin list view sorted newest-first using UUIDv7 ordering",
      "Interface": "I-20: GET /admin/feedback?sort=time",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; source=API-Service",
      "V&V focus": "Sorting correctness, pagination",
      "Related Reqs": "FR-020",
      "DevSecOps / Security": "RBAC checks; query rate-limits; audit read logs; CSRF tokens for admin actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-021",
      "Module": "Admin UI",
      "Component": "View full feedback details",
      "Description": "Detail view shows text, timestamp, contact_intent, encrypted email marker",
      "Interface": "I-21: GET /admin/feedback/{id}",
      "Potential Metrics": "Detail retrieval success 100% PT30D; source=API-Service",
      "V&V focus": "Decryption/display rules, masking",
      "Related Reqs": "FR-021",
      "DevSecOps / Security": "Decryption via authorized role; masking for emails; access audit; CSRF protection",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-022",
      "Module": "Admin UI",
      "Component": "Delete feedback with confirm dialog",
      "Description": "Admin delete requires explicit confirm and second-step verification",
      "Interface": "I-22: DELETE /admin/feedback/{id}",
      "Potential Metrics": "Confirmed-deletes ratio >=99% PT30D; source=Audit logs",
      "V&V focus": "Confirm dialog enforcement, race conditions",
      "Related Reqs": "FR-022",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; audit log actor id; RBAC and CSRF tokens; confirmation UI",
      "Metric Owner": "AdminOps"
    },
    {
      "Requirement ID": "FR-023",
      "Module": "Admin UI",
      "Component": "Log deletion actor ID and ISO-8601 timestamp",
      "Description": "Record actor id and timestamp in audit log on delete",
      "Interface": "I-23: deletion audit entry",
      "Potential Metrics": "Audit entry present 100% per deletion; source=Audit store",
      "V&V focus": "Audit consistency and tamper-evidence",
      "Related Reqs": "FR-023",
      "DevSecOps / Security": "Immutable audit store; retention and access controls",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-024",
      "Module": "Admin UI",
      "Component": "Search and export feedback list",
      "Description": "Admin can search and export CSV with permission checks",
      "Interface": "I-24: GET /admin/feedback?query & export",
      "Potential Metrics": "Export success rate >=99.0% PT30D; source=API-Service",
      "V&V focus": "Permission enforcement, export data masking",
      "Related Reqs": "FR-024",
      "DevSecOps / Security": "Export masking; RBAC; export job audit; CSRF tokens on export actions",
      "Metric Owner": "AdminUX"
    },
    {
      "Requirement ID": "FR-025",
      "Module": "Admin Authentication",
      "Component": "Authenticate admins via OIDC IdP capability",
      "Description": "Admin auth via OIDC-capable IdP; support MFA",
      "Interface": "I-25: OIDC flow endpoints",
      "Potential Metrics": "Admin auth failure rate <=1.0% PT30D; source=Auth logs",
      "V&V focus": "OIDC flow conformance, token validation",
      "Related Reqs": "FR-025",
      "DevSecOps / Security": "OIDC capability; token validation; MFA enforcement; secret rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-026",
      "Module": "Admin Authentication",
      "Component": "Enforce session cookie flags Secure/HttpOnly/SameSite",
      "Description": "Set Secure, HttpOnly, SameSite on admin session cookies",
      "Interface": "I-26: session cookie policy",
      "Potential Metrics": "Cookies with flags 100% (audit) PT30D; source=Auth audit",
      "V&V focus": "Cookie attribute verification",
      "Related Reqs": "FR-026",
      "DevSecOps / Security": "Cookie flags enforced; SameSite=Strict for admin; cookie audits",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-027",
      "Module": "Admin Authentication",
      "Component": "Idle session timeout PT30M",
      "Description": "Idle admin sessions expire after PT30M inactivity",
      "Interface": "I-27: session timeout policy",
      "Potential Metrics": "Idle session expiry enforcement 100% daily audit; source=Session store",
      "V&V focus": "Timeout enforcement",
      "Related Reqs": "FR-027",
      "DevSecOps / Security": "Session store TTL PT30M; inactivity checks; session rotation",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-028",
      "Module": "Admin Authentication",
      "Component": "Enforce MFA for admin accounts",
      "Description": "Require MFA for all admin logins",
      "Interface": "I-28: MFA enrollment and challenge",
      "Potential Metrics": "MFA enabled rate 100% for admin accounts; source=Auth",
      "V&V focus": "MFA enforcement tests",
      "Related Reqs": "FR-028",
      "DevSecOps / Security": "MFA challenge on auth; backup codes; enrollment audit",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-029",
      "Module": "Admin Authentication",
      "Component": "Role-based access control for UI actions",
      "Description": "RBAC for admin UI actions and exports",
      "Interface": "I-29: RBAC policy checks",
      "Potential Metrics": "Unauthorized access attempts =0 PT90D; source=Auth audit",
      "V&V focus": "RBAC policy correctness",
      "Related Reqs": "FR-029",
      "DevSecOps / Security": "RBAC enforcement; policy tests; permission audit logs",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-030",
      "Module": "Admin Authentication",
      "Component": "Audit admin login and privilege changes",
      "Description": "Log admin login events and role changes with actor id and timestamp",
      "Interface": "I-30: admin audit log",
      "Potential Metrics": "Admin audit entries 100% per event; source=Audit store",
      "V&V focus": "Audit completeness and integrity",
      "Related Reqs": "FR-030",
      "DevSecOps / Security": "Append-only admin audit; alert on suspicious changes",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-031",
      "Module": "Privacy & GDPR",
      "Component": "Display email-use notice when email requested",
      "Description": "Show notice explaining email use, retention and opt-out",
      "Interface": "I-31: privacy notice UI",
      "Potential Metrics": "Notice shown on email field 100% (UI test) PT30D; source=UI tests",
      "V&V focus": "Notice visibility and content accuracy",
      "Related Reqs": "FR-031",
      "DevSecOps / Security": "Privacy text versioning; UI tests; consent link to policy",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-032",
      "Module": "Privacy & GDPR",
      "Component": "Capture consent and contact-intent flags",
      "Description": "Store consent and contact_intent flags with timestamp and actor id",
      "Interface": "I-32: consent storage API",
      "Potential Metrics": "Consent recorded 100% when checkbox checked; source=DB audit",
      "V&V focus": "Consent auditability",
      "Related Reqs": "FR-032",
      "DevSecOps / Security": "Immutable consent records; linkage to submissions; audit",
      "Metric Owner": "Product"
    },
    {
      "Requirement ID": "FR-033",
      "Module": "Privacy & GDPR",
      "Component": "Provide data access and deletion request process",
      "Description": "Admin process and API to fulfill access/deletion requests",
      "Interface": "I-33: data subject request endpoints",
      "Potential Metrics": "DSR fulfillment time <=30 days per request; source=Compliance logs",
      "V&V focus": "Request verification and completion",
      "Related Reqs": "FR-033",
      "DevSecOps / Security": "Verified request workflow; audit trail; auth for DSRs",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-034",
      "Module": "Privacy & GDPR",
      "Component": "Support data deletion upon verified request",
      "Description": "Delete or anonymize records on verified deletion requests, log action",
      "Interface": "I-34: verified delete workflow",
      "Potential Metrics": "Verified deletions completed within 30 days; source=Audit store",
      "V&V focus": "Deletion verification and audit",
      "Related Reqs": "FR-034",
      "DevSecOps / Security": "DeletionNonce verification; deletion audit entries",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-035",
      "Module": "Privacy & GDPR",
      "Component": "Expose retention period to admins",
      "Description": "Display retention policy and next-delete dates in admin UI",
      "Interface": "I-35: retention info UI",
      "Potential Metrics": "Retention info accuracy 100% (audit) PT30D; source=Storage",
      "V&V focus": "Retention metadata correctness",
      "Related Reqs": "FR-035",
      "DevSecOps / Security": "Retention metadata generation; UI access controls",
      "Metric Owner": "Storage"
    },
    {
      "Requirement ID": "FR-036",
      "Module": "Privacy & GDPR",
      "Component": "Record consent and processing purpose in audit logs",
      "Description": "Append consent and processing purpose to audit trail immutably",
      "Interface": "I-36: consent audit entries",
      "Potential Metrics": "Consent audit entries 100% per consent; source=Audit store",
      "V&V focus": "Audit linkage and immutability",
      "Related Reqs": "FR-036",
      "DevSecOps / Security": "Append-only audit; retention and access control",
      "Metric Owner": "Compliance"
    },
    {
      "Requirement ID": "FR-037",
      "Module": "Admin Authentication",
      "Component": "Session rotation policy and rotatedAt field",
      "Description": "Rotate session tokens on privilege change and record rotatedAt ISO-8601",
      "Interface": "I-27b: session rotation endpoint /session/rotate",
      "Potential Metrics": "Session rotation performed 100% on privilege change; source=Auth logs",
      "V&V focus": "Rotation enforcement, rotatedAt timestamp correctness",
      "Related Reqs": "FR-037",
      "DevSecOps / Security": "Rotate tokens on privilege change; record rotatedAt; rotation tests",
      "Metric Owner": "Auth"
    },
    {
      "Requirement ID": "FR-038",
      "Module": "Submission Processing",
      "Component": "DeletionNonce TTL verification",
      "Description": "Verify deletionNonce TTL before accepting admin delete requests",
      "Interface": "I-22b: deletionNonce verification in DELETE /admin/feedback/{id}",
      "Potential Metrics": "Rejected deletes due to expired nonce <=0% PT30D; source=API-Service",
      "V&V focus": "Nonce TTL correctness, rejection behavior",
      "Related Reqs": "FR-038",
      "DevSecOps / Security": "DeletionNonce TTL PT15M; verify server-side; audit rejection events; CSRF tokens for admin delete",
      "Metric Owner": "AdminOps"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: email field encryption \u2014 preserve contact capability | # DEC-02: UUIDv7 identifiers \u2014 time-sortable IDs"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-005 I-5 Missing rate-limit",
    "impact": "High",
    "recommendation": "Add throttling for POST /feedback; define thresholds",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-025 I-25 Missing session rotation",
    "impact": "Medium",
    "recommendation": "Define session rotation policy and rotatedAt field",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.1.1 FR-022 I-22 deletionNonce partial",
    "impact": "Medium",
    "recommendation": "Add deletionNonce TTL verification in API-Service",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.2 Feedback Submission metric instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Encryption vs hashing inconsistency",
    "impact": "Medium",
    "recommendation": "Decide and document email storage method",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Show DevSecOps / Security: rate-limit 10 req/IP/PT1M on FR-005"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show FR-037 row: rotate tokens and record rotatedAt field"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Show FR-038 (I-22b): server-side DeletionNonce TTL verification and metric"
    },
    {
      "gapID": "7f6e8d",
      "newStatus": "Resolved",
      "notes": "Show DevSecOps / Security: CSRF tokens referenced across admin flows"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Show FR-005 Metric Owner=SRE and rate-limit metric/source defined"
    },
    {
      "gapID": "d0923d",
      "newStatus": "Resolved",
      "notes": "Show FR-003 DevSecOps: field-level envelope encryption (KMS) specified"
    }
  ]
}
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are an expert software engineer and SQA.
        We are currently at iteration (macro=2, phase=FeasibilityStudy, mini=2).

        Your job is to follow these rules and the downgrade guardrail, analyze updated artifact text against artifact-specific issues from a previous iteration, and for each **of those issues** decide on **its** status and in the end output valid JSON.

        Follow these rules:
        For each issue, assign a **newStatus** using the stricter rules below.
          - "Resolved"    – the artifact *demonstrably* satisfies the gap’s acceptance-criterion **and** supplies supporting evidence (e.g., test result that meets the stated target, explicit trace-link, measured KPI ≥ goal).
          - "InProgress"  – the artifact introduces a *specific remedial element* (e.g., placeholder trace tag, draft test script, WIP pull-request) **but lacks final evidence**. Merely restating the issue short description/recommendation in artifact text does **not** qualify.
          - "KnownIssue"  – no relevant change toward closing the gap is present.

        Downgrade guardrail – treat the issue’s incoming “knownIssue” field as its previous status. You may maintain or upgrade a status (KnownIssue → InProgress → Resolved). **Never downgrade** unless the artifact explicitly removes earlier evidence; if you do, explain why in `notes` (≤ 20 words).

        ─────────────────────────────── EDGE-CASE POLICY ───────────────────────────────
        • If an artifact both adds and removes evidence for the same issue, judge by the net effect.
        • When evidence is ambiguous, choose the safer label (KnownIssue over InProgress).
        • One evidence line may close multiple gaps; evaluate each gap independently.
        • Keep each `notes` entry ≤ 20 words; start with a verb and cite the key artifact field (e.g., “Trace-to-US column”).
        • Whole vs row/column precedence (newer gap wins):
         – If a newer Row/Column gap refines an older Whole-artifact gap, mark the Whole-artifact gap **Resolved** with notes "Refined to <row gapID>".
         – If a newer Whole-artifact gap covers several existing Row/Column gaps, mark those row/column gaps **Resolved** with notes "Superseded by <whole gapID>".

        ─────────────────────────── REFERENCE EXAMPLES (SIMULATION) ───────────────────────────
        Example A — Resolved
        • Issue: gapID "794d85" (Actor-ID traceability), previous status KnownIssue.
        • Updated artifact now shows a new column "Trace-to-US" with entries like "Actor-User → US-01".
        {
        "gapID": "794d85",
        "newStatus": "Resolved",
        "notes": "Trace-to-US column completes Actor links"
        }

        Example B — InProgress
        • Issue: gapID "9a56b0" (p95 response ≤ 400 ms), previous status KnownIssue.
        • Artifact adds a "PerfTestPlan" section **(remedial element)**, but no exact number is assigned yet.
        {
        "gapID": "9a56b0",
        "newStatus": "InProgress",
        "notes": "PerfTestPlan added; numerical criteria missing"
        }

        Example C — Forbidden Downgrade
        • Issue: gapID "263e78" (zero-lint static analysis), previous status InProgress — earlier artifact already listed "ESLintConfig": "strict".
        • Current artifact is unchanged (config still present, nothing removed).
        {
        "gapID": "263e78",
        "newStatus": "InProgress",
        "notes": "No new evidence; retain InProgress"
        }

        Example D — Whole superseded by row (refinement)
        Older: gapID "aa11bb" → locator `Whole artifact`
        Artifact now shows the issue only in Row I-07
        Output:
        {
          "gapID": "aa11bb",
          "newStatus": "InProgress",
          "notes": "Locator narrowed to Row I-07"
        }

        Example E — Whole supersedes rows
        Existing gapID "bb22cc" had locator `Row I-07`
        Artifact now shows KPI column missing in multiple rows → set locator to `Whole artifact`
        Output:
        {
          "gapID": "bb22cc",
          "newStatus": "KnownIssue",
          "notes": "Locator widened to Whole"
        }

        Example F — Still Known
        • Issue: gapID "d0d0d0" (KPI column), previous status **KnownIssue**.
        • Updated artifact shows no fix and no new evidence.

        {
          "gapID": "d0d0d0",
          "newStatus": "KnownIssue",
          "notes": "No change; gap persists"
        }

        Below is our updated artifact text:
        {
  "artifactIndex": "1.1.2",
  "artifactName": "Domain Context Table",
  "columns": [
    "Category",
    "Details",
    "Quality Attributes",
    "Potential Metrics",
    "DevSecOps / Security",
    "Related Reqs",
    "Metric Owner"
  ],
  "rows": [
    {
      "Category": "Admin Access & Auth",
      "Details": "Admin login via OIDC-capable IdP; RBAC and MFA required",
      "Quality Attributes": "Confidentiality, Least-Privilege, Availability",
      "Potential Metrics": "MFA enabled rate =100 % PT30D; admin auth failure rate <=1.0 % PT30D; source=Auth logs",
      "DevSecOps / Security": "OIDC capability; MFA enforcement; Secure/HttpOnly/SameSite=Strict; CSRF tokens for admin flows; secret rotation",
      "Related Reqs": "FR-025, FR-026, FR-028, FR-029, FR-030",
      "Metric Owner": "Auth"
    },
    {
      "Category": "Backup & Restore",
      "Details": "Periodic backups with retention and restore verification",
      "Quality Attributes": "Durability, Recoverability, Integrity",
      "Potential Metrics": "Daily backup success rate >=99.0 % PT30D; restore drill success >=95 % PT90D; source=Backup logs",
      "DevSecOps / Security": "Encrypted backups; access-limited key material; restore drills; backup retention policy",
      "Related Reqs": "FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Feedback Submission",
      "Details": "Public POST /feedback accepts freeform text; server assigns UUIDv7 id and ISO-8601 timestamp",
      "Quality Attributes": "Reliability, Availability, Input Validation, Abuse-resistance",
      "Potential Metrics": "Submission success rate >=99.0 % PT30D; rate-limit throttle rate <=1 % PT30D; source=API-Service logs",
      "DevSecOps / Security": "Server-side schema validation; XSS sanitization; TLS; rate-limit enforcement; request logging; vuln scans",
      "Related Reqs": "FR-001, FR-005, FR-007, FR-008",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Identifier Strategy",
      "Details": "Time-sortable UUIDv7 for feedback and admin actions",
      "Quality Attributes": "Ordering, Uniqueness, Traceability",
      "Potential Metrics": "UUID collision rate =0 observed PT90D; source=DB/ID-gen logs",
      "DevSecOps / Security": "Server-side UUIDv7 generation; include id in audit entries; monitor collisions",
      "Related Reqs": "FR-005, FR-011",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Monitoring & Metrics",
      "Details": "Collect service, DB and auth metrics; alert on key SLO breaches",
      "Quality Attributes": "Observability, Operability, SLA compliance",
      "Potential Metrics": "Alert when submission success rate <99.0 % over PT30D; dashboard RBAC audit PT90D; source=Monitoring",
      "DevSecOps / Security": "Secure metrics ingestion; RBAC for dashboards; metrics retention PT90D; pipeline scans",
      "Related Reqs": "FR-012, FR-030",
      "Metric Owner": "SRE"
    },
    {
      "Category": "Optional Email",
      "Details": "Optional email field; store only when provided; mark contact_intent",
      "Quality Attributes": "Privacy, Data Minimization, Integrity",
      "Potential Metrics": "% submissions with email PT30D (vanity); encrypted-at-rest verified 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Deterministic field-level envelope encryption for emails; TLS in transit; access audit; mask in exports",
      "Related Reqs": "FR-003, FR-010, FR-009",
      "Metric Owner": "Security"
    },
    {
      "Category": "Privacy & Consent",
      "Details": "Show email-use notice and capture consent when email requested",
      "Quality Attributes": "Privacy, Legal Compliance, Transparency",
      "Potential Metrics": "Consent recorded =100 % when checkbox checked PT30D; source=DB audit",
      "DevSecOps / Security": "Store consent timestamp and purpose immutably; expose opt-out; consent audit trails",
      "Related Reqs": "FR-004, FR-031, FR-032, FR-036",
      "Metric Owner": "Product"
    },
    {
      "Category": "Retention & Deletion",
      "Details": "Automated retention P365D; support verified deletion requests and retain deletion audit",
      "Quality Attributes": "Compliance, Auditability, Recoverability",
      "Potential Metrics": "Retention enforcement rate =100 % monthly; verified deletion completion <=30 days per request; source=Retention logs",
      "DevSecOps / Security": "Retention job with immutable deletion audit entries; deletionNonce TTL PT15M; RBAC for delete actions",
      "Related Reqs": "FR-016, FR-017, FR-033, FR-034",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Search & Export",
      "Details": "Admin search and CSV export with permission checks and masking",
      "Quality Attributes": "Correctness, Performance, Data Minimization",
      "Potential Metrics": "Export success rate >=99.0 % PT30D; masked fields present 100 % PT30D; source=API-Service",
      "DevSecOps / Security": "Permission enforcement; mask encrypted emails in exports; audit export events; CSRF tokens on export actions",
      "Related Reqs": "FR-024",
      "Metric Owner": "AdminUX"
    },
    {
      "Category": "Storage & Persistence",
      "Details": "Persist feedback in SQL RDBMS with least-privilege DB accounts",
      "Quality Attributes": "Durability, Consistency, Performance",
      "Potential Metrics": "DB write latency p95 <=200 ms PT30D; insert success rate >=99.0 % PT30D; source=DB metrics",
      "DevSecOps / Security": "Encrypt sensitive fields at rest via envelope encryption; scoped DB roles; daily backups; TLS to DB",
      "Related Reqs": "FR-013, FR-014, FR-015, FR-018",
      "Metric Owner": "Storage"
    },
    {
      "Category": "Admin UI: Feedback Management",
      "Details": "List and detail views sorted newest-first; delete requires confirm and deletionNonce verification",
      "Quality Attributes": "Usability, Performance, Safety, Tamper-resistance",
      "Potential Metrics": "List latency p95 <=300 ms PT30D; confirmed-deletes ratio >=99 % PT30D; source=API-Service and Audit store",
      "DevSecOps / Security": "Confirm dialog; server verifies deletionNonce TTL PT15M; log deletion actor id and ISO-8601 timestamp immutably; CSRF tokens on admin forms",
      "Related Reqs": "FR-020, FR-021, FR-022, FR-023, FR-038",
      "Metric Owner": "AdminOps"
    },
    {
      "Category": "Submission Processing",
      "Details": "Server-side schema validation, duplicate detection, sanitization, idempotent responses",
      "Quality Attributes": "Correctness, Safety, Idempotency",
      "Potential Metrics": "Rejected payload rate <=1.0 % PT30D; XSS vulnerability count =0 PT30D; source=Security scans",
      "DevSecOps / Security": "Sanitize content for admin views; duplicate suppression; idempotency-safe error codes; sanitizer library pinning",
      "Related Reqs": "FR-007, FR-008, FR-009, FR-012",
      "Metric Owner": "Backend"
    },
    {
      "Category": "Session Rotation",
      "Details": "Rotate session tokens on privilege change and record rotatedAt ISO-8601; rotation TTL PT8H",
      "Quality Attributes": "Security, Traceability",
      "Potential Metrics": "Session rotation performed =100 % on privilege change PT30D; rotatedAt present for rotated sessions PT30D; source=Auth logs",
      "DevSecOps / Security": "Rotate tokens on privilege change; rotation endpoint; session TTL PT8H; audit rotation events",
      "Related Reqs": "FR-037",
      "Metric Owner": "Auth"
    }
  ],
  "metadata": {
    "notesFromLLM": "# DEC-01: Deterministic email encryption \u2014 eliminates hash vs encrypt conflict"
  }
}

        And here are the still-open (unresolved) artifact-specific issues from a previous iteration (micro/phase/macro):
        [
  {
    "gapID": "0a5003",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Feedback Submission rate-limit missing",
    "impact": "High",
    "recommendation": "Define rate-limit policy and thresholds for POST /feedback",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2ac8a1",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin UI: Feedback Management deletionNonce missing",
    "impact": "Medium",
    "recommendation": "Add server-side deletionNonce with TTL and verification",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.2 Admin Access & Auth session rotation unspecified",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "9d77eb",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Session rotation policy I-? InProgress",
    "impact": "Medium",
    "recommendation": "Specify session rotation mechanism and rotation TTL",
    "knownIssue": "InProgress"
  },
  {
    "gapID": "7f6e8d",
    "gapType": "SecurityGap",
    "shortDescription": "1.1.0 Whole artifact cross-artifact CSRF missing",
    "impact": "Medium",
    "recommendation": "Add CSRF tokens or same-site anti-CSRF for admin flows",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "2f71be",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.0 Submission reliability instrumentation owner missing",
    "impact": "Medium",
    "recommendation": "Assign instrumentation owner and source for rate-limit metric",
    "knownIssue": "KnownIssue"
  },
  {
    "gapID": "d0923d",
    "gapType": "MissedRequirement",
    "shortDescription": "1.1.1.1 FR-003 Email storage method conflict",
    "impact": "Medium",
    "recommendation": "Align hashing vs encryption method; pick one and document",
    "knownIssue": "KnownIssue"
  }
]


        Return ONLY valid JSON with this structure:
        {
          "verificationResults": [
            {
              "gapID": "same ID as in open_issues",
              "newStatus": "Resolved | InProgress | KnownIssue",
              "notes": "≤ 20 words rationale"
            },
            ...
          ]
        }

        No extra text outside JSON, no triple backticks or code fencing. **Do not include trailing commas.**
        
DEBUG (LLMClient): GPT Response:
 {
  "verificationResults": [
    {
      "gapID": "0a5003",
      "newStatus": "Resolved",
      "notes": "Show 'Feedback Submission' Potential Metrics and DevSecOps include rate-limit thresholds"
    },
    {
      "gapID": "2ac8a1",
      "newStatus": "Resolved",
      "notes": "Show 'Admin UI: Feedback Management' Details/DevSecOps include deletionNonce verification TTL PT15M"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show 'Session Rotation' row specifies token rotation mechanism and TTL PT8H"
    },
    {
      "gapID": "9d77eb",
      "newStatus": "Resolved",
      "notes": "Show 'Session Rotation' row specifies token rotation mechanism and TTL PT8H"
    },
    {
      "gapID": "7f6e8d",
      "newStatus": "Resolved",
      "notes": "Show CSRF tokens present in Admin, Admin UI, and Export rows"
    },
    {
      "gapID": "2f71be",
      "newStatus": "Resolved",
      "notes": "Show 'Feedback Submission' Metric Owner set to SRE"
    },
    {
      "gapID": "d0923d",
      "newStatus": "Resolved",
      "notes": "Show 'Optional Email' uses deterministic envelope encryption; metadata DEC-01 clarifies"
    }
  ]
}
DEBUG: Actually resolved 7 issues in mini iteration (macro=2, phase=FeasibilityStudy, mini=2).
CALL-VERIFY 2 FeasibilityStudy 2
DEBUG: Using cached response for identical prompt.
DEBUG: Using cached response for identical prompt.
DEBUG: Actually resolved 7 issues in mini iteration (macro=2, phase=FeasibilityStudy, mini=2).
**************************************************
DEBUG (LLMClient): Calling OpenAI with prompt:
 
        You are a senior reviewer facilitating a retrospective for iteration
        (macro=2, phase=FeasibilityStudy, mini=2).

        Your job is to follow *Analysis workflow*, analyze issues and decisions, cluster them, present them as locator-prefixed pairs of lessons learned/root causes, if necessary - suggest and implement rare process changes.
        Do not output issues by just rephrasing them as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.

        ### Analysis workflow (follow exactly)

        1. **Collect** all *open, non-waived* issues for this mini-iteration **including carried-over ones; de‑duplicate by canonical ID**; **if none open, emit no issue‑based pairs**.
        2. For each issue, **where visible and in this phase,** identify point of origin (exact artifact index) **if point of origin is in current phase - in that case shown as Novelty → N (New) (internal; do not emit 'N')** and issue propagation over artifacts; **else skip**.        3. Cluster all open issues by root causes of those issues. Map root causes to either one artifact, or multiple, or global.
        4. For each root cause formulate **non-redundant (not a restatement)** lesson learned (create a pair "root cause - lesson learned").
        5. **For issues**, decide if presenting each pair "root cause - lesson learned" to one artifact, multiple, or all (global) artifacts is necessary. Issue may be raised at the "wrong" artifact and may actually "belong" to other place. Use that as locator; **placeholders are non‑owners**.
           • If a root cause applies to several artifacts and you choose per‑artifact placement, **MUST emit one pair per affected artifact** (same text, different locator); these count toward the 20‑item cap
           • Use `global-xx` **whenever** **scope‑signaled** cross‑artifact or owner‑unclear; do not mix dotted indices on a `global-xx` line.
        6. Decide, if presenting each pair "root cause - lesson learned" to necessary artifact(s) is enough to fix the root cause: if the table(s) to which the "locator" points can accommodate that lesson learned **using visible schema only (exact labels from artifact_info_text)**; **prefer column-level; if uncertain, default to (Whole artifact)**.
        7. **Normalise** artifact and column names → lower-case, strip spaces/dashes/underscores/punctuation. Note: Normalization is for comparison only, never for emission.
        8. **Skip waived gaps** – if a gap is linked to empty "Related Reqs" *and* its `artifactIndex` starts with **1.1.0 – 1.1.4**, drop it **only when explicitly evidenced** from further analysis (**else do not waive**) (generate **no** rootCause, lesson, or processChanges for that gap).
        9. **Harvest decision crumbs** – every line under “DECISION-CRUMBS”.
          • Pattern `# DEC-nn: <WHAT> - <WHY>`
          • Cluster identical <WHAT> across artifacts (**case/space/punctuation‑normalised only; exact‑match WHAT**, ≤20 clusters, **stable** deterministic sort); **do not merge distinct <WHAT>; no synonyms or modifiers**.
          • **Major‑Decision Filter** - convert a crumb to a decision‑based pair **only if ≥2 hold or high‑impact singleton → MUST emit as `global-xx` first**; else drop**:
            (a) Cross‑artifact or cross‑phase impact; (b) High cost‑of‑change/irreversibility; (c) Security/compliance/identity baseline;
            (d) Cross‑service API/protocol or shared data‑schema baseline; (e) SLO/KPI framework standardisation.
          • **Global‑only locator** - decision‑based pairs MUST use `global-xx` (never artifact‑indexed); **emit first; never demote**; issue‑based pairs may also use global‑xx when scope is cross‑artifact **or owner‑unclear**.
          • **Cap & priority** - **strictly** keep at most **5** decision‑based pairs per retrospective; if >5 meet the filter, keep the highest‑impact by priority: **if impact unclear, sort by category**:
            Security/Compliance/Identity → Data‑model/Schema → Cross‑service Interfaces/APIs → Observability/KPI framework → Other.
          • In each decision-based pair, include only the **shortest meaningful (fewest words) ASCII‑only** **verbatim‑substring** (from <WHY> only) **with no extra words**; **strictly** do not include dotted artifact indexes anywhere in a global‑xx line (**0 dotted indices; 0 parentheses**); **prepend "because " on both; preserve meaning**.
          • In each decision-based pair, both rootCauses *AND* lessons_learned must contain **clear** <WHAT> and <WHY>, for example, "REST chosen for API because ..." so that downstream and upstream artifacts will be created using this decision.
          • Treat each cluster as a candidate root cause/lesson learned **(decision‑based)** (this mechanism will be later used to propagate project critical decisions not only downstream in current macroiteration, but also upstream in next).
          • If major decision made is correct and must be made visible to upstream artifacts in next iteration, output such "root cause - lesson learned" pair with "global-xx" locator.
        10. For each root‑cause cluster **and each chosen locator** produce one pair of "rootCauses"–"lessons_learned", prefixed with that locator; keep the pair aligned by index *i* across both arrays. After de-duplication, **strictly stably sort and de-duplicate pairs jointly (never separately)**, then split into the two arrays; **re-sort/renumber after Step 5 expansion**.
        11. **processChanges** – optional, *current phase only* (**others: skip**), **rare** (**default: []**), only if **lessons insufficient** and highly beneficial and locator‑pointed table(s) cannot accommodate textual lesson learned, ≤ 1 object per affected artifact (except extra objects for `add_table`), ordered by artifactIndex.
          • `type` ∈ {`add_columns`, `modify_instructions`, `add_table`}.
          • For `add_columns`, compare the *normalised* new name against existing names (see Analysis‑workflow **step 7**); **lexically** skip if a near‑duplicate exists.
        12. **Validate**: keys exactly `rootCauses`, `lessons_learned`, `processChanges`; arrays de-duplicated, ≤ 20 items `rootCauses`, ≤ 20 items `lessons_learned`; ≤ 5 items `processChanges`; every text item ≤ 30 words; output must be valid JSON.
        13. If any check fails, regenerate silently until it passes (no apology text).
        14. If clusters exceed 20, merge semantically similar **issues** **before Step 5 expansion** until rootCauses ≤ 20.
        15. If more than 5 schema fixes are possible, keep the 5 highest-impact ones (by possible effect: Critical → High → Medium → Low).

        **HARD-FAIL** if any rootCause, **lessons_learned** or processChanges cites a gap whose only remaining issue is an **empty “Related Reqs” cell** in artifacts 1.1.0 – 1.1.4.

        ## Guiding principle for processChanges
        ## • First diagnose rootCauses / lessons_learned.
        ## • If the problem would still recur after applying lessons (e.g. current columns/instructions can’t express the fix), add a column and/or sharpen instructions - if you expect that to be really beneficial.
        ## • Create a new table only when existing artifacts cannot capture the data clearly, even after adding columns/instructions - so, if you see a principle gap in pipeline.
        ## • If a crumb decision implies a structural change, emit the minimal set of processChanges needed across all affected artifacts **in this phase**.
        ## • If not sure whether to implement process change, or no process changes needed, return "processChanges": [].

        Your tasks
        1. rootCauses        – diagnose recurring patterns from stats / artifacts / decision crumbs .
        2. lessons_learned   – actionable, **non-redundant** advice to eliminate those patterns.
        3. processChanges – one schema fix per object if absolutely needed (add_columns · modify_instructions · add_table).

        Here are decision crumbs:
        DECISION-CRUMBS:
1.1.1.1: # DEC-01: email field encryption — preserve contact capability | # DEC-02: UUIDv7 identifiers — time-sortable IDs
1.1.2: # DEC-01: Deterministic email encryption — eliminates hash vs encrypt conflict

        Below is the list of all issues and statuses of current iteration:
        Legend:
• Novelty → N (New) | K (Known) | I (In-Progress) | R (Resolved)
• Impact  → C (Critical) | H (High) | M (Medium) | L (Low)
  Cell format = <Novelty>/<Impact>  e.g. N/H

ISSUE-TABLE 1/1
| Artifact | 0a5003 | 2ac8a1 | 2f71be | 5fe616 | 7f6e8d | 9d77eb | d0923d | d6e0ba |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 1.1.0 Input |  |  | K/M | N/M | K/M | I/M |  | I/L |
| 1.1.1 Main Scenario Table with N modules | N/M | I/M | K/M | K/M |  | N/M | N/M | I/L |
| 1.1.1.1 Modules Components Description Table | K/H | I/M | N/M |  | N/M | K/M | K/M |  |
| 1.1.2 Domain Context Table | K/H | K/M | K/M |  | K/M | K/M | K/M |  |

Canonical issue descriptions:
- 0a5003: 1.1.2 Feedback Submission rate-limit missing
- 2ac8a1: 1.1.2 Admin UI: Feedback Management deletionNonce missing
- 2f71be: 1.1.0 Submission reliability instrumentation owner missing
- 5fe616: 1.1.0 Related Reqs placeholders
- 7f6e8d: 1.1.0 Whole artifact cross-artifact CSRF missing
- 9d77eb: 1.1.0 Session rotation policy I-? InProgress
- d0923d: 1.1.1.1 FR-003 Email storage method conflict
- d6e0ba: 1.1.0 Whole artifact cross-artifact missing security/privacy baselines

        Here is the current phase artifact list and their columns:
        Current Artifacts:
Artifact 1.1.0 => columns: Input Item, Details, Related Reqs
Artifact 1.1.1 => columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security
Artifact 1.1.1.1 => columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security, Metric Owner
Artifact 1.1.2 => columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs, Metric Owner

        Here is the current iteration stats:
        ITERATION-STATS: total=7, new=0, resolved=7, stillOpen=0, criticalOpen=0, highOpen=1, deltaOpen=-3

        Here is the current gap type snapshot:
        GAP-TYPE SNAPSHOT: 

        Here is the current artifact overview:
        ARTIFACT OVERVIEW:
── 1.1.0  Input
   • type: table  |  columns: Input Item, Details, Related Reqs  |  open gaps: 5
   • instructions: List initial high-level inputs for a software project in each row   List consolidated security/privacy baseline items in each row with Details and populate Related Reqs for each control
── 1.1.1  Main Scenario Table with N modules
   • type: table  |  columns: Module ID, Module, Action 1, Action 2, ..., Action n, Related Reqs, DevSecOps / Security  |  open gaps: 7
   • instructions: Break down major modules or scenarios, listing each with relevant actions in each row. Create as many actions per module as needed to be in line with client specifications.   Break down major modules; require each module to declare compliance to the project security baseline and populate DevSecOps / Security and Related Reqs columns for traceability   For each module action, declare rate-limit, session-rotation policy, CSRF protection, deletionNonce handling and populate DevSecOps / Security column
── 1.1.1.1  Modules Components Description Table
   • type: table  |  columns: Requirement ID, Module, Component, Description, Interface, Potential Metrics, V&V focus, Related Reqs, DevSecOps / Security, Metric Owner  |  open gaps: 6
   • instructions: Use modules and actions from table 1.1.1 Main Scenario Table with N modules. Actions from that table become Components here. Make sure all Actions are included as components. Assign Requirement ID to each Component   For each component assign Requirement ID, map to a security control and owner, populate Related Reqs, and link potential metrics and V&V focus to those controls
── 1.1.2  Domain Context Table
   • type: table  |  columns: Category, Details, Quality Attributes, Potential Metrics, DevSecOps / Security, Related Reqs, Metric Owner  |  open gaps: 6
   • instructions: List key domain categories, capturing high-level attributes and metrics relevant to security or DevSecOps.


        Formatting rules
        • `rootCauses` and `lessons_learned`: telegraphic, ≤ 30 words, no period, always prefixed by locator.
        • Word‑count rule: hyphen‑joined terms count as one word (e.g., rate‑limit)
        • Remove duplicates.
        • **Strictly sort pairs jointly by locator within buckets** to preserve index alignment; order global‑xx before numeric indices; for numeric indices use **strict natural sort** by dot‑separated numbers (e.g., 1.1.4 < 1.1.10 < 1.2) **not lexicographic**.
        • Arrays must be sorted by locator **within buckets**, with global‑xx ordered before numeric indices.
        • Assign global‑1..n with decision‑based pairs capped at 5 and numbered first; **start arrays with global‑xx if any;** then number any issue‑based global pairs; sort by priority (above) then by <WHAT>; **renumber after Step 5**.
        • Hard-fail: any rootCause or lesson > 30 words will be rejected.
        • For column‑level advice, add the column name in parentheses. For row‑level advice, add the row name in parentheses; **if unknown, use (Whole artifact)**. For cell‑level advice add column and row names in parenthesis.
        • Exactly **one** artifactIndex per processChanges object; create multiple objects if the same fix spans several tables.
        • Keys in processChanges must use camelCase (`artifactIndex`) and follow the example schema. Allowed `type` values: `add_columns`, `modify_instructions`, `add_table`.
        • Before proposing *add_columns* compare desired name against existing names **as described in Analysis-workflow step 8**; skip the change if a near-duplicate exists.
        • Order processChanges by artifactIndex *strictly* ascending.
        • Propose modify_instructions only when the new text **materially** differs from the current value after case/whitespace **and semantic** normalisation **of visible text**, adds value/specifies something in more detail.
        • Do **not** emit more than **one** processChanges object for the same `artifactIndex`, unless one of them is an additional `add_table`.
        • If no fixes are needed, return "processChanges": [].
        • No extra text outside JSON, no triple backticks or code fencing.
        • Finish immediately after the final } character.

        **Reminder – Traceability waiver (early artifacts)**
        Same rule as Analysis-workflow step 3: skip *only* traceability gaps for artifacts 1.1.0 → 1.1.4; other gap types remain valid.

        ### STOP-CHECK before JSON
        • rootCauses ≤ 20 • lessons_learned ≤ 20 • processChanges ≤ 5
        • Process changes are a last resort: implement only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        • For every i, the locator prefix of lessons_learned[i] equals that of rootCauses[i]; **locators must be in the current phase (except global‑xx)**. Sorting must be applied to pairs jointly
        • Skip gaps whose “Related Reqs” cell is empty **and** artifactIndex starts with 1.1.0–1.1.4 **AND ensure none of those appear in rootCauses, lessons_learned, or processChanges**
        • Max **one** processChanges object per artifact unless type == add_table
        • For add_columns: abort if column already exists (case / punctuation insensitive)
        • If **no open issues in issues_text** → **no issue-based pairs**
        • After expanding multi‑artifact placements (Step 5), re‑check caps **and order/numbering**: total pairs ≤ 20; processChanges ≤ 5
        • If any rule fails → regenerate silently

        Return JSON with this structure:

        {
          "rootCauses": [],
          "lessons_learned": [],
          "processChanges": []
        }

        ────────────────────────  EXAMPLES  ───────────────────────
        (Templates only – never output verbatim or structure)

        ★ Combined example – few changes, many observations
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall",          // *DO not output this*: CRUMB → change
            "global-2: UUIDv7 IDs adopted because sortable, time-based",            // *DO not output this*: CRUMB (no change)
            "global-3: Prometheus monitoring selected across DevSecOps artifacts - improves observability", // *DO not output this*: CRUMB (no change)
            "global-4: AES-256 encryption selected because secures user data",               // *DO not output this*: CRUMB (no change)
            "global-5: Same KPI defined differently across artifacts - cross-artifact drift",
            "3.1.5: Rate-limit policy missing (Rate-Limit Policy column)",                    // *DO not output this*: ISSUE → change
            "1.1.7: Feedback loop frequency undefined (Frequency column)",                    // *DO not output this*: ISSUE (no change)
            "1.2.4: Mitigation recommendations vague"                                         // *DO not output this*: ISSUE (no change)
          ],

          "lessons_learned": [
            "global-1: Use REST/JSON for all backend and frontend APIs to simplify firewalls",
            "global-2: Adopt UUIDv7 for identifiers across services for ordering and analytics",
            "global-3: Standardise Prometheus monitoring across environments for unified metrics",
            "global-4: Keep AES-256 as default encryption for data-at-rest assets to secure user data",
            "global-5: Harmonise KPI definition and unit across artifacts 2.1.3 (SSOT) and 3.1.2",
            "3.1.5: Add rate-limit policy to every API interface",                            // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.1.7: Specify exact feedback loop cadence per sprint",                          // *DO not output this*: **PAIR-PREFIX RULE enforced**
            "1.2.4: Make mitigations actionable with numeric targets"                         // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],

          "processChanges": [
            { "type": "modify_instructions",                 // *DO not output this*: linked to first CRUMB pair
              "artifactIndex": "1.1.1",
              "new_instructions": "Declare REST/JSON as mandatory API style for this module" },
            { "type": "add_columns",                         // *DO not output this*: linked to first ISSUE pair
              "artifactIndex": "3.1.5",
              "columns": ["Rate-Limit Policy"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example A — **no schema change needed** (most common type, use this by default)
        {
          "rootCauses": [
            "global-1: REST/JSON chosen because simpler firewall"
          ],
          "lessons_learned": [
            "global-1: Standardise on REST/JSON project-wide because simpler firewall"
          ],
          "processChanges": []
        }

        ───────────────────────────────────────────────────────────
        Example B — **modify_instructions only**
        {
          "rootCauses": [
            "2.1.5: Rollback procedures undocumented for critical deployments"
          ],
          "lessons_learned": [
            "2.1.5: Document rollback steps to cut MTTR"                        // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "modify_instructions",
              "artifactIndex": "2.1.5",
              "new_instructions": "Add detailed rollback steps and success metric to each critical deployment" }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example C — **add_columns** (simple extension)
        {
          "rootCauses": [
            "3.2.6: Security metrics missing (Security Metrics column)"
          ],
          "lessons_learned": [
            "3.2.6: Link security metrics to requirements for traceability"             // *DO not output this*: **PAIR-PREFIX RULE enforced**
          ],
          "processChanges": [
            { "type": "add_columns",
              "artifactIndex": "3.2.6",
              "columns": ["Security Metrics"] }
          ]
        }

        ───────────────────────────────────────────────────────────
        Example D — **add_table** (rare; only when pipeline is fundamentally deficient)
        {
          "rootCauses": [
            "global-1: Compliance evidence scattered across artifacts"
          ],
          "lessons_learned": [
            "global-1: Create unified Compliance Evidence Matrix to centralise audits"
          ],
          "processChanges": [
            { "type": "add_table",
              "artifactIndex": "4.0.9",
              "artifact_name": "Compliance Evidence Matrix",
              "artifact_type": "table",
              "artifact_columns": "Evidence_ID, Artifact, Control, Evidence_Link, Reviewer, Review_Date",
              "obligatory_rows": "All high-impact controls",
              "custom_instructions": "One row per control evidence; keep Evidence_ID unique",
              "depends_on": ["1.1.5", "3.2.4.2"] }
          ]
        }

        *Reminder:
        - Do not output issues by just rephrasing them/mirroring as is into issue-based root causes/lessons learned. Add value by clustering them/searching for root causes. Otherwise skip and do not emit such simply "restating" issues-based root causes - lessons learned. You must add value beyond issues; otherwise skip and do not emit.
        - Make lessons learned actionable.
        - Surface high-impact crumbs and cross-artifact issue-based root causes/lessons learned as global-xx.
        - for decision-based global pairs: cluster crumbs by exact‑match WHAT (case/space/punctuation‑normalized only); keep only major decisions, then emit as global‑xx first; In each decision pair, the WHAT and WHY must be clear, and the WHY fragment must be the shortest meaningful ASCII‑only verbatim substring from WHY. Specific decisions must propagate as separate global lessons.
        - When the same root cause spans multiple artifacts, emit it as one root cause - lessons learned pair with global-xx prefix.
        - Emit processChanges only when the lesson/root cause pair cannot be implemented using the current tables/table structure, or when table-specific instructions directly contradict the lesson.
        - Output exactly one syntactically-valid JSON object,  no comments, no trailing commas, and only printable ASCII characters. Each pair of lesson learned and corresponding root cause MUST have locator prefix.*
        No extra text outside JSON, no triple backticks or code fencing.
        
DEBUG (LLMClient): GPT Response:
 {
  "rootCauses": [
    "global-1: Deterministic email encryption chosen because preserve contact capability",
    "global-2: UUIDv7 identifiers adopted because time-sortable IDs"
  ],
  "lessons_learned": [
    "global-1: Standardise deterministic email encryption project-wide to preserve contact capability",
    "global-2: Adopt UUIDv7 for all identifiers to enable time-ordering and analytics"
  ],
  "processChanges": []
}
Student/Teacher DOCX saved; CSV writer closed.
Generating issue_lifecycle.csv with major status transitions…
